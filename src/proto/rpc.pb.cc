// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#include "rpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_auth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Permission_auth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_auth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserAddOptions_auth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlarmMember_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Compare_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteRangeRequest_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteRangeResponse_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaseCheckpoint_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaseStatus_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Member_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PutRequest_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PutResponse_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RangeRequest_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RangeResponse_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RequestOp_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResponseHeader_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResponseOp_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchCancelRequest_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchCreateRequest_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchProgressRequest_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_kv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyValue_kv_2eproto;
namespace etcdserverpb {
class ResponseHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponseHeader> _instance;
} _ResponseHeader_default_instance_;
class RangeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RangeRequest> _instance;
} _RangeRequest_default_instance_;
class RangeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RangeResponse> _instance;
} _RangeResponse_default_instance_;
class PutRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutRequest> _instance;
} _PutRequest_default_instance_;
class PutResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutResponse> _instance;
} _PutResponse_default_instance_;
class DeleteRangeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteRangeRequest> _instance;
} _DeleteRangeRequest_default_instance_;
class DeleteRangeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteRangeResponse> _instance;
} _DeleteRangeResponse_default_instance_;
class RequestOpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestOp> _instance;
  const ::etcdserverpb::RangeRequest* request_range_;
  const ::etcdserverpb::PutRequest* request_put_;
  const ::etcdserverpb::DeleteRangeRequest* request_delete_range_;
  const ::etcdserverpb::TxnRequest* request_txn_;
} _RequestOp_default_instance_;
class ResponseOpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponseOp> _instance;
  const ::etcdserverpb::RangeResponse* response_range_;
  const ::etcdserverpb::PutResponse* response_put_;
  const ::etcdserverpb::DeleteRangeResponse* response_delete_range_;
  const ::etcdserverpb::TxnResponse* response_txn_;
} _ResponseOp_default_instance_;
class CompareDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Compare> _instance;
  ::PROTOBUF_NAMESPACE_ID::int64 version_;
  ::PROTOBUF_NAMESPACE_ID::int64 create_revision_;
  ::PROTOBUF_NAMESPACE_ID::int64 mod_revision_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int64 lease_;
} _Compare_default_instance_;
class TxnRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TxnRequest> _instance;
} _TxnRequest_default_instance_;
class TxnResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TxnResponse> _instance;
} _TxnResponse_default_instance_;
class CompactionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompactionRequest> _instance;
} _CompactionRequest_default_instance_;
class CompactionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompactionResponse> _instance;
} _CompactionResponse_default_instance_;
class HashRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HashRequest> _instance;
} _HashRequest_default_instance_;
class HashKVRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HashKVRequest> _instance;
} _HashKVRequest_default_instance_;
class HashKVResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HashKVResponse> _instance;
} _HashKVResponse_default_instance_;
class HashResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HashResponse> _instance;
} _HashResponse_default_instance_;
class SnapshotRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnapshotRequest> _instance;
} _SnapshotRequest_default_instance_;
class SnapshotResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnapshotResponse> _instance;
} _SnapshotResponse_default_instance_;
class WatchRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchRequest> _instance;
  const ::etcdserverpb::WatchCreateRequest* create_request_;
  const ::etcdserverpb::WatchCancelRequest* cancel_request_;
  const ::etcdserverpb::WatchProgressRequest* progress_request_;
} _WatchRequest_default_instance_;
class WatchCreateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchCreateRequest> _instance;
} _WatchCreateRequest_default_instance_;
class WatchCancelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchCancelRequest> _instance;
} _WatchCancelRequest_default_instance_;
class WatchProgressRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchProgressRequest> _instance;
} _WatchProgressRequest_default_instance_;
class WatchResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WatchResponse> _instance;
} _WatchResponse_default_instance_;
class LeaseGrantRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaseGrantRequest> _instance;
} _LeaseGrantRequest_default_instance_;
class LeaseGrantResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaseGrantResponse> _instance;
} _LeaseGrantResponse_default_instance_;
class LeaseRevokeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaseRevokeRequest> _instance;
} _LeaseRevokeRequest_default_instance_;
class LeaseRevokeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaseRevokeResponse> _instance;
} _LeaseRevokeResponse_default_instance_;
class LeaseCheckpointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaseCheckpoint> _instance;
} _LeaseCheckpoint_default_instance_;
class LeaseCheckpointRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaseCheckpointRequest> _instance;
} _LeaseCheckpointRequest_default_instance_;
class LeaseCheckpointResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaseCheckpointResponse> _instance;
} _LeaseCheckpointResponse_default_instance_;
class LeaseKeepAliveRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaseKeepAliveRequest> _instance;
} _LeaseKeepAliveRequest_default_instance_;
class LeaseKeepAliveResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaseKeepAliveResponse> _instance;
} _LeaseKeepAliveResponse_default_instance_;
class LeaseTimeToLiveRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaseTimeToLiveRequest> _instance;
} _LeaseTimeToLiveRequest_default_instance_;
class LeaseTimeToLiveResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaseTimeToLiveResponse> _instance;
} _LeaseTimeToLiveResponse_default_instance_;
class LeaseLeasesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaseLeasesRequest> _instance;
} _LeaseLeasesRequest_default_instance_;
class LeaseStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaseStatus> _instance;
} _LeaseStatus_default_instance_;
class LeaseLeasesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaseLeasesResponse> _instance;
} _LeaseLeasesResponse_default_instance_;
class MemberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Member> _instance;
} _Member_default_instance_;
class MemberAddRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberAddRequest> _instance;
} _MemberAddRequest_default_instance_;
class MemberAddResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberAddResponse> _instance;
} _MemberAddResponse_default_instance_;
class MemberRemoveRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberRemoveRequest> _instance;
} _MemberRemoveRequest_default_instance_;
class MemberRemoveResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberRemoveResponse> _instance;
} _MemberRemoveResponse_default_instance_;
class MemberUpdateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberUpdateRequest> _instance;
} _MemberUpdateRequest_default_instance_;
class MemberUpdateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberUpdateResponse> _instance;
} _MemberUpdateResponse_default_instance_;
class MemberListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberListRequest> _instance;
} _MemberListRequest_default_instance_;
class MemberListResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberListResponse> _instance;
} _MemberListResponse_default_instance_;
class MemberPromoteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberPromoteRequest> _instance;
} _MemberPromoteRequest_default_instance_;
class MemberPromoteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberPromoteResponse> _instance;
} _MemberPromoteResponse_default_instance_;
class DefragmentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DefragmentRequest> _instance;
} _DefragmentRequest_default_instance_;
class DefragmentResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DefragmentResponse> _instance;
} _DefragmentResponse_default_instance_;
class MoveLeaderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveLeaderRequest> _instance;
} _MoveLeaderRequest_default_instance_;
class MoveLeaderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveLeaderResponse> _instance;
} _MoveLeaderResponse_default_instance_;
class AlarmRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlarmRequest> _instance;
} _AlarmRequest_default_instance_;
class AlarmMemberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlarmMember> _instance;
} _AlarmMember_default_instance_;
class AlarmResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlarmResponse> _instance;
} _AlarmResponse_default_instance_;
class StatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusRequest> _instance;
} _StatusRequest_default_instance_;
class StatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusResponse> _instance;
} _StatusResponse_default_instance_;
class AuthEnableRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthEnableRequest> _instance;
} _AuthEnableRequest_default_instance_;
class AuthDisableRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthDisableRequest> _instance;
} _AuthDisableRequest_default_instance_;
class AuthenticateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthenticateRequest> _instance;
} _AuthenticateRequest_default_instance_;
class AuthUserAddRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthUserAddRequest> _instance;
} _AuthUserAddRequest_default_instance_;
class AuthUserGetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthUserGetRequest> _instance;
} _AuthUserGetRequest_default_instance_;
class AuthUserDeleteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthUserDeleteRequest> _instance;
} _AuthUserDeleteRequest_default_instance_;
class AuthUserChangePasswordRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthUserChangePasswordRequest> _instance;
} _AuthUserChangePasswordRequest_default_instance_;
class AuthUserGrantRoleRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthUserGrantRoleRequest> _instance;
} _AuthUserGrantRoleRequest_default_instance_;
class AuthUserRevokeRoleRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthUserRevokeRoleRequest> _instance;
} _AuthUserRevokeRoleRequest_default_instance_;
class AuthRoleAddRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthRoleAddRequest> _instance;
} _AuthRoleAddRequest_default_instance_;
class AuthRoleGetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthRoleGetRequest> _instance;
} _AuthRoleGetRequest_default_instance_;
class AuthUserListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthUserListRequest> _instance;
} _AuthUserListRequest_default_instance_;
class AuthRoleListRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthRoleListRequest> _instance;
} _AuthRoleListRequest_default_instance_;
class AuthRoleDeleteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthRoleDeleteRequest> _instance;
} _AuthRoleDeleteRequest_default_instance_;
class AuthRoleGrantPermissionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthRoleGrantPermissionRequest> _instance;
} _AuthRoleGrantPermissionRequest_default_instance_;
class AuthRoleRevokePermissionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthRoleRevokePermissionRequest> _instance;
} _AuthRoleRevokePermissionRequest_default_instance_;
class AuthEnableResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthEnableResponse> _instance;
} _AuthEnableResponse_default_instance_;
class AuthDisableResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthDisableResponse> _instance;
} _AuthDisableResponse_default_instance_;
class AuthenticateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthenticateResponse> _instance;
} _AuthenticateResponse_default_instance_;
class AuthUserAddResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthUserAddResponse> _instance;
} _AuthUserAddResponse_default_instance_;
class AuthUserGetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthUserGetResponse> _instance;
} _AuthUserGetResponse_default_instance_;
class AuthUserDeleteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthUserDeleteResponse> _instance;
} _AuthUserDeleteResponse_default_instance_;
class AuthUserChangePasswordResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthUserChangePasswordResponse> _instance;
} _AuthUserChangePasswordResponse_default_instance_;
class AuthUserGrantRoleResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthUserGrantRoleResponse> _instance;
} _AuthUserGrantRoleResponse_default_instance_;
class AuthUserRevokeRoleResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthUserRevokeRoleResponse> _instance;
} _AuthUserRevokeRoleResponse_default_instance_;
class AuthRoleAddResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthRoleAddResponse> _instance;
} _AuthRoleAddResponse_default_instance_;
class AuthRoleGetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthRoleGetResponse> _instance;
} _AuthRoleGetResponse_default_instance_;
class AuthRoleListResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthRoleListResponse> _instance;
} _AuthRoleListResponse_default_instance_;
class AuthUserListResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthUserListResponse> _instance;
} _AuthUserListResponse_default_instance_;
class AuthRoleDeleteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthRoleDeleteResponse> _instance;
} _AuthRoleDeleteResponse_default_instance_;
class AuthRoleGrantPermissionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthRoleGrantPermissionResponse> _instance;
} _AuthRoleGrantPermissionResponse_default_instance_;
class AuthRoleRevokePermissionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthRoleRevokePermissionResponse> _instance;
} _AuthRoleRevokePermissionResponse_default_instance_;
}  // namespace etcdserverpb
static void InitDefaultsscc_info_AlarmMember_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AlarmMember_default_instance_;
    new (ptr) ::etcdserverpb::AlarmMember();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AlarmMember::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlarmMember_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AlarmMember_rpc_2eproto}, {}};

static void InitDefaultsscc_info_AlarmRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AlarmRequest_default_instance_;
    new (ptr) ::etcdserverpb::AlarmRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AlarmRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlarmRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AlarmRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_AlarmResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AlarmResponse_default_instance_;
    new (ptr) ::etcdserverpb::AlarmResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AlarmResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AlarmResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AlarmResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,
      &scc_info_AlarmMember_rpc_2eproto.base,}};

static void InitDefaultsscc_info_AuthDisableRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthDisableRequest_default_instance_;
    new (ptr) ::etcdserverpb::AuthDisableRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthDisableRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthDisableRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthDisableRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_AuthDisableResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthDisableResponse_default_instance_;
    new (ptr) ::etcdserverpb::AuthDisableResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthDisableResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AuthDisableResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AuthDisableResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_AuthEnableRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthEnableRequest_default_instance_;
    new (ptr) ::etcdserverpb::AuthEnableRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthEnableRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthEnableRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthEnableRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_AuthEnableResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthEnableResponse_default_instance_;
    new (ptr) ::etcdserverpb::AuthEnableResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthEnableResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AuthEnableResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AuthEnableResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_AuthRoleAddRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthRoleAddRequest_default_instance_;
    new (ptr) ::etcdserverpb::AuthRoleAddRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthRoleAddRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthRoleAddRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthRoleAddRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_AuthRoleAddResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthRoleAddResponse_default_instance_;
    new (ptr) ::etcdserverpb::AuthRoleAddResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthRoleAddResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AuthRoleAddResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AuthRoleAddResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_AuthRoleDeleteRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthRoleDeleteRequest_default_instance_;
    new (ptr) ::etcdserverpb::AuthRoleDeleteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthRoleDeleteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthRoleDeleteRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthRoleDeleteRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_AuthRoleDeleteResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthRoleDeleteResponse_default_instance_;
    new (ptr) ::etcdserverpb::AuthRoleDeleteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthRoleDeleteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AuthRoleDeleteResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AuthRoleDeleteResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_AuthRoleGetRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthRoleGetRequest_default_instance_;
    new (ptr) ::etcdserverpb::AuthRoleGetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthRoleGetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthRoleGetRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthRoleGetRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_AuthRoleGetResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthRoleGetResponse_default_instance_;
    new (ptr) ::etcdserverpb::AuthRoleGetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthRoleGetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AuthRoleGetResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AuthRoleGetResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,
      &scc_info_Permission_auth_2eproto.base,}};

static void InitDefaultsscc_info_AuthRoleGrantPermissionRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthRoleGrantPermissionRequest_default_instance_;
    new (ptr) ::etcdserverpb::AuthRoleGrantPermissionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthRoleGrantPermissionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AuthRoleGrantPermissionRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AuthRoleGrantPermissionRequest_rpc_2eproto}, {
      &scc_info_Permission_auth_2eproto.base,}};

static void InitDefaultsscc_info_AuthRoleGrantPermissionResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthRoleGrantPermissionResponse_default_instance_;
    new (ptr) ::etcdserverpb::AuthRoleGrantPermissionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthRoleGrantPermissionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AuthRoleGrantPermissionResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AuthRoleGrantPermissionResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_AuthRoleListRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthRoleListRequest_default_instance_;
    new (ptr) ::etcdserverpb::AuthRoleListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthRoleListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthRoleListRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthRoleListRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_AuthRoleListResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthRoleListResponse_default_instance_;
    new (ptr) ::etcdserverpb::AuthRoleListResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthRoleListResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AuthRoleListResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AuthRoleListResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_AuthRoleRevokePermissionRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthRoleRevokePermissionRequest_default_instance_;
    new (ptr) ::etcdserverpb::AuthRoleRevokePermissionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthRoleRevokePermissionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthRoleRevokePermissionRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthRoleRevokePermissionRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_AuthRoleRevokePermissionResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthRoleRevokePermissionResponse_default_instance_;
    new (ptr) ::etcdserverpb::AuthRoleRevokePermissionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthRoleRevokePermissionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AuthRoleRevokePermissionResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AuthRoleRevokePermissionResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_AuthUserAddRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthUserAddRequest_default_instance_;
    new (ptr) ::etcdserverpb::AuthUserAddRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthUserAddRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AuthUserAddRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AuthUserAddRequest_rpc_2eproto}, {
      &scc_info_UserAddOptions_auth_2eproto.base,}};

static void InitDefaultsscc_info_AuthUserAddResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthUserAddResponse_default_instance_;
    new (ptr) ::etcdserverpb::AuthUserAddResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthUserAddResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AuthUserAddResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AuthUserAddResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_AuthUserChangePasswordRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthUserChangePasswordRequest_default_instance_;
    new (ptr) ::etcdserverpb::AuthUserChangePasswordRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthUserChangePasswordRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthUserChangePasswordRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthUserChangePasswordRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_AuthUserChangePasswordResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthUserChangePasswordResponse_default_instance_;
    new (ptr) ::etcdserverpb::AuthUserChangePasswordResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthUserChangePasswordResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AuthUserChangePasswordResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AuthUserChangePasswordResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_AuthUserDeleteRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthUserDeleteRequest_default_instance_;
    new (ptr) ::etcdserverpb::AuthUserDeleteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthUserDeleteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthUserDeleteRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthUserDeleteRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_AuthUserDeleteResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthUserDeleteResponse_default_instance_;
    new (ptr) ::etcdserverpb::AuthUserDeleteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthUserDeleteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AuthUserDeleteResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AuthUserDeleteResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_AuthUserGetRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthUserGetRequest_default_instance_;
    new (ptr) ::etcdserverpb::AuthUserGetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthUserGetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthUserGetRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthUserGetRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_AuthUserGetResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthUserGetResponse_default_instance_;
    new (ptr) ::etcdserverpb::AuthUserGetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthUserGetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AuthUserGetResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AuthUserGetResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_AuthUserGrantRoleRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthUserGrantRoleRequest_default_instance_;
    new (ptr) ::etcdserverpb::AuthUserGrantRoleRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthUserGrantRoleRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthUserGrantRoleRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthUserGrantRoleRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_AuthUserGrantRoleResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthUserGrantRoleResponse_default_instance_;
    new (ptr) ::etcdserverpb::AuthUserGrantRoleResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthUserGrantRoleResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AuthUserGrantRoleResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AuthUserGrantRoleResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_AuthUserListRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthUserListRequest_default_instance_;
    new (ptr) ::etcdserverpb::AuthUserListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthUserListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthUserListRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthUserListRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_AuthUserListResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthUserListResponse_default_instance_;
    new (ptr) ::etcdserverpb::AuthUserListResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthUserListResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AuthUserListResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AuthUserListResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_AuthUserRevokeRoleRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthUserRevokeRoleRequest_default_instance_;
    new (ptr) ::etcdserverpb::AuthUserRevokeRoleRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthUserRevokeRoleRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthUserRevokeRoleRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthUserRevokeRoleRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_AuthUserRevokeRoleResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthUserRevokeRoleResponse_default_instance_;
    new (ptr) ::etcdserverpb::AuthUserRevokeRoleResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthUserRevokeRoleResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AuthUserRevokeRoleResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AuthUserRevokeRoleResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_AuthenticateRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthenticateRequest_default_instance_;
    new (ptr) ::etcdserverpb::AuthenticateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthenticateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthenticateRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthenticateRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_AuthenticateResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_AuthenticateResponse_default_instance_;
    new (ptr) ::etcdserverpb::AuthenticateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::AuthenticateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AuthenticateResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AuthenticateResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_CompactionRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_CompactionRequest_default_instance_;
    new (ptr) ::etcdserverpb::CompactionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::CompactionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompactionRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CompactionRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_CompactionResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_CompactionResponse_default_instance_;
    new (ptr) ::etcdserverpb::CompactionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::CompactionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CompactionResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CompactionResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_Compare_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_Compare_default_instance_;
    new (ptr) ::etcdserverpb::Compare();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::Compare::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Compare_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Compare_rpc_2eproto}, {}};

static void InitDefaultsscc_info_DefragmentRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_DefragmentRequest_default_instance_;
    new (ptr) ::etcdserverpb::DefragmentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::DefragmentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DefragmentRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DefragmentRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_DefragmentResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_DefragmentResponse_default_instance_;
    new (ptr) ::etcdserverpb::DefragmentResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::DefragmentResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DefragmentResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DefragmentResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_DeleteRangeRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_DeleteRangeRequest_default_instance_;
    new (ptr) ::etcdserverpb::DeleteRangeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::DeleteRangeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteRangeRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteRangeRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_DeleteRangeResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_DeleteRangeResponse_default_instance_;
    new (ptr) ::etcdserverpb::DeleteRangeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::DeleteRangeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteRangeResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DeleteRangeResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,
      &scc_info_KeyValue_kv_2eproto.base,}};

static void InitDefaultsscc_info_HashKVRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_HashKVRequest_default_instance_;
    new (ptr) ::etcdserverpb::HashKVRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::HashKVRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HashKVRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HashKVRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_HashKVResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_HashKVResponse_default_instance_;
    new (ptr) ::etcdserverpb::HashKVResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::HashKVResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HashKVResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HashKVResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_HashRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_HashRequest_default_instance_;
    new (ptr) ::etcdserverpb::HashRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::HashRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HashRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HashRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_HashResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_HashResponse_default_instance_;
    new (ptr) ::etcdserverpb::HashResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::HashResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HashResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HashResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_LeaseCheckpoint_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_LeaseCheckpoint_default_instance_;
    new (ptr) ::etcdserverpb::LeaseCheckpoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::LeaseCheckpoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaseCheckpoint_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LeaseCheckpoint_rpc_2eproto}, {}};

static void InitDefaultsscc_info_LeaseCheckpointRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_LeaseCheckpointRequest_default_instance_;
    new (ptr) ::etcdserverpb::LeaseCheckpointRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::LeaseCheckpointRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LeaseCheckpointRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LeaseCheckpointRequest_rpc_2eproto}, {
      &scc_info_LeaseCheckpoint_rpc_2eproto.base,}};

static void InitDefaultsscc_info_LeaseCheckpointResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_LeaseCheckpointResponse_default_instance_;
    new (ptr) ::etcdserverpb::LeaseCheckpointResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::LeaseCheckpointResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LeaseCheckpointResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LeaseCheckpointResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_LeaseGrantRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_LeaseGrantRequest_default_instance_;
    new (ptr) ::etcdserverpb::LeaseGrantRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::LeaseGrantRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaseGrantRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LeaseGrantRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_LeaseGrantResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_LeaseGrantResponse_default_instance_;
    new (ptr) ::etcdserverpb::LeaseGrantResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::LeaseGrantResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LeaseGrantResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LeaseGrantResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_LeaseKeepAliveRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_LeaseKeepAliveRequest_default_instance_;
    new (ptr) ::etcdserverpb::LeaseKeepAliveRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::LeaseKeepAliveRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaseKeepAliveRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LeaseKeepAliveRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_LeaseKeepAliveResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_LeaseKeepAliveResponse_default_instance_;
    new (ptr) ::etcdserverpb::LeaseKeepAliveResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::LeaseKeepAliveResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LeaseKeepAliveResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LeaseKeepAliveResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_LeaseLeasesRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_LeaseLeasesRequest_default_instance_;
    new (ptr) ::etcdserverpb::LeaseLeasesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::LeaseLeasesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaseLeasesRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LeaseLeasesRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_LeaseLeasesResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_LeaseLeasesResponse_default_instance_;
    new (ptr) ::etcdserverpb::LeaseLeasesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::LeaseLeasesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LeaseLeasesResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LeaseLeasesResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,
      &scc_info_LeaseStatus_rpc_2eproto.base,}};

static void InitDefaultsscc_info_LeaseRevokeRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_LeaseRevokeRequest_default_instance_;
    new (ptr) ::etcdserverpb::LeaseRevokeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::LeaseRevokeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaseRevokeRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LeaseRevokeRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_LeaseRevokeResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_LeaseRevokeResponse_default_instance_;
    new (ptr) ::etcdserverpb::LeaseRevokeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::LeaseRevokeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LeaseRevokeResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LeaseRevokeResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_LeaseStatus_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_LeaseStatus_default_instance_;
    new (ptr) ::etcdserverpb::LeaseStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::LeaseStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaseStatus_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LeaseStatus_rpc_2eproto}, {}};

static void InitDefaultsscc_info_LeaseTimeToLiveRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_LeaseTimeToLiveRequest_default_instance_;
    new (ptr) ::etcdserverpb::LeaseTimeToLiveRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::LeaseTimeToLiveRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaseTimeToLiveRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LeaseTimeToLiveRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_LeaseTimeToLiveResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_LeaseTimeToLiveResponse_default_instance_;
    new (ptr) ::etcdserverpb::LeaseTimeToLiveResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::LeaseTimeToLiveResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LeaseTimeToLiveResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LeaseTimeToLiveResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_Member_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_Member_default_instance_;
    new (ptr) ::etcdserverpb::Member();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::Member::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Member_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Member_rpc_2eproto}, {}};

static void InitDefaultsscc_info_MemberAddRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_MemberAddRequest_default_instance_;
    new (ptr) ::etcdserverpb::MemberAddRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::MemberAddRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemberAddRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MemberAddRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_MemberAddResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_MemberAddResponse_default_instance_;
    new (ptr) ::etcdserverpb::MemberAddResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::MemberAddResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MemberAddResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MemberAddResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,
      &scc_info_Member_rpc_2eproto.base,}};

static void InitDefaultsscc_info_MemberListRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_MemberListRequest_default_instance_;
    new (ptr) ::etcdserverpb::MemberListRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::MemberListRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemberListRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MemberListRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_MemberListResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_MemberListResponse_default_instance_;
    new (ptr) ::etcdserverpb::MemberListResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::MemberListResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MemberListResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MemberListResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,
      &scc_info_Member_rpc_2eproto.base,}};

static void InitDefaultsscc_info_MemberPromoteRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_MemberPromoteRequest_default_instance_;
    new (ptr) ::etcdserverpb::MemberPromoteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::MemberPromoteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemberPromoteRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MemberPromoteRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_MemberPromoteResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_MemberPromoteResponse_default_instance_;
    new (ptr) ::etcdserverpb::MemberPromoteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::MemberPromoteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MemberPromoteResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MemberPromoteResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,
      &scc_info_Member_rpc_2eproto.base,}};

static void InitDefaultsscc_info_MemberRemoveRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_MemberRemoveRequest_default_instance_;
    new (ptr) ::etcdserverpb::MemberRemoveRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::MemberRemoveRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemberRemoveRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MemberRemoveRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_MemberRemoveResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_MemberRemoveResponse_default_instance_;
    new (ptr) ::etcdserverpb::MemberRemoveResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::MemberRemoveResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MemberRemoveResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MemberRemoveResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,
      &scc_info_Member_rpc_2eproto.base,}};

static void InitDefaultsscc_info_MemberUpdateRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_MemberUpdateRequest_default_instance_;
    new (ptr) ::etcdserverpb::MemberUpdateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::MemberUpdateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemberUpdateRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MemberUpdateRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_MemberUpdateResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_MemberUpdateResponse_default_instance_;
    new (ptr) ::etcdserverpb::MemberUpdateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::MemberUpdateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MemberUpdateResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MemberUpdateResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,
      &scc_info_Member_rpc_2eproto.base,}};

static void InitDefaultsscc_info_MoveLeaderRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_MoveLeaderRequest_default_instance_;
    new (ptr) ::etcdserverpb::MoveLeaderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::MoveLeaderRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveLeaderRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoveLeaderRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_MoveLeaderResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_MoveLeaderResponse_default_instance_;
    new (ptr) ::etcdserverpb::MoveLeaderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::MoveLeaderResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoveLeaderResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MoveLeaderResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_PutRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_PutRequest_default_instance_;
    new (ptr) ::etcdserverpb::PutRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::PutRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PutRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PutRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_PutResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_PutResponse_default_instance_;
    new (ptr) ::etcdserverpb::PutResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::PutResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PutResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PutResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,
      &scc_info_KeyValue_kv_2eproto.base,}};

static void InitDefaultsscc_info_RangeRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_RangeRequest_default_instance_;
    new (ptr) ::etcdserverpb::RangeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::RangeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RangeRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RangeRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_RangeResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_RangeResponse_default_instance_;
    new (ptr) ::etcdserverpb::RangeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::RangeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RangeResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RangeResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,
      &scc_info_KeyValue_kv_2eproto.base,}};

static void InitDefaultsscc_info_RequestOp_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_RequestOp_default_instance_;
    new (ptr) ::etcdserverpb::RequestOp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::etcdserverpb::_TxnRequest_default_instance_;
    new (ptr) ::etcdserverpb::TxnRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::RequestOp::InitAsDefaultInstance();
  ::etcdserverpb::TxnRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RequestOp_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_RequestOp_rpc_2eproto}, {
      &scc_info_RangeRequest_rpc_2eproto.base,
      &scc_info_PutRequest_rpc_2eproto.base,
      &scc_info_DeleteRangeRequest_rpc_2eproto.base,
      &scc_info_Compare_rpc_2eproto.base,}};

static void InitDefaultsscc_info_ResponseHeader_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_ResponseHeader_default_instance_;
    new (ptr) ::etcdserverpb::ResponseHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::ResponseHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResponseHeader_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResponseHeader_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ResponseOp_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_ResponseOp_default_instance_;
    new (ptr) ::etcdserverpb::ResponseOp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::etcdserverpb::_TxnResponse_default_instance_;
    new (ptr) ::etcdserverpb::TxnResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::ResponseOp::InitAsDefaultInstance();
  ::etcdserverpb::TxnResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResponseOp_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ResponseOp_rpc_2eproto}, {
      &scc_info_RangeResponse_rpc_2eproto.base,
      &scc_info_PutResponse_rpc_2eproto.base,
      &scc_info_DeleteRangeResponse_rpc_2eproto.base,
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_SnapshotRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_SnapshotRequest_default_instance_;
    new (ptr) ::etcdserverpb::SnapshotRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::SnapshotRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SnapshotRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SnapshotRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_SnapshotResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_SnapshotResponse_default_instance_;
    new (ptr) ::etcdserverpb::SnapshotResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::SnapshotResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SnapshotResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SnapshotResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_StatusRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_StatusRequest_default_instance_;
    new (ptr) ::etcdserverpb::StatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::StatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatusRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_StatusResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_StatusResponse_default_instance_;
    new (ptr) ::etcdserverpb::StatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::StatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StatusResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StatusResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,}};

static void InitDefaultsscc_info_WatchCancelRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_WatchCancelRequest_default_instance_;
    new (ptr) ::etcdserverpb::WatchCancelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::WatchCancelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchCancelRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchCancelRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_WatchCreateRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_WatchCreateRequest_default_instance_;
    new (ptr) ::etcdserverpb::WatchCreateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::WatchCreateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchCreateRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchCreateRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_WatchProgressRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_WatchProgressRequest_default_instance_;
    new (ptr) ::etcdserverpb::WatchProgressRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::WatchProgressRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WatchProgressRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WatchProgressRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_WatchRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_WatchRequest_default_instance_;
    new (ptr) ::etcdserverpb::WatchRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::WatchRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_WatchRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_WatchRequest_rpc_2eproto}, {
      &scc_info_WatchCreateRequest_rpc_2eproto.base,
      &scc_info_WatchCancelRequest_rpc_2eproto.base,
      &scc_info_WatchProgressRequest_rpc_2eproto.base,}};

static void InitDefaultsscc_info_WatchResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::etcdserverpb::_WatchResponse_default_instance_;
    new (ptr) ::etcdserverpb::WatchResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::etcdserverpb::WatchResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WatchResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_WatchResponse_rpc_2eproto}, {
      &scc_info_ResponseHeader_rpc_2eproto.base,
      &scc_info_Event_kv_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rpc_2eproto[91];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_rpc_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rpc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::ResponseHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::ResponseHeader, cluster_id_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::ResponseHeader, member_id_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::ResponseHeader, revision_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::ResponseHeader, raft_term_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, key_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, range_end_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, revision_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, sort_order_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, sort_target_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, serializable_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, keys_only_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, count_only_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, min_mod_revision_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, max_mod_revision_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, min_create_revision_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeRequest, max_create_revision_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeResponse, kvs_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeResponse, more_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RangeResponse, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::PutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::PutRequest, key_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::PutRequest, value_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::PutRequest, lease_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::PutRequest, prev_kv_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::PutRequest, ignore_value_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::PutRequest, ignore_lease_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::PutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::PutResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::PutResponse, prev_kv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::DeleteRangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::DeleteRangeRequest, key_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::DeleteRangeRequest, range_end_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::DeleteRangeRequest, prev_kv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::DeleteRangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::DeleteRangeResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::DeleteRangeResponse, deleted_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::DeleteRangeResponse, prev_kvs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RequestOp, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RequestOp, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::etcdserverpb::RequestOpDefaultTypeInternal, request_range_),
  offsetof(::etcdserverpb::RequestOpDefaultTypeInternal, request_put_),
  offsetof(::etcdserverpb::RequestOpDefaultTypeInternal, request_delete_range_),
  offsetof(::etcdserverpb::RequestOpDefaultTypeInternal, request_txn_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::RequestOp, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::ResponseOp, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::ResponseOp, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::etcdserverpb::ResponseOpDefaultTypeInternal, response_range_),
  offsetof(::etcdserverpb::ResponseOpDefaultTypeInternal, response_put_),
  offsetof(::etcdserverpb::ResponseOpDefaultTypeInternal, response_delete_range_),
  offsetof(::etcdserverpb::ResponseOpDefaultTypeInternal, response_txn_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::ResponseOp, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::Compare, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::Compare, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::Compare, result_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::Compare, target_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::Compare, key_),
  offsetof(::etcdserverpb::CompareDefaultTypeInternal, version_),
  offsetof(::etcdserverpb::CompareDefaultTypeInternal, create_revision_),
  offsetof(::etcdserverpb::CompareDefaultTypeInternal, mod_revision_),
  offsetof(::etcdserverpb::CompareDefaultTypeInternal, value_),
  offsetof(::etcdserverpb::CompareDefaultTypeInternal, lease_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::Compare, range_end_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::Compare, target_union_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::TxnRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::TxnRequest, compare_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::TxnRequest, success_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::TxnRequest, failure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::TxnResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::TxnResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::TxnResponse, succeeded_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::TxnResponse, responses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::CompactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::CompactionRequest, revision_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::CompactionRequest, physical_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::CompactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::CompactionResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::HashRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::HashKVRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::HashKVRequest, revision_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::HashKVResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::HashKVResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::HashKVResponse, hash_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::HashKVResponse, compact_revision_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::HashResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::HashResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::HashResponse, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::SnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::SnapshotResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::SnapshotResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::SnapshotResponse, remaining_bytes_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::SnapshotResponse, blob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::etcdserverpb::WatchRequestDefaultTypeInternal, create_request_),
  offsetof(::etcdserverpb::WatchRequestDefaultTypeInternal, cancel_request_),
  offsetof(::etcdserverpb::WatchRequestDefaultTypeInternal, progress_request_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchRequest, request_union_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchCreateRequest, key_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchCreateRequest, range_end_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchCreateRequest, start_revision_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchCreateRequest, progress_notify_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchCreateRequest, filters_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchCreateRequest, prev_kv_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchCreateRequest, watch_id_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchCreateRequest, fragment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchCancelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchCancelRequest, watch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchProgressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchResponse, watch_id_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchResponse, created_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchResponse, canceled_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchResponse, compact_revision_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchResponse, cancel_reason_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchResponse, fragment_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::WatchResponse, events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseGrantRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseGrantRequest, ttl_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseGrantRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseGrantResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseGrantResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseGrantResponse, id_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseGrantResponse, ttl_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseGrantResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseRevokeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseRevokeRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseRevokeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseRevokeResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseCheckpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseCheckpoint, id_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseCheckpoint, remaining_ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseCheckpointRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseCheckpointRequest, checkpoints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseCheckpointResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseCheckpointResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseKeepAliveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseKeepAliveRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseKeepAliveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseKeepAliveResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseKeepAliveResponse, id_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseKeepAliveResponse, ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseTimeToLiveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseTimeToLiveRequest, id_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseTimeToLiveRequest, keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseTimeToLiveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseTimeToLiveResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseTimeToLiveResponse, id_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseTimeToLiveResponse, ttl_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseTimeToLiveResponse, grantedttl_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseTimeToLiveResponse, keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseLeasesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseStatus, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseLeasesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseLeasesResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::LeaseLeasesResponse, leases_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::Member, id_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::Member, name_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::Member, peerurls_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::Member, clienturls_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::Member, islearner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberAddRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberAddRequest, peerurls_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberAddRequest, islearner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberAddResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberAddResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberAddResponse, member_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberAddResponse, members_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberRemoveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberRemoveRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberRemoveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberRemoveResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberRemoveResponse, members_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberUpdateRequest, id_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberUpdateRequest, peerurls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberUpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberUpdateResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberUpdateResponse, members_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberListResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberListResponse, members_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberPromoteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberPromoteRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberPromoteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberPromoteResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MemberPromoteResponse, members_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::DefragmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::DefragmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::DefragmentResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MoveLeaderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MoveLeaderRequest, targetid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MoveLeaderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::MoveLeaderResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AlarmRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AlarmRequest, action_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AlarmRequest, memberid_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AlarmRequest, alarm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AlarmMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AlarmMember, memberid_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AlarmMember, alarm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AlarmResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AlarmResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AlarmResponse, alarms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::StatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::StatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::StatusResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::StatusResponse, version_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::StatusResponse, dbsize_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::StatusResponse, leader_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::StatusResponse, raftindex_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::StatusResponse, raftterm_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::StatusResponse, raftappliedindex_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::StatusResponse, errors_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::StatusResponse, dbsizeinuse_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::StatusResponse, islearner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthEnableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthDisableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthenticateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthenticateRequest, name_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthenticateRequest, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserAddRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserAddRequest, name_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserAddRequest, password_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserAddRequest, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserGetRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserDeleteRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserChangePasswordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserChangePasswordRequest, name_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserChangePasswordRequest, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserGrantRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserGrantRoleRequest, user_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserGrantRoleRequest, role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserRevokeRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserRevokeRoleRequest, name_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserRevokeRoleRequest, role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleAddRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleAddRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleGetRequest, role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleDeleteRequest, role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleGrantPermissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleGrantPermissionRequest, name_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleGrantPermissionRequest, perm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleRevokePermissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleRevokePermissionRequest, role_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleRevokePermissionRequest, key_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleRevokePermissionRequest, range_end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthEnableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthEnableResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthDisableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthDisableResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthenticateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthenticateResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthenticateResponse, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserAddResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserAddResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserGetResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserGetResponse, roles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserDeleteResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserChangePasswordResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserChangePasswordResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserGrantRoleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserGrantRoleResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserRevokeRoleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserRevokeRoleResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleAddResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleAddResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleGetResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleGetResponse, perm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleListResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleListResponse, roles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserListResponse, header_),
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthUserListResponse, users_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleDeleteResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleGrantPermissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleGrantPermissionResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleRevokePermissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::etcdserverpb::AuthRoleRevokePermissionResponse, header_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::etcdserverpb::ResponseHeader)},
  { 9, -1, sizeof(::etcdserverpb::RangeRequest)},
  { 27, -1, sizeof(::etcdserverpb::RangeResponse)},
  { 36, -1, sizeof(::etcdserverpb::PutRequest)},
  { 47, -1, sizeof(::etcdserverpb::PutResponse)},
  { 54, -1, sizeof(::etcdserverpb::DeleteRangeRequest)},
  { 62, -1, sizeof(::etcdserverpb::DeleteRangeResponse)},
  { 70, -1, sizeof(::etcdserverpb::RequestOp)},
  { 80, -1, sizeof(::etcdserverpb::ResponseOp)},
  { 90, -1, sizeof(::etcdserverpb::Compare)},
  { 105, -1, sizeof(::etcdserverpb::TxnRequest)},
  { 113, -1, sizeof(::etcdserverpb::TxnResponse)},
  { 121, -1, sizeof(::etcdserverpb::CompactionRequest)},
  { 128, -1, sizeof(::etcdserverpb::CompactionResponse)},
  { 134, -1, sizeof(::etcdserverpb::HashRequest)},
  { 139, -1, sizeof(::etcdserverpb::HashKVRequest)},
  { 145, -1, sizeof(::etcdserverpb::HashKVResponse)},
  { 153, -1, sizeof(::etcdserverpb::HashResponse)},
  { 160, -1, sizeof(::etcdserverpb::SnapshotRequest)},
  { 165, -1, sizeof(::etcdserverpb::SnapshotResponse)},
  { 173, -1, sizeof(::etcdserverpb::WatchRequest)},
  { 182, -1, sizeof(::etcdserverpb::WatchCreateRequest)},
  { 195, -1, sizeof(::etcdserverpb::WatchCancelRequest)},
  { 201, -1, sizeof(::etcdserverpb::WatchProgressRequest)},
  { 206, -1, sizeof(::etcdserverpb::WatchResponse)},
  { 219, -1, sizeof(::etcdserverpb::LeaseGrantRequest)},
  { 226, -1, sizeof(::etcdserverpb::LeaseGrantResponse)},
  { 235, -1, sizeof(::etcdserverpb::LeaseRevokeRequest)},
  { 241, -1, sizeof(::etcdserverpb::LeaseRevokeResponse)},
  { 247, -1, sizeof(::etcdserverpb::LeaseCheckpoint)},
  { 254, -1, sizeof(::etcdserverpb::LeaseCheckpointRequest)},
  { 260, -1, sizeof(::etcdserverpb::LeaseCheckpointResponse)},
  { 266, -1, sizeof(::etcdserverpb::LeaseKeepAliveRequest)},
  { 272, -1, sizeof(::etcdserverpb::LeaseKeepAliveResponse)},
  { 280, -1, sizeof(::etcdserverpb::LeaseTimeToLiveRequest)},
  { 287, -1, sizeof(::etcdserverpb::LeaseTimeToLiveResponse)},
  { 297, -1, sizeof(::etcdserverpb::LeaseLeasesRequest)},
  { 302, -1, sizeof(::etcdserverpb::LeaseStatus)},
  { 308, -1, sizeof(::etcdserverpb::LeaseLeasesResponse)},
  { 315, -1, sizeof(::etcdserverpb::Member)},
  { 325, -1, sizeof(::etcdserverpb::MemberAddRequest)},
  { 332, -1, sizeof(::etcdserverpb::MemberAddResponse)},
  { 340, -1, sizeof(::etcdserverpb::MemberRemoveRequest)},
  { 346, -1, sizeof(::etcdserverpb::MemberRemoveResponse)},
  { 353, -1, sizeof(::etcdserverpb::MemberUpdateRequest)},
  { 360, -1, sizeof(::etcdserverpb::MemberUpdateResponse)},
  { 367, -1, sizeof(::etcdserverpb::MemberListRequest)},
  { 372, -1, sizeof(::etcdserverpb::MemberListResponse)},
  { 379, -1, sizeof(::etcdserverpb::MemberPromoteRequest)},
  { 385, -1, sizeof(::etcdserverpb::MemberPromoteResponse)},
  { 392, -1, sizeof(::etcdserverpb::DefragmentRequest)},
  { 397, -1, sizeof(::etcdserverpb::DefragmentResponse)},
  { 403, -1, sizeof(::etcdserverpb::MoveLeaderRequest)},
  { 409, -1, sizeof(::etcdserverpb::MoveLeaderResponse)},
  { 415, -1, sizeof(::etcdserverpb::AlarmRequest)},
  { 423, -1, sizeof(::etcdserverpb::AlarmMember)},
  { 430, -1, sizeof(::etcdserverpb::AlarmResponse)},
  { 437, -1, sizeof(::etcdserverpb::StatusRequest)},
  { 442, -1, sizeof(::etcdserverpb::StatusResponse)},
  { 457, -1, sizeof(::etcdserverpb::AuthEnableRequest)},
  { 462, -1, sizeof(::etcdserverpb::AuthDisableRequest)},
  { 467, -1, sizeof(::etcdserverpb::AuthenticateRequest)},
  { 474, -1, sizeof(::etcdserverpb::AuthUserAddRequest)},
  { 482, -1, sizeof(::etcdserverpb::AuthUserGetRequest)},
  { 488, -1, sizeof(::etcdserverpb::AuthUserDeleteRequest)},
  { 494, -1, sizeof(::etcdserverpb::AuthUserChangePasswordRequest)},
  { 501, -1, sizeof(::etcdserverpb::AuthUserGrantRoleRequest)},
  { 508, -1, sizeof(::etcdserverpb::AuthUserRevokeRoleRequest)},
  { 515, -1, sizeof(::etcdserverpb::AuthRoleAddRequest)},
  { 521, -1, sizeof(::etcdserverpb::AuthRoleGetRequest)},
  { 527, -1, sizeof(::etcdserverpb::AuthUserListRequest)},
  { 532, -1, sizeof(::etcdserverpb::AuthRoleListRequest)},
  { 537, -1, sizeof(::etcdserverpb::AuthRoleDeleteRequest)},
  { 543, -1, sizeof(::etcdserverpb::AuthRoleGrantPermissionRequest)},
  { 550, -1, sizeof(::etcdserverpb::AuthRoleRevokePermissionRequest)},
  { 558, -1, sizeof(::etcdserverpb::AuthEnableResponse)},
  { 564, -1, sizeof(::etcdserverpb::AuthDisableResponse)},
  { 570, -1, sizeof(::etcdserverpb::AuthenticateResponse)},
  { 577, -1, sizeof(::etcdserverpb::AuthUserAddResponse)},
  { 583, -1, sizeof(::etcdserverpb::AuthUserGetResponse)},
  { 590, -1, sizeof(::etcdserverpb::AuthUserDeleteResponse)},
  { 596, -1, sizeof(::etcdserverpb::AuthUserChangePasswordResponse)},
  { 602, -1, sizeof(::etcdserverpb::AuthUserGrantRoleResponse)},
  { 608, -1, sizeof(::etcdserverpb::AuthUserRevokeRoleResponse)},
  { 614, -1, sizeof(::etcdserverpb::AuthRoleAddResponse)},
  { 620, -1, sizeof(::etcdserverpb::AuthRoleGetResponse)},
  { 627, -1, sizeof(::etcdserverpb::AuthRoleListResponse)},
  { 634, -1, sizeof(::etcdserverpb::AuthUserListResponse)},
  { 641, -1, sizeof(::etcdserverpb::AuthRoleDeleteResponse)},
  { 647, -1, sizeof(::etcdserverpb::AuthRoleGrantPermissionResponse)},
  { 653, -1, sizeof(::etcdserverpb::AuthRoleRevokePermissionResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_ResponseHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_RangeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_RangeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_PutRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_PutResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_DeleteRangeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_DeleteRangeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_RequestOp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_ResponseOp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_Compare_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_TxnRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_TxnResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_CompactionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_CompactionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_HashRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_HashKVRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_HashKVResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_HashResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_SnapshotRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_SnapshotResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_WatchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_WatchCreateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_WatchCancelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_WatchProgressRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_WatchResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_LeaseGrantRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_LeaseGrantResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_LeaseRevokeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_LeaseRevokeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_LeaseCheckpoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_LeaseCheckpointRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_LeaseCheckpointResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_LeaseKeepAliveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_LeaseKeepAliveResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_LeaseTimeToLiveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_LeaseTimeToLiveResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_LeaseLeasesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_LeaseStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_LeaseLeasesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_Member_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_MemberAddRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_MemberAddResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_MemberRemoveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_MemberRemoveResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_MemberUpdateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_MemberUpdateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_MemberListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_MemberListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_MemberPromoteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_MemberPromoteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_DefragmentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_DefragmentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_MoveLeaderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_MoveLeaderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AlarmRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AlarmMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AlarmResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_StatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_StatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthEnableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthDisableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthenticateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserAddRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserDeleteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserChangePasswordRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserGrantRoleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserRevokeRoleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthRoleAddRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthRoleGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthRoleListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthRoleDeleteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthRoleGrantPermissionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthRoleRevokePermissionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthEnableResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthDisableResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthenticateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserAddResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserGetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserDeleteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserChangePasswordResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserGrantRoleResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserRevokeRoleResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthRoleAddResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthRoleGetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthRoleListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthUserListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthRoleDeleteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthRoleGrantPermissionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::etcdserverpb::_AuthRoleRevokePermissionResponse_default_instance_),
};

const char descriptor_table_protodef_rpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\trpc.proto\022\014etcdserverpb\032\010kv.proto\032\naut"
  "h.proto\"\\\n\016ResponseHeader\022\022\n\ncluster_id\030"
  "\001 \001(\004\022\021\n\tmember_id\030\002 \001(\004\022\020\n\010revision\030\003 \001"
  "(\003\022\021\n\traft_term\030\004 \001(\004\"\344\003\n\014RangeRequest\022\013"
  "\n\003key\030\001 \001(\014\022\021\n\trange_end\030\002 \001(\014\022\r\n\005limit\030"
  "\003 \001(\003\022\020\n\010revision\030\004 \001(\003\0228\n\nsort_order\030\005 "
  "\001(\0162$.etcdserverpb.RangeRequest.SortOrde"
  "r\022:\n\013sort_target\030\006 \001(\0162%.etcdserverpb.Ra"
  "ngeRequest.SortTarget\022\024\n\014serializable\030\007 "
  "\001(\010\022\021\n\tkeys_only\030\010 \001(\010\022\022\n\ncount_only\030\t \001"
  "(\010\022\030\n\020min_mod_revision\030\n \001(\003\022\030\n\020max_mod_"
  "revision\030\013 \001(\003\022\033\n\023min_create_revision\030\014 "
  "\001(\003\022\033\n\023max_create_revision\030\r \001(\003\".\n\tSort"
  "Order\022\010\n\004NONE\020\000\022\n\n\006ASCEND\020\001\022\013\n\007DESCEND\020\002"
  "\"B\n\nSortTarget\022\007\n\003KEY\020\000\022\013\n\007VERSION\020\001\022\n\n\006"
  "CREATE\020\002\022\007\n\003MOD\020\003\022\t\n\005VALUE\020\004\"y\n\rRangeRes"
  "ponse\022,\n\006header\030\001 \001(\0132\034.etcdserverpb.Res"
  "ponseHeader\022\035\n\003kvs\030\002 \003(\0132\020.mvccpb.KeyVal"
  "ue\022\014\n\004more\030\003 \001(\010\022\r\n\005count\030\004 \001(\003\"t\n\nPutRe"
  "quest\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 \001(\014\022\r\n\005lea"
  "se\030\003 \001(\003\022\017\n\007prev_kv\030\004 \001(\010\022\024\n\014ignore_valu"
  "e\030\005 \001(\010\022\024\n\014ignore_lease\030\006 \001(\010\"^\n\013PutResp"
  "onse\022,\n\006header\030\001 \001(\0132\034.etcdserverpb.Resp"
  "onseHeader\022!\n\007prev_kv\030\002 \001(\0132\020.mvccpb.Key"
  "Value\"E\n\022DeleteRangeRequest\022\013\n\003key\030\001 \001(\014"
  "\022\021\n\trange_end\030\002 \001(\014\022\017\n\007prev_kv\030\003 \001(\010\"x\n\023"
  "DeleteRangeResponse\022,\n\006header\030\001 \001(\0132\034.et"
  "cdserverpb.ResponseHeader\022\017\n\007deleted\030\002 \001"
  "(\003\022\"\n\010prev_kvs\030\003 \003(\0132\020.mvccpb.KeyValue\"\357"
  "\001\n\tRequestOp\0223\n\rrequest_range\030\001 \001(\0132\032.et"
  "cdserverpb.RangeRequestH\000\022/\n\013request_put"
  "\030\002 \001(\0132\030.etcdserverpb.PutRequestH\000\022@\n\024re"
  "quest_delete_range\030\003 \001(\0132 .etcdserverpb."
  "DeleteRangeRequestH\000\022/\n\013request_txn\030\004 \001("
  "\0132\030.etcdserverpb.TxnRequestH\000B\t\n\007request"
  "\"\371\001\n\nResponseOp\0225\n\016response_range\030\001 \001(\0132"
  "\033.etcdserverpb.RangeResponseH\000\0221\n\014respon"
  "se_put\030\002 \001(\0132\031.etcdserverpb.PutResponseH"
  "\000\022B\n\025response_delete_range\030\003 \001(\0132!.etcds"
  "erverpb.DeleteRangeResponseH\000\0221\n\014respons"
  "e_txn\030\004 \001(\0132\031.etcdserverpb.TxnResponseH\000"
  "B\n\n\010response\"\226\003\n\007Compare\0223\n\006result\030\001 \001(\016"
  "2#.etcdserverpb.Compare.CompareResult\0223\n"
  "\006target\030\002 \001(\0162#.etcdserverpb.Compare.Com"
  "pareTarget\022\013\n\003key\030\003 \001(\014\022\021\n\007version\030\004 \001(\003"
  "H\000\022\031\n\017create_revision\030\005 \001(\003H\000\022\026\n\014mod_rev"
  "ision\030\006 \001(\003H\000\022\017\n\005value\030\007 \001(\014H\000\022\017\n\005lease\030"
  "\010 \001(\003H\000\022\021\n\trange_end\030@ \001(\014\"@\n\rCompareRes"
  "ult\022\t\n\005EQUAL\020\000\022\013\n\007GREATER\020\001\022\010\n\004LESS\020\002\022\r\n"
  "\tNOT_EQUAL\020\003\"G\n\rCompareTarget\022\013\n\007VERSION"
  "\020\000\022\n\n\006CREATE\020\001\022\007\n\003MOD\020\002\022\t\n\005VALUE\020\003\022\t\n\005LE"
  "ASE\020\004B\016\n\014target_union\"\210\001\n\nTxnRequest\022&\n\007"
  "compare\030\001 \003(\0132\025.etcdserverpb.Compare\022(\n\007"
  "success\030\002 \003(\0132\027.etcdserverpb.RequestOp\022("
  "\n\007failure\030\003 \003(\0132\027.etcdserverpb.RequestOp"
  "\"{\n\013TxnResponse\022,\n\006header\030\001 \001(\0132\034.etcdse"
  "rverpb.ResponseHeader\022\021\n\tsucceeded\030\002 \001(\010"
  "\022+\n\tresponses\030\003 \003(\0132\030.etcdserverpb.Respo"
  "nseOp\"7\n\021CompactionRequest\022\020\n\010revision\030\001"
  " \001(\003\022\020\n\010physical\030\002 \001(\010\"B\n\022CompactionResp"
  "onse\022,\n\006header\030\001 \001(\0132\034.etcdserverpb.Resp"
  "onseHeader\"\r\n\013HashRequest\"!\n\rHashKVReque"
  "st\022\020\n\010revision\030\001 \001(\003\"f\n\016HashKVResponse\022,"
  "\n\006header\030\001 \001(\0132\034.etcdserverpb.ResponseHe"
  "ader\022\014\n\004hash\030\002 \001(\r\022\030\n\020compact_revision\030\003"
  " \001(\003\"J\n\014HashResponse\022,\n\006header\030\001 \001(\0132\034.e"
  "tcdserverpb.ResponseHeader\022\014\n\004hash\030\002 \001(\r"
  "\"\021\n\017SnapshotRequest\"g\n\020SnapshotResponse\022"
  ",\n\006header\030\001 \001(\0132\034.etcdserverpb.ResponseH"
  "eader\022\027\n\017remaining_bytes\030\002 \001(\004\022\014\n\004blob\030\003"
  " \001(\014\"\327\001\n\014WatchRequest\022:\n\016create_request\030"
  "\001 \001(\0132 .etcdserverpb.WatchCreateRequestH"
  "\000\022:\n\016cancel_request\030\002 \001(\0132 .etcdserverpb"
  ".WatchCancelRequestH\000\022>\n\020progress_reques"
  "t\030\003 \001(\0132\".etcdserverpb.WatchProgressRequ"
  "estH\000B\017\n\rrequest_union\"\377\001\n\022WatchCreateRe"
  "quest\022\013\n\003key\030\001 \001(\014\022\021\n\trange_end\030\002 \001(\014\022\026\n"
  "\016start_revision\030\003 \001(\003\022\027\n\017progress_notify"
  "\030\004 \001(\010\022<\n\007filters\030\005 \003(\0162+.etcdserverpb.W"
  "atchCreateRequest.FilterType\022\017\n\007prev_kv\030"
  "\006 \001(\010\022\020\n\010watch_id\030\007 \001(\003\022\020\n\010fragment\030\010 \001("
  "\010\"%\n\nFilterType\022\t\n\005NOPUT\020\000\022\014\n\010NODELETE\020\001"
  "\"&\n\022WatchCancelRequest\022\020\n\010watch_id\030\001 \001(\003"
  "\"\026\n\024WatchProgressRequest\"\324\001\n\rWatchRespon"
  "se\022,\n\006header\030\001 \001(\0132\034.etcdserverpb.Respon"
  "seHeader\022\020\n\010watch_id\030\002 \001(\003\022\017\n\007created\030\003 "
  "\001(\010\022\020\n\010canceled\030\004 \001(\010\022\030\n\020compact_revisio"
  "n\030\005 \001(\003\022\025\n\rcancel_reason\030\006 \001(\t\022\020\n\010fragme"
  "nt\030\007 \001(\010\022\035\n\006events\030\013 \003(\0132\r.mvccpb.Event\""
  ",\n\021LeaseGrantRequest\022\013\n\003TTL\030\001 \001(\003\022\n\n\002ID\030"
  "\002 \001(\003\"j\n\022LeaseGrantResponse\022,\n\006header\030\001 "
  "\001(\0132\034.etcdserverpb.ResponseHeader\022\n\n\002ID\030"
  "\002 \001(\003\022\013\n\003TTL\030\003 \001(\003\022\r\n\005error\030\004 \001(\t\" \n\022Lea"
  "seRevokeRequest\022\n\n\002ID\030\001 \001(\003\"C\n\023LeaseRevo"
  "keResponse\022,\n\006header\030\001 \001(\0132\034.etcdserverp"
  "b.ResponseHeader\"4\n\017LeaseCheckpoint\022\n\n\002I"
  "D\030\001 \001(\003\022\025\n\rremaining_TTL\030\002 \001(\003\"L\n\026LeaseC"
  "heckpointRequest\0222\n\013checkpoints\030\001 \003(\0132\035."
  "etcdserverpb.LeaseCheckpoint\"G\n\027LeaseChe"
  "ckpointResponse\022,\n\006header\030\001 \001(\0132\034.etcdse"
  "rverpb.ResponseHeader\"#\n\025LeaseKeepAliveR"
  "equest\022\n\n\002ID\030\001 \001(\003\"_\n\026LeaseKeepAliveResp"
  "onse\022,\n\006header\030\001 \001(\0132\034.etcdserverpb.Resp"
  "onseHeader\022\n\n\002ID\030\002 \001(\003\022\013\n\003TTL\030\003 \001(\003\"2\n\026L"
  "easeTimeToLiveRequest\022\n\n\002ID\030\001 \001(\003\022\014\n\004key"
  "s\030\002 \001(\010\"\202\001\n\027LeaseTimeToLiveResponse\022,\n\006h"
  "eader\030\001 \001(\0132\034.etcdserverpb.ResponseHeade"
  "r\022\n\n\002ID\030\002 \001(\003\022\013\n\003TTL\030\003 \001(\003\022\022\n\ngrantedTTL"
  "\030\004 \001(\003\022\014\n\004keys\030\005 \003(\014\"\024\n\022LeaseLeasesReque"
  "st\"\031\n\013LeaseStatus\022\n\n\002ID\030\001 \001(\003\"n\n\023LeaseLe"
  "asesResponse\022,\n\006header\030\001 \001(\0132\034.etcdserve"
  "rpb.ResponseHeader\022)\n\006leases\030\002 \003(\0132\031.etc"
  "dserverpb.LeaseStatus\"[\n\006Member\022\n\n\002ID\030\001 "
  "\001(\004\022\014\n\004name\030\002 \001(\t\022\020\n\010peerURLs\030\003 \003(\t\022\022\n\nc"
  "lientURLs\030\004 \003(\t\022\021\n\tisLearner\030\005 \001(\010\"7\n\020Me"
  "mberAddRequest\022\020\n\010peerURLs\030\001 \003(\t\022\021\n\tisLe"
  "arner\030\002 \001(\010\"\216\001\n\021MemberAddResponse\022,\n\006hea"
  "der\030\001 \001(\0132\034.etcdserverpb.ResponseHeader\022"
  "$\n\006member\030\002 \001(\0132\024.etcdserverpb.Member\022%\n"
  "\007members\030\003 \003(\0132\024.etcdserverpb.Member\"!\n\023"
  "MemberRemoveRequest\022\n\n\002ID\030\001 \001(\004\"k\n\024Membe"
  "rRemoveResponse\022,\n\006header\030\001 \001(\0132\034.etcdse"
  "rverpb.ResponseHeader\022%\n\007members\030\002 \003(\0132\024"
  ".etcdserverpb.Member\"3\n\023MemberUpdateRequ"
  "est\022\n\n\002ID\030\001 \001(\004\022\020\n\010peerURLs\030\002 \003(\t\"k\n\024Mem"
  "berUpdateResponse\022,\n\006header\030\001 \001(\0132\034.etcd"
  "serverpb.ResponseHeader\022%\n\007members\030\002 \003(\013"
  "2\024.etcdserverpb.Member\"\023\n\021MemberListRequ"
  "est\"i\n\022MemberListResponse\022,\n\006header\030\001 \001("
  "\0132\034.etcdserverpb.ResponseHeader\022%\n\007membe"
  "rs\030\002 \003(\0132\024.etcdserverpb.Member\"\"\n\024Member"
  "PromoteRequest\022\n\n\002ID\030\001 \001(\004\"l\n\025MemberProm"
  "oteResponse\022,\n\006header\030\001 \001(\0132\034.etcdserver"
  "pb.ResponseHeader\022%\n\007members\030\002 \003(\0132\024.etc"
  "dserverpb.Member\"\023\n\021DefragmentRequest\"B\n"
  "\022DefragmentResponse\022,\n\006header\030\001 \001(\0132\034.et"
  "cdserverpb.ResponseHeader\"%\n\021MoveLeaderR"
  "equest\022\020\n\010targetID\030\001 \001(\004\"B\n\022MoveLeaderRe"
  "sponse\022,\n\006header\030\001 \001(\0132\034.etcdserverpb.Re"
  "sponseHeader\"\266\001\n\014AlarmRequest\0226\n\006action\030"
  "\001 \001(\0162&.etcdserverpb.AlarmRequest.AlarmA"
  "ction\022\020\n\010memberID\030\002 \001(\004\022&\n\005alarm\030\003 \001(\0162\027"
  ".etcdserverpb.AlarmType\"4\n\013AlarmAction\022\007"
  "\n\003GET\020\000\022\014\n\010ACTIVATE\020\001\022\016\n\nDEACTIVATE\020\002\"G\n"
  "\013AlarmMember\022\020\n\010memberID\030\001 \001(\004\022&\n\005alarm\030"
  "\002 \001(\0162\027.etcdserverpb.AlarmType\"h\n\rAlarmR"
  "esponse\022,\n\006header\030\001 \001(\0132\034.etcdserverpb.R"
  "esponseHeader\022)\n\006alarms\030\002 \003(\0132\031.etcdserv"
  "erpb.AlarmMember\"\017\n\rStatusRequest\"\346\001\n\016St"
  "atusResponse\022,\n\006header\030\001 \001(\0132\034.etcdserve"
  "rpb.ResponseHeader\022\017\n\007version\030\002 \001(\t\022\016\n\006d"
  "bSize\030\003 \001(\003\022\016\n\006leader\030\004 \001(\004\022\021\n\traftIndex"
  "\030\005 \001(\004\022\020\n\010raftTerm\030\006 \001(\004\022\030\n\020raftAppliedI"
  "ndex\030\007 \001(\004\022\016\n\006errors\030\010 \003(\t\022\023\n\013dbSizeInUs"
  "e\030\t \001(\003\022\021\n\tisLearner\030\n \001(\010\"\023\n\021AuthEnable"
  "Request\"\024\n\022AuthDisableRequest\"5\n\023Authent"
  "icateRequest\022\014\n\004name\030\001 \001(\t\022\020\n\010password\030\002"
  " \001(\t\"]\n\022AuthUserAddRequest\022\014\n\004name\030\001 \001(\t"
  "\022\020\n\010password\030\002 \001(\t\022\'\n\007options\030\003 \001(\0132\026.au"
  "thpb.UserAddOptions\"\"\n\022AuthUserGetReques"
  "t\022\014\n\004name\030\001 \001(\t\"%\n\025AuthUserDeleteRequest"
  "\022\014\n\004name\030\001 \001(\t\"\?\n\035AuthUserChangePassword"
  "Request\022\014\n\004name\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\""
  "6\n\030AuthUserGrantRoleRequest\022\014\n\004user\030\001 \001("
  "\t\022\014\n\004role\030\002 \001(\t\"7\n\031AuthUserRevokeRoleReq"
  "uest\022\014\n\004name\030\001 \001(\t\022\014\n\004role\030\002 \001(\t\"\"\n\022Auth"
  "RoleAddRequest\022\014\n\004name\030\001 \001(\t\"\"\n\022AuthRole"
  "GetRequest\022\014\n\004role\030\001 \001(\t\"\025\n\023AuthUserList"
  "Request\"\025\n\023AuthRoleListRequest\"%\n\025AuthRo"
  "leDeleteRequest\022\014\n\004role\030\001 \001(\t\"P\n\036AuthRol"
  "eGrantPermissionRequest\022\014\n\004name\030\001 \001(\t\022 \n"
  "\004perm\030\002 \001(\0132\022.authpb.Permission\"O\n\037AuthR"
  "oleRevokePermissionRequest\022\014\n\004role\030\001 \001(\t"
  "\022\013\n\003key\030\002 \001(\014\022\021\n\trange_end\030\003 \001(\014\"B\n\022Auth"
  "EnableResponse\022,\n\006header\030\001 \001(\0132\034.etcdser"
  "verpb.ResponseHeader\"C\n\023AuthDisableRespo"
  "nse\022,\n\006header\030\001 \001(\0132\034.etcdserverpb.Respo"
  "nseHeader\"S\n\024AuthenticateResponse\022,\n\006hea"
  "der\030\001 \001(\0132\034.etcdserverpb.ResponseHeader\022"
  "\r\n\005token\030\002 \001(\t\"C\n\023AuthUserAddResponse\022,\n"
  "\006header\030\001 \001(\0132\034.etcdserverpb.ResponseHea"
  "der\"R\n\023AuthUserGetResponse\022,\n\006header\030\001 \001"
  "(\0132\034.etcdserverpb.ResponseHeader\022\r\n\005role"
  "s\030\002 \003(\t\"F\n\026AuthUserDeleteResponse\022,\n\006hea"
  "der\030\001 \001(\0132\034.etcdserverpb.ResponseHeader\""
  "N\n\036AuthUserChangePasswordResponse\022,\n\006hea"
  "der\030\001 \001(\0132\034.etcdserverpb.ResponseHeader\""
  "I\n\031AuthUserGrantRoleResponse\022,\n\006header\030\001"
  " \001(\0132\034.etcdserverpb.ResponseHeader\"J\n\032Au"
  "thUserRevokeRoleResponse\022,\n\006header\030\001 \001(\013"
  "2\034.etcdserverpb.ResponseHeader\"C\n\023AuthRo"
  "leAddResponse\022,\n\006header\030\001 \001(\0132\034.etcdserv"
  "erpb.ResponseHeader\"e\n\023AuthRoleGetRespon"
  "se\022,\n\006header\030\001 \001(\0132\034.etcdserverpb.Respon"
  "seHeader\022 \n\004perm\030\002 \003(\0132\022.authpb.Permissi"
  "on\"S\n\024AuthRoleListResponse\022,\n\006header\030\001 \001"
  "(\0132\034.etcdserverpb.ResponseHeader\022\r\n\005role"
  "s\030\002 \003(\t\"S\n\024AuthUserListResponse\022,\n\006heade"
  "r\030\001 \001(\0132\034.etcdserverpb.ResponseHeader\022\r\n"
  "\005users\030\002 \003(\t\"F\n\026AuthRoleDeleteResponse\022,"
  "\n\006header\030\001 \001(\0132\034.etcdserverpb.ResponseHe"
  "ader\"O\n\037AuthRoleGrantPermissionResponse\022"
  ",\n\006header\030\001 \001(\0132\034.etcdserverpb.ResponseH"
  "eader\"P\n AuthRoleRevokePermissionRespons"
  "e\022,\n\006header\030\001 \001(\0132\034.etcdserverpb.Respons"
  "eHeader*/\n\tAlarmType\022\010\n\004NONE\020\000\022\013\n\007NOSPAC"
  "E\020\001\022\013\n\007CORRUPT\020\0022\352\002\n\002KV\022B\n\005Range\022\032.etcds"
  "erverpb.RangeRequest\032\033.etcdserverpb.Rang"
  "eResponse\"\000\022<\n\003Put\022\030.etcdserverpb.PutReq"
  "uest\032\031.etcdserverpb.PutResponse\"\000\022T\n\013Del"
  "eteRange\022 .etcdserverpb.DeleteRangeReque"
  "st\032!.etcdserverpb.DeleteRangeResponse\"\000\022"
  "<\n\003Txn\022\030.etcdserverpb.TxnRequest\032\031.etcds"
  "erverpb.TxnResponse\"\000\022N\n\007Compact\022\037.etcds"
  "erverpb.CompactionRequest\032 .etcdserverpb"
  ".CompactionResponse\"\0002O\n\005Watch\022F\n\005Watch\022"
  "\032.etcdserverpb.WatchRequest\032\033.etcdserver"
  "pb.WatchResponse\"\000(\0010\0012\313\003\n\005Lease\022Q\n\nLeas"
  "eGrant\022\037.etcdserverpb.LeaseGrantRequest\032"
  " .etcdserverpb.LeaseGrantResponse\"\000\022T\n\013L"
  "easeRevoke\022 .etcdserverpb.LeaseRevokeReq"
  "uest\032!.etcdserverpb.LeaseRevokeResponse\""
  "\000\022a\n\016LeaseKeepAlive\022#.etcdserverpb.Lease"
  "KeepAliveRequest\032$.etcdserverpb.LeaseKee"
  "pAliveResponse\"\000(\0010\001\022`\n\017LeaseTimeToLive\022"
  "$.etcdserverpb.LeaseTimeToLiveRequest\032%."
  "etcdserverpb.LeaseTimeToLiveResponse\"\000\022T"
  "\n\013LeaseLeases\022 .etcdserverpb.LeaseLeases"
  "Request\032!.etcdserverpb.LeaseLeasesRespon"
  "se\"\0002\272\003\n\007Cluster\022N\n\tMemberAdd\022\036.etcdserv"
  "erpb.MemberAddRequest\032\037.etcdserverpb.Mem"
  "berAddResponse\"\000\022W\n\014MemberRemove\022!.etcds"
  "erverpb.MemberRemoveRequest\032\".etcdserver"
  "pb.MemberRemoveResponse\"\000\022W\n\014MemberUpdat"
  "e\022!.etcdserverpb.MemberUpdateRequest\032\".e"
  "tcdserverpb.MemberUpdateResponse\"\000\022Q\n\nMe"
  "mberList\022\037.etcdserverpb.MemberListReques"
  "t\032 .etcdserverpb.MemberListResponse\"\000\022Z\n"
  "\rMemberPromote\022\".etcdserverpb.MemberProm"
  "oteRequest\032#.etcdserverpb.MemberPromoteR"
  "esponse\"\0002\225\004\n\013Maintenance\022B\n\005Alarm\022\032.etc"
  "dserverpb.AlarmRequest\032\033.etcdserverpb.Al"
  "armResponse\"\000\022E\n\006Status\022\033.etcdserverpb.S"
  "tatusRequest\032\034.etcdserverpb.StatusRespon"
  "se\"\000\022Q\n\nDefragment\022\037.etcdserverpb.Defrag"
  "mentRequest\032 .etcdserverpb.DefragmentRes"
  "ponse\"\000\022\?\n\004Hash\022\031.etcdserverpb.HashReque"
  "st\032\032.etcdserverpb.HashResponse\"\000\022E\n\006Hash"
  "KV\022\033.etcdserverpb.HashKVRequest\032\034.etcdse"
  "rverpb.HashKVResponse\"\000\022M\n\010Snapshot\022\035.et"
  "cdserverpb.SnapshotRequest\032\036.etcdserverp"
  "b.SnapshotResponse\"\0000\001\022Q\n\nMoveLeader\022\037.e"
  "tcdserverpb.MoveLeaderRequest\032 .etcdserv"
  "erpb.MoveLeaderResponse\"\0002\335\013\n\004Auth\022Q\n\nAu"
  "thEnable\022\037.etcdserverpb.AuthEnableReques"
  "t\032 .etcdserverpb.AuthEnableResponse\"\000\022T\n"
  "\013AuthDisable\022 .etcdserverpb.AuthDisableR"
  "equest\032!.etcdserverpb.AuthDisableRespons"
  "e\"\000\022W\n\014Authenticate\022!.etcdserverpb.Authe"
  "nticateRequest\032\".etcdserverpb.Authentica"
  "teResponse\"\000\022P\n\007UserAdd\022 .etcdserverpb.A"
  "uthUserAddRequest\032!.etcdserverpb.AuthUse"
  "rAddResponse\"\000\022P\n\007UserGet\022 .etcdserverpb"
  ".AuthUserGetRequest\032!.etcdserverpb.AuthU"
  "serGetResponse\"\000\022S\n\010UserList\022!.etcdserve"
  "rpb.AuthUserListRequest\032\".etcdserverpb.A"
  "uthUserListResponse\"\000\022Y\n\nUserDelete\022#.et"
  "cdserverpb.AuthUserDeleteRequest\032$.etcds"
  "erverpb.AuthUserDeleteResponse\"\000\022q\n\022User"
  "ChangePassword\022+.etcdserverpb.AuthUserCh"
  "angePasswordRequest\032,.etcdserverpb.AuthU"
  "serChangePasswordResponse\"\000\022b\n\rUserGrant"
  "Role\022&.etcdserverpb.AuthUserGrantRoleReq"
  "uest\032\'.etcdserverpb.AuthUserGrantRoleRes"
  "ponse\"\000\022e\n\016UserRevokeRole\022\'.etcdserverpb"
  ".AuthUserRevokeRoleRequest\032(.etcdserverp"
  "b.AuthUserRevokeRoleResponse\"\000\022P\n\007RoleAd"
  "d\022 .etcdserverpb.AuthRoleAddRequest\032!.et"
  "cdserverpb.AuthRoleAddResponse\"\000\022P\n\007Role"
  "Get\022 .etcdserverpb.AuthRoleGetRequest\032!."
  "etcdserverpb.AuthRoleGetResponse\"\000\022S\n\010Ro"
  "leList\022!.etcdserverpb.AuthRoleListReques"
  "t\032\".etcdserverpb.AuthRoleListResponse\"\000\022"
  "Y\n\nRoleDelete\022#.etcdserverpb.AuthRoleDel"
  "eteRequest\032$.etcdserverpb.AuthRoleDelete"
  "Response\"\000\022t\n\023RoleGrantPermission\022,.etcd"
  "serverpb.AuthRoleGrantPermissionRequest\032"
  "-.etcdserverpb.AuthRoleGrantPermissionRe"
  "sponse\"\000\022w\n\024RoleRevokePermission\022-.etcds"
  "erverpb.AuthRoleRevokePermissionRequest\032"
  "..etcdserverpb.AuthRoleRevokePermissionR"
  "esponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rpc_2eproto_deps[2] = {
  &::descriptor_table_auth_2eproto,
  &::descriptor_table_kv_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rpc_2eproto_sccs[89] = {
  &scc_info_AlarmMember_rpc_2eproto.base,
  &scc_info_AlarmRequest_rpc_2eproto.base,
  &scc_info_AlarmResponse_rpc_2eproto.base,
  &scc_info_AuthDisableRequest_rpc_2eproto.base,
  &scc_info_AuthDisableResponse_rpc_2eproto.base,
  &scc_info_AuthEnableRequest_rpc_2eproto.base,
  &scc_info_AuthEnableResponse_rpc_2eproto.base,
  &scc_info_AuthRoleAddRequest_rpc_2eproto.base,
  &scc_info_AuthRoleAddResponse_rpc_2eproto.base,
  &scc_info_AuthRoleDeleteRequest_rpc_2eproto.base,
  &scc_info_AuthRoleDeleteResponse_rpc_2eproto.base,
  &scc_info_AuthRoleGetRequest_rpc_2eproto.base,
  &scc_info_AuthRoleGetResponse_rpc_2eproto.base,
  &scc_info_AuthRoleGrantPermissionRequest_rpc_2eproto.base,
  &scc_info_AuthRoleGrantPermissionResponse_rpc_2eproto.base,
  &scc_info_AuthRoleListRequest_rpc_2eproto.base,
  &scc_info_AuthRoleListResponse_rpc_2eproto.base,
  &scc_info_AuthRoleRevokePermissionRequest_rpc_2eproto.base,
  &scc_info_AuthRoleRevokePermissionResponse_rpc_2eproto.base,
  &scc_info_AuthUserAddRequest_rpc_2eproto.base,
  &scc_info_AuthUserAddResponse_rpc_2eproto.base,
  &scc_info_AuthUserChangePasswordRequest_rpc_2eproto.base,
  &scc_info_AuthUserChangePasswordResponse_rpc_2eproto.base,
  &scc_info_AuthUserDeleteRequest_rpc_2eproto.base,
  &scc_info_AuthUserDeleteResponse_rpc_2eproto.base,
  &scc_info_AuthUserGetRequest_rpc_2eproto.base,
  &scc_info_AuthUserGetResponse_rpc_2eproto.base,
  &scc_info_AuthUserGrantRoleRequest_rpc_2eproto.base,
  &scc_info_AuthUserGrantRoleResponse_rpc_2eproto.base,
  &scc_info_AuthUserListRequest_rpc_2eproto.base,
  &scc_info_AuthUserListResponse_rpc_2eproto.base,
  &scc_info_AuthUserRevokeRoleRequest_rpc_2eproto.base,
  &scc_info_AuthUserRevokeRoleResponse_rpc_2eproto.base,
  &scc_info_AuthenticateRequest_rpc_2eproto.base,
  &scc_info_AuthenticateResponse_rpc_2eproto.base,
  &scc_info_CompactionRequest_rpc_2eproto.base,
  &scc_info_CompactionResponse_rpc_2eproto.base,
  &scc_info_Compare_rpc_2eproto.base,
  &scc_info_DefragmentRequest_rpc_2eproto.base,
  &scc_info_DefragmentResponse_rpc_2eproto.base,
  &scc_info_DeleteRangeRequest_rpc_2eproto.base,
  &scc_info_DeleteRangeResponse_rpc_2eproto.base,
  &scc_info_HashKVRequest_rpc_2eproto.base,
  &scc_info_HashKVResponse_rpc_2eproto.base,
  &scc_info_HashRequest_rpc_2eproto.base,
  &scc_info_HashResponse_rpc_2eproto.base,
  &scc_info_LeaseCheckpoint_rpc_2eproto.base,
  &scc_info_LeaseCheckpointRequest_rpc_2eproto.base,
  &scc_info_LeaseCheckpointResponse_rpc_2eproto.base,
  &scc_info_LeaseGrantRequest_rpc_2eproto.base,
  &scc_info_LeaseGrantResponse_rpc_2eproto.base,
  &scc_info_LeaseKeepAliveRequest_rpc_2eproto.base,
  &scc_info_LeaseKeepAliveResponse_rpc_2eproto.base,
  &scc_info_LeaseLeasesRequest_rpc_2eproto.base,
  &scc_info_LeaseLeasesResponse_rpc_2eproto.base,
  &scc_info_LeaseRevokeRequest_rpc_2eproto.base,
  &scc_info_LeaseRevokeResponse_rpc_2eproto.base,
  &scc_info_LeaseStatus_rpc_2eproto.base,
  &scc_info_LeaseTimeToLiveRequest_rpc_2eproto.base,
  &scc_info_LeaseTimeToLiveResponse_rpc_2eproto.base,
  &scc_info_Member_rpc_2eproto.base,
  &scc_info_MemberAddRequest_rpc_2eproto.base,
  &scc_info_MemberAddResponse_rpc_2eproto.base,
  &scc_info_MemberListRequest_rpc_2eproto.base,
  &scc_info_MemberListResponse_rpc_2eproto.base,
  &scc_info_MemberPromoteRequest_rpc_2eproto.base,
  &scc_info_MemberPromoteResponse_rpc_2eproto.base,
  &scc_info_MemberRemoveRequest_rpc_2eproto.base,
  &scc_info_MemberRemoveResponse_rpc_2eproto.base,
  &scc_info_MemberUpdateRequest_rpc_2eproto.base,
  &scc_info_MemberUpdateResponse_rpc_2eproto.base,
  &scc_info_MoveLeaderRequest_rpc_2eproto.base,
  &scc_info_MoveLeaderResponse_rpc_2eproto.base,
  &scc_info_PutRequest_rpc_2eproto.base,
  &scc_info_PutResponse_rpc_2eproto.base,
  &scc_info_RangeRequest_rpc_2eproto.base,
  &scc_info_RangeResponse_rpc_2eproto.base,
  &scc_info_RequestOp_rpc_2eproto.base,
  &scc_info_ResponseHeader_rpc_2eproto.base,
  &scc_info_ResponseOp_rpc_2eproto.base,
  &scc_info_SnapshotRequest_rpc_2eproto.base,
  &scc_info_SnapshotResponse_rpc_2eproto.base,
  &scc_info_StatusRequest_rpc_2eproto.base,
  &scc_info_StatusResponse_rpc_2eproto.base,
  &scc_info_WatchCancelRequest_rpc_2eproto.base,
  &scc_info_WatchCreateRequest_rpc_2eproto.base,
  &scc_info_WatchProgressRequest_rpc_2eproto.base,
  &scc_info_WatchRequest_rpc_2eproto.base,
  &scc_info_WatchResponse_rpc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rpc_2eproto_once;
static bool descriptor_table_rpc_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_2eproto = {
  &descriptor_table_rpc_2eproto_initialized, descriptor_table_protodef_rpc_2eproto, "rpc.proto", 11657,
  &descriptor_table_rpc_2eproto_once, descriptor_table_rpc_2eproto_sccs, descriptor_table_rpc_2eproto_deps, 89, 2,
  schemas, file_default_instances, TableStruct_rpc_2eproto::offsets,
  file_level_metadata_rpc_2eproto, 91, file_level_enum_descriptors_rpc_2eproto, file_level_service_descriptors_rpc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rpc_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rpc_2eproto), true);
namespace etcdserverpb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RangeRequest_SortOrder_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[0];
}
bool RangeRequest_SortOrder_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RangeRequest_SortOrder RangeRequest::NONE;
constexpr RangeRequest_SortOrder RangeRequest::ASCEND;
constexpr RangeRequest_SortOrder RangeRequest::DESCEND;
constexpr RangeRequest_SortOrder RangeRequest::SortOrder_MIN;
constexpr RangeRequest_SortOrder RangeRequest::SortOrder_MAX;
constexpr int RangeRequest::SortOrder_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RangeRequest_SortTarget_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[1];
}
bool RangeRequest_SortTarget_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RangeRequest_SortTarget RangeRequest::KEY;
constexpr RangeRequest_SortTarget RangeRequest::VERSION;
constexpr RangeRequest_SortTarget RangeRequest::CREATE;
constexpr RangeRequest_SortTarget RangeRequest::MOD;
constexpr RangeRequest_SortTarget RangeRequest::VALUE;
constexpr RangeRequest_SortTarget RangeRequest::SortTarget_MIN;
constexpr RangeRequest_SortTarget RangeRequest::SortTarget_MAX;
constexpr int RangeRequest::SortTarget_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Compare_CompareResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[2];
}
bool Compare_CompareResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Compare_CompareResult Compare::EQUAL;
constexpr Compare_CompareResult Compare::GREATER;
constexpr Compare_CompareResult Compare::LESS;
constexpr Compare_CompareResult Compare::NOT_EQUAL;
constexpr Compare_CompareResult Compare::CompareResult_MIN;
constexpr Compare_CompareResult Compare::CompareResult_MAX;
constexpr int Compare::CompareResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Compare_CompareTarget_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[3];
}
bool Compare_CompareTarget_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Compare_CompareTarget Compare::VERSION;
constexpr Compare_CompareTarget Compare::CREATE;
constexpr Compare_CompareTarget Compare::MOD;
constexpr Compare_CompareTarget Compare::VALUE;
constexpr Compare_CompareTarget Compare::LEASE;
constexpr Compare_CompareTarget Compare::CompareTarget_MIN;
constexpr Compare_CompareTarget Compare::CompareTarget_MAX;
constexpr int Compare::CompareTarget_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WatchCreateRequest_FilterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[4];
}
bool WatchCreateRequest_FilterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WatchCreateRequest_FilterType WatchCreateRequest::NOPUT;
constexpr WatchCreateRequest_FilterType WatchCreateRequest::NODELETE;
constexpr WatchCreateRequest_FilterType WatchCreateRequest::FilterType_MIN;
constexpr WatchCreateRequest_FilterType WatchCreateRequest::FilterType_MAX;
constexpr int WatchCreateRequest::FilterType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlarmRequest_AlarmAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[5];
}
bool AlarmRequest_AlarmAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AlarmRequest_AlarmAction AlarmRequest::GET;
constexpr AlarmRequest_AlarmAction AlarmRequest::ACTIVATE;
constexpr AlarmRequest_AlarmAction AlarmRequest::DEACTIVATE;
constexpr AlarmRequest_AlarmAction AlarmRequest::AlarmAction_MIN;
constexpr AlarmRequest_AlarmAction AlarmRequest::AlarmAction_MAX;
constexpr int AlarmRequest::AlarmAction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlarmType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[6];
}
bool AlarmType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ResponseHeader::InitAsDefaultInstance() {
}
class ResponseHeader::_Internal {
 public:
};

ResponseHeader::ResponseHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.ResponseHeader)
}
ResponseHeader::ResponseHeader(const ResponseHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cluster_id_, &from.cluster_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&raft_term_) -
    reinterpret_cast<char*>(&cluster_id_)) + sizeof(raft_term_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.ResponseHeader)
}

void ResponseHeader::SharedCtor() {
  ::memset(&cluster_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&raft_term_) -
      reinterpret_cast<char*>(&cluster_id_)) + sizeof(raft_term_));
}

ResponseHeader::~ResponseHeader() {
  // @@protoc_insertion_point(destructor:etcdserverpb.ResponseHeader)
  SharedDtor();
}

void ResponseHeader::SharedDtor() {
}

void ResponseHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseHeader& ResponseHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseHeader_rpc_2eproto.base);
  return *internal_default_instance();
}


void ResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.ResponseHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cluster_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&raft_term_) -
      reinterpret_cast<char*>(&cluster_id_)) + sizeof(raft_term_));
  _internal_metadata_.Clear();
}

const char* ResponseHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 cluster_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cluster_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 member_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          member_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 revision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 raft_term = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          raft_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseHeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.ResponseHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_cluster_id(), target);
  }

  // uint64 member_id = 2;
  if (this->member_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_member_id(), target);
  }

  // int64 revision = 3;
  if (this->revision() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_revision(), target);
  }

  // uint64 raft_term = 4;
  if (this->raft_term() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_raft_term(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.ResponseHeader)
  return target;
}

size_t ResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.ResponseHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cluster_id());
  }

  // uint64 member_id = 2;
  if (this->member_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_member_id());
  }

  // int64 revision = 3;
  if (this->revision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_revision());
  }

  // uint64 raft_term = 4;
  if (this->raft_term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_raft_term());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.ResponseHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.ResponseHeader)
    MergeFrom(*source);
  }
}

void ResponseHeader::MergeFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cluster_id() != 0) {
    _internal_set_cluster_id(from._internal_cluster_id());
  }
  if (from.member_id() != 0) {
    _internal_set_member_id(from._internal_member_id());
  }
  if (from.revision() != 0) {
    _internal_set_revision(from._internal_revision());
  }
  if (from.raft_term() != 0) {
    _internal_set_raft_term(from._internal_raft_term());
  }
}

void ResponseHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseHeader::CopyFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHeader::IsInitialized() const {
  return true;
}

void ResponseHeader::InternalSwap(ResponseHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cluster_id_, other->cluster_id_);
  swap(member_id_, other->member_id_);
  swap(revision_, other->revision_);
  swap(raft_term_, other->raft_term_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RangeRequest::InitAsDefaultInstance() {
}
class RangeRequest::_Internal {
 public:
};

RangeRequest::RangeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.RangeRequest)
}
RangeRequest::RangeRequest(const RangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  range_end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_range_end().empty()) {
    range_end_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.range_end_);
  }
  ::memcpy(&limit_, &from.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_only_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(count_only_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.RangeRequest)
}

void RangeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RangeRequest_rpc_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  range_end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_only_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(count_only_));
}

RangeRequest::~RangeRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.RangeRequest)
  SharedDtor();
}

void RangeRequest::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  range_end_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RangeRequest& RangeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RangeRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void RangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.RangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  range_end_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_only_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(count_only_));
  _internal_metadata_.Clear();
}

const char* RangeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes range_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_range_end(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 revision = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .etcdserverpb.RangeRequest.SortOrder sort_order = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_sort_order(static_cast<::etcdserverpb::RangeRequest_SortOrder>(val));
        } else goto handle_unusual;
        continue;
      // .etcdserverpb.RangeRequest.SortTarget sort_target = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_sort_target(static_cast<::etcdserverpb::RangeRequest_SortTarget>(val));
        } else goto handle_unusual;
        continue;
      // bool serializable = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          serializable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool keys_only = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          keys_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool count_only = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          count_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 min_mod_revision = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          min_mod_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max_mod_revision = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          max_mod_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 min_create_revision = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          min_create_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max_create_revision = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          max_create_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RangeRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.RangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes range_end = 2;
  if (this->range_end().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_range_end(), target);
  }

  // int64 limit = 3;
  if (this->limit() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_limit(), target);
  }

  // int64 revision = 4;
  if (this->revision() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_revision(), target);
  }

  // .etcdserverpb.RangeRequest.SortOrder sort_order = 5;
  if (this->sort_order() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_sort_order(), target);
  }

  // .etcdserverpb.RangeRequest.SortTarget sort_target = 6;
  if (this->sort_target() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_sort_target(), target);
  }

  // bool serializable = 7;
  if (this->serializable() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_serializable(), target);
  }

  // bool keys_only = 8;
  if (this->keys_only() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_keys_only(), target);
  }

  // bool count_only = 9;
  if (this->count_only() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_count_only(), target);
  }

  // int64 min_mod_revision = 10;
  if (this->min_mod_revision() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_min_mod_revision(), target);
  }

  // int64 max_mod_revision = 11;
  if (this->max_mod_revision() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_max_mod_revision(), target);
  }

  // int64 min_create_revision = 12;
  if (this->min_create_revision() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_min_create_revision(), target);
  }

  // int64 max_create_revision = 13;
  if (this->max_create_revision() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_max_create_revision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.RangeRequest)
  return target;
}

size_t RangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.RangeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes range_end = 2;
  if (this->range_end().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_range_end());
  }

  // int64 limit = 3;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_limit());
  }

  // int64 revision = 4;
  if (this->revision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_revision());
  }

  // .etcdserverpb.RangeRequest.SortOrder sort_order = 5;
  if (this->sort_order() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sort_order());
  }

  // .etcdserverpb.RangeRequest.SortTarget sort_target = 6;
  if (this->sort_target() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sort_target());
  }

  // int64 min_mod_revision = 10;
  if (this->min_mod_revision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_min_mod_revision());
  }

  // int64 max_mod_revision = 11;
  if (this->max_mod_revision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_mod_revision());
  }

  // int64 min_create_revision = 12;
  if (this->min_create_revision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_min_create_revision());
  }

  // int64 max_create_revision = 13;
  if (this->max_create_revision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_create_revision());
  }

  // bool serializable = 7;
  if (this->serializable() != 0) {
    total_size += 1 + 1;
  }

  // bool keys_only = 8;
  if (this->keys_only() != 0) {
    total_size += 1 + 1;
  }

  // bool count_only = 9;
  if (this->count_only() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.RangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RangeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.RangeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.RangeRequest)
    MergeFrom(*source);
  }
}

void RangeRequest::MergeFrom(const RangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.RangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.range_end().size() > 0) {

    range_end_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.range_end_);
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  if (from.revision() != 0) {
    _internal_set_revision(from._internal_revision());
  }
  if (from.sort_order() != 0) {
    _internal_set_sort_order(from._internal_sort_order());
  }
  if (from.sort_target() != 0) {
    _internal_set_sort_target(from._internal_sort_target());
  }
  if (from.min_mod_revision() != 0) {
    _internal_set_min_mod_revision(from._internal_min_mod_revision());
  }
  if (from.max_mod_revision() != 0) {
    _internal_set_max_mod_revision(from._internal_max_mod_revision());
  }
  if (from.min_create_revision() != 0) {
    _internal_set_min_create_revision(from._internal_min_create_revision());
  }
  if (from.max_create_revision() != 0) {
    _internal_set_max_create_revision(from._internal_max_create_revision());
  }
  if (from.serializable() != 0) {
    _internal_set_serializable(from._internal_serializable());
  }
  if (from.keys_only() != 0) {
    _internal_set_keys_only(from._internal_keys_only());
  }
  if (from.count_only() != 0) {
    _internal_set_count_only(from._internal_count_only());
  }
}

void RangeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.RangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeRequest::CopyFrom(const RangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.RangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeRequest::IsInitialized() const {
  return true;
}

void RangeRequest::InternalSwap(RangeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  range_end_.Swap(&other->range_end_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
  swap(revision_, other->revision_);
  swap(sort_order_, other->sort_order_);
  swap(sort_target_, other->sort_target_);
  swap(min_mod_revision_, other->min_mod_revision_);
  swap(max_mod_revision_, other->max_mod_revision_);
  swap(min_create_revision_, other->min_create_revision_);
  swap(max_create_revision_, other->max_create_revision_);
  swap(serializable_, other->serializable_);
  swap(keys_only_, other->keys_only_);
  swap(count_only_, other->count_only_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RangeResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_RangeResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class RangeResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const RangeResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
RangeResponse::_Internal::header(const RangeResponse* msg) {
  return *msg->header_;
}
void RangeResponse::clear_kvs() {
  kvs_.Clear();
}
RangeResponse::RangeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.RangeResponse)
}
RangeResponse::RangeResponse(const RangeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      kvs_(from.kvs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&more_) -
    reinterpret_cast<char*>(&count_)) + sizeof(more_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.RangeResponse)
}

void RangeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RangeResponse_rpc_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&more_) -
      reinterpret_cast<char*>(&header_)) + sizeof(more_));
}

RangeResponse::~RangeResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.RangeResponse)
  SharedDtor();
}

void RangeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void RangeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RangeResponse& RangeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RangeResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void RangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.RangeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kvs_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&more_) -
      reinterpret_cast<char*>(&count_)) + sizeof(more_));
  _internal_metadata_.Clear();
}

const char* RangeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mvccpb.KeyValue kvs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kvs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool more = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          more_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RangeResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.RangeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  // repeated .mvccpb.KeyValue kvs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_kvs_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_kvs(i), target, stream);
  }

  // bool more = 3;
  if (this->more() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_more(), target);
  }

  // int64 count = 4;
  if (this->count() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.RangeResponse)
  return target;
}

size_t RangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.RangeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mvccpb.KeyValue kvs = 2;
  total_size += 1UL * this->_internal_kvs_size();
  for (const auto& msg : this->kvs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int64 count = 4;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  // bool more = 3;
  if (this->more() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.RangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RangeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.RangeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.RangeResponse)
    MergeFrom(*source);
  }
}

void RangeResponse::MergeFrom(const RangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.RangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kvs_.MergeFrom(from.kvs_);
  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.more() != 0) {
    _internal_set_more(from._internal_more());
  }
}

void RangeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.RangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeResponse::CopyFrom(const RangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.RangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeResponse::IsInitialized() const {
  return true;
}

void RangeResponse::InternalSwap(RangeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  kvs_.InternalSwap(&other->kvs_);
  swap(header_, other->header_);
  swap(count_, other->count_);
  swap(more_, other->more_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PutRequest::InitAsDefaultInstance() {
}
class PutRequest::_Internal {
 public:
};

PutRequest::PutRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.PutRequest)
}
PutRequest::PutRequest(const PutRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ::memcpy(&lease_, &from.lease_,
    static_cast<size_t>(reinterpret_cast<char*>(&ignore_lease_) -
    reinterpret_cast<char*>(&lease_)) + sizeof(ignore_lease_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.PutRequest)
}

void PutRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PutRequest_rpc_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lease_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignore_lease_) -
      reinterpret_cast<char*>(&lease_)) + sizeof(ignore_lease_));
}

PutRequest::~PutRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.PutRequest)
  SharedDtor();
}

void PutRequest::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PutRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutRequest& PutRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void PutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.PutRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lease_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignore_lease_) -
      reinterpret_cast<char*>(&lease_)) + sizeof(ignore_lease_));
  _internal_metadata_.Clear();
}

const char* PutRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lease = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lease_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool prev_kv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          prev_kv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ignore_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ignore_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ignore_lease = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ignore_lease_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PutRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.PutRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  // int64 lease = 3;
  if (this->lease() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_lease(), target);
  }

  // bool prev_kv = 4;
  if (this->prev_kv() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_prev_kv(), target);
  }

  // bool ignore_value = 5;
  if (this->ignore_value() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_ignore_value(), target);
  }

  // bool ignore_lease = 6;
  if (this->ignore_lease() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_ignore_lease(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.PutRequest)
  return target;
}

size_t PutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.PutRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // int64 lease = 3;
  if (this->lease() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lease());
  }

  // bool prev_kv = 4;
  if (this->prev_kv() != 0) {
    total_size += 1 + 1;
  }

  // bool ignore_value = 5;
  if (this->ignore_value() != 0) {
    total_size += 1 + 1;
  }

  // bool ignore_lease = 6;
  if (this->ignore_lease() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.PutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PutRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PutRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.PutRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.PutRequest)
    MergeFrom(*source);
  }
}

void PutRequest::MergeFrom(const PutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.PutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.lease() != 0) {
    _internal_set_lease(from._internal_lease());
  }
  if (from.prev_kv() != 0) {
    _internal_set_prev_kv(from._internal_prev_kv());
  }
  if (from.ignore_value() != 0) {
    _internal_set_ignore_value(from._internal_ignore_value());
  }
  if (from.ignore_lease() != 0) {
    _internal_set_ignore_lease(from._internal_ignore_lease());
  }
}

void PutRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.PutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutRequest::CopyFrom(const PutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.PutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutRequest::IsInitialized() const {
  return true;
}

void PutRequest::InternalSwap(PutRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lease_, other->lease_);
  swap(prev_kv_, other->prev_kv_);
  swap(ignore_value_, other->ignore_value_);
  swap(ignore_lease_, other->ignore_lease_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PutResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_PutResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  ::etcdserverpb::_PutResponse_default_instance_._instance.get_mutable()->prev_kv_ = const_cast< ::mvccpb::KeyValue*>(
      ::mvccpb::KeyValue::internal_default_instance());
}
class PutResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const PutResponse* msg);
  static const ::mvccpb::KeyValue& prev_kv(const PutResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
PutResponse::_Internal::header(const PutResponse* msg) {
  return *msg->header_;
}
const ::mvccpb::KeyValue&
PutResponse::_Internal::prev_kv(const PutResponse* msg) {
  return *msg->prev_kv_;
}
void PutResponse::clear_prev_kv() {
  if (GetArenaNoVirtual() == nullptr && prev_kv_ != nullptr) {
    delete prev_kv_;
  }
  prev_kv_ = nullptr;
}
PutResponse::PutResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.PutResponse)
}
PutResponse::PutResponse(const PutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_prev_kv()) {
    prev_kv_ = new ::mvccpb::KeyValue(*from.prev_kv_);
  } else {
    prev_kv_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.PutResponse)
}

void PutResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PutResponse_rpc_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prev_kv_) -
      reinterpret_cast<char*>(&header_)) + sizeof(prev_kv_));
}

PutResponse::~PutResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.PutResponse)
  SharedDtor();
}

void PutResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete prev_kv_;
}

void PutResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutResponse& PutResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void PutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.PutResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && prev_kv_ != nullptr) {
    delete prev_kv_;
  }
  prev_kv_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PutResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mvccpb.KeyValue prev_kv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prev_kv(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PutResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.PutResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  // .mvccpb.KeyValue prev_kv = 2;
  if (this->has_prev_kv()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::prev_kv(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.PutResponse)
  return target;
}

size_t PutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.PutResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .mvccpb.KeyValue prev_kv = 2;
  if (this->has_prev_kv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prev_kv_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.PutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PutResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PutResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.PutResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.PutResponse)
    MergeFrom(*source);
  }
}

void PutResponse::MergeFrom(const PutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.PutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_prev_kv()) {
    _internal_mutable_prev_kv()->::mvccpb::KeyValue::MergeFrom(from._internal_prev_kv());
  }
}

void PutResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.PutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutResponse::CopyFrom(const PutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.PutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutResponse::IsInitialized() const {
  return true;
}

void PutResponse::InternalSwap(PutResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(prev_kv_, other->prev_kv_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteRangeRequest::InitAsDefaultInstance() {
}
class DeleteRangeRequest::_Internal {
 public:
};

DeleteRangeRequest::DeleteRangeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.DeleteRangeRequest)
}
DeleteRangeRequest::DeleteRangeRequest(const DeleteRangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  range_end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_range_end().empty()) {
    range_end_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.range_end_);
  }
  prev_kv_ = from.prev_kv_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.DeleteRangeRequest)
}

void DeleteRangeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteRangeRequest_rpc_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  range_end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_kv_ = false;
}

DeleteRangeRequest::~DeleteRangeRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.DeleteRangeRequest)
  SharedDtor();
}

void DeleteRangeRequest::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  range_end_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteRangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteRangeRequest& DeleteRangeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteRangeRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void DeleteRangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.DeleteRangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  range_end_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_kv_ = false;
  _internal_metadata_.Clear();
}

const char* DeleteRangeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes range_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_range_end(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool prev_kv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          prev_kv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteRangeRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.DeleteRangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes range_end = 2;
  if (this->range_end().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_range_end(), target);
  }

  // bool prev_kv = 3;
  if (this->prev_kv() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_prev_kv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.DeleteRangeRequest)
  return target;
}

size_t DeleteRangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.DeleteRangeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes range_end = 2;
  if (this->range_end().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_range_end());
  }

  // bool prev_kv = 3;
  if (this->prev_kv() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteRangeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.DeleteRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRangeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteRangeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.DeleteRangeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.DeleteRangeRequest)
    MergeFrom(*source);
  }
}

void DeleteRangeRequest::MergeFrom(const DeleteRangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.DeleteRangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.range_end().size() > 0) {

    range_end_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.range_end_);
  }
  if (from.prev_kv() != 0) {
    _internal_set_prev_kv(from._internal_prev_kv());
  }
}

void DeleteRangeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.DeleteRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRangeRequest::CopyFrom(const DeleteRangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.DeleteRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRangeRequest::IsInitialized() const {
  return true;
}

void DeleteRangeRequest::InternalSwap(DeleteRangeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  range_end_.Swap(&other->range_end_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(prev_kv_, other->prev_kv_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRangeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteRangeResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_DeleteRangeResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class DeleteRangeResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const DeleteRangeResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
DeleteRangeResponse::_Internal::header(const DeleteRangeResponse* msg) {
  return *msg->header_;
}
void DeleteRangeResponse::clear_prev_kvs() {
  prev_kvs_.Clear();
}
DeleteRangeResponse::DeleteRangeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.DeleteRangeResponse)
}
DeleteRangeResponse::DeleteRangeResponse(const DeleteRangeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      prev_kvs_(from.prev_kvs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  deleted_ = from.deleted_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.DeleteRangeResponse)
}

void DeleteRangeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteRangeResponse_rpc_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deleted_) -
      reinterpret_cast<char*>(&header_)) + sizeof(deleted_));
}

DeleteRangeResponse::~DeleteRangeResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.DeleteRangeResponse)
  SharedDtor();
}

void DeleteRangeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void DeleteRangeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteRangeResponse& DeleteRangeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteRangeResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void DeleteRangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.DeleteRangeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prev_kvs_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  deleted_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* DeleteRangeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 deleted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mvccpb.KeyValue prev_kvs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prev_kvs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteRangeResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.DeleteRangeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  // int64 deleted = 2;
  if (this->deleted() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_deleted(), target);
  }

  // repeated .mvccpb.KeyValue prev_kvs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prev_kvs_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_prev_kvs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.DeleteRangeResponse)
  return target;
}

size_t DeleteRangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.DeleteRangeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mvccpb.KeyValue prev_kvs = 3;
  total_size += 1UL * this->_internal_prev_kvs_size();
  for (const auto& msg : this->prev_kvs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int64 deleted = 2;
  if (this->deleted() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_deleted());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteRangeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.DeleteRangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRangeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteRangeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.DeleteRangeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.DeleteRangeResponse)
    MergeFrom(*source);
  }
}

void DeleteRangeResponse::MergeFrom(const DeleteRangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.DeleteRangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prev_kvs_.MergeFrom(from.prev_kvs_);
  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.deleted() != 0) {
    _internal_set_deleted(from._internal_deleted());
  }
}

void DeleteRangeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.DeleteRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRangeResponse::CopyFrom(const DeleteRangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.DeleteRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRangeResponse::IsInitialized() const {
  return true;
}

void DeleteRangeResponse::InternalSwap(DeleteRangeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  prev_kvs_.InternalSwap(&other->prev_kvs_);
  swap(header_, other->header_);
  swap(deleted_, other->deleted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRangeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestOp::InitAsDefaultInstance() {
  ::etcdserverpb::_RequestOp_default_instance_.request_range_ = const_cast< ::etcdserverpb::RangeRequest*>(
      ::etcdserverpb::RangeRequest::internal_default_instance());
  ::etcdserverpb::_RequestOp_default_instance_.request_put_ = const_cast< ::etcdserverpb::PutRequest*>(
      ::etcdserverpb::PutRequest::internal_default_instance());
  ::etcdserverpb::_RequestOp_default_instance_.request_delete_range_ = const_cast< ::etcdserverpb::DeleteRangeRequest*>(
      ::etcdserverpb::DeleteRangeRequest::internal_default_instance());
  ::etcdserverpb::_RequestOp_default_instance_.request_txn_ = const_cast< ::etcdserverpb::TxnRequest*>(
      ::etcdserverpb::TxnRequest::internal_default_instance());
}
class RequestOp::_Internal {
 public:
  static const ::etcdserverpb::RangeRequest& request_range(const RequestOp* msg);
  static const ::etcdserverpb::PutRequest& request_put(const RequestOp* msg);
  static const ::etcdserverpb::DeleteRangeRequest& request_delete_range(const RequestOp* msg);
  static const ::etcdserverpb::TxnRequest& request_txn(const RequestOp* msg);
};

const ::etcdserverpb::RangeRequest&
RequestOp::_Internal::request_range(const RequestOp* msg) {
  return *msg->request_.request_range_;
}
const ::etcdserverpb::PutRequest&
RequestOp::_Internal::request_put(const RequestOp* msg) {
  return *msg->request_.request_put_;
}
const ::etcdserverpb::DeleteRangeRequest&
RequestOp::_Internal::request_delete_range(const RequestOp* msg) {
  return *msg->request_.request_delete_range_;
}
const ::etcdserverpb::TxnRequest&
RequestOp::_Internal::request_txn(const RequestOp* msg) {
  return *msg->request_.request_txn_;
}
void RequestOp::set_allocated_request_range(::etcdserverpb::RangeRequest* request_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (request_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      request_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_range, submessage_arena);
    }
    set_has_request_range();
    request_.request_range_ = request_range;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.RequestOp.request_range)
}
void RequestOp::set_allocated_request_put(::etcdserverpb::PutRequest* request_put) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (request_put) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      request_put = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_put, submessage_arena);
    }
    set_has_request_put();
    request_.request_put_ = request_put;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.RequestOp.request_put)
}
void RequestOp::set_allocated_request_delete_range(::etcdserverpb::DeleteRangeRequest* request_delete_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (request_delete_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      request_delete_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_delete_range, submessage_arena);
    }
    set_has_request_delete_range();
    request_.request_delete_range_ = request_delete_range;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.RequestOp.request_delete_range)
}
void RequestOp::set_allocated_request_txn(::etcdserverpb::TxnRequest* request_txn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (request_txn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      request_txn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_txn, submessage_arena);
    }
    set_has_request_txn();
    request_.request_txn_ = request_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.RequestOp.request_txn)
}
RequestOp::RequestOp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.RequestOp)
}
RequestOp::RequestOp(const RequestOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kRequestRange: {
      _internal_mutable_request_range()->::etcdserverpb::RangeRequest::MergeFrom(from._internal_request_range());
      break;
    }
    case kRequestPut: {
      _internal_mutable_request_put()->::etcdserverpb::PutRequest::MergeFrom(from._internal_request_put());
      break;
    }
    case kRequestDeleteRange: {
      _internal_mutable_request_delete_range()->::etcdserverpb::DeleteRangeRequest::MergeFrom(from._internal_request_delete_range());
      break;
    }
    case kRequestTxn: {
      _internal_mutable_request_txn()->::etcdserverpb::TxnRequest::MergeFrom(from._internal_request_txn());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.RequestOp)
}

void RequestOp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestOp_rpc_2eproto.base);
  clear_has_request();
}

RequestOp::~RequestOp() {
  // @@protoc_insertion_point(destructor:etcdserverpb.RequestOp)
  SharedDtor();
}

void RequestOp::SharedDtor() {
  if (has_request()) {
    clear_request();
  }
}

void RequestOp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestOp& RequestOp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestOp_rpc_2eproto.base);
  return *internal_default_instance();
}


void RequestOp::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:etcdserverpb.RequestOp)
  switch (request_case()) {
    case kRequestRange: {
      delete request_.request_range_;
      break;
    }
    case kRequestPut: {
      delete request_.request_put_;
      break;
    }
    case kRequestDeleteRange: {
      delete request_.request_delete_range_;
      break;
    }
    case kRequestTxn: {
      delete request_.request_txn_;
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void RequestOp::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.RequestOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear();
}

const char* RequestOp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.RangeRequest request_range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .etcdserverpb.PutRequest request_put = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_put(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .etcdserverpb.DeleteRangeRequest request_delete_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_delete_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .etcdserverpb.TxnRequest request_txn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_txn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestOp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.RequestOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.RangeRequest request_range = 1;
  if (_internal_has_request_range()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::request_range(this), target, stream);
  }

  // .etcdserverpb.PutRequest request_put = 2;
  if (_internal_has_request_put()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::request_put(this), target, stream);
  }

  // .etcdserverpb.DeleteRangeRequest request_delete_range = 3;
  if (_internal_has_request_delete_range()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::request_delete_range(this), target, stream);
  }

  // .etcdserverpb.TxnRequest request_txn = 4;
  if (_internal_has_request_txn()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::request_txn(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.RequestOp)
  return target;
}

size_t RequestOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.RequestOp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_case()) {
    // .etcdserverpb.RangeRequest request_range = 1;
    case kRequestRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.request_range_);
      break;
    }
    // .etcdserverpb.PutRequest request_put = 2;
    case kRequestPut: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.request_put_);
      break;
    }
    // .etcdserverpb.DeleteRangeRequest request_delete_range = 3;
    case kRequestDeleteRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.request_delete_range_);
      break;
    }
    // .etcdserverpb.TxnRequest request_txn = 4;
    case kRequestTxn: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.request_txn_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestOp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.RequestOp)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestOp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestOp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.RequestOp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.RequestOp)
    MergeFrom(*source);
  }
}

void RequestOp::MergeFrom(const RequestOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.RequestOp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kRequestRange: {
      _internal_mutable_request_range()->::etcdserverpb::RangeRequest::MergeFrom(from._internal_request_range());
      break;
    }
    case kRequestPut: {
      _internal_mutable_request_put()->::etcdserverpb::PutRequest::MergeFrom(from._internal_request_put());
      break;
    }
    case kRequestDeleteRange: {
      _internal_mutable_request_delete_range()->::etcdserverpb::DeleteRangeRequest::MergeFrom(from._internal_request_delete_range());
      break;
    }
    case kRequestTxn: {
      _internal_mutable_request_txn()->::etcdserverpb::TxnRequest::MergeFrom(from._internal_request_txn());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
}

void RequestOp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.RequestOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestOp::CopyFrom(const RequestOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.RequestOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestOp::IsInitialized() const {
  return true;
}

void RequestOp::InternalSwap(RequestOp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestOp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResponseOp::InitAsDefaultInstance() {
  ::etcdserverpb::_ResponseOp_default_instance_.response_range_ = const_cast< ::etcdserverpb::RangeResponse*>(
      ::etcdserverpb::RangeResponse::internal_default_instance());
  ::etcdserverpb::_ResponseOp_default_instance_.response_put_ = const_cast< ::etcdserverpb::PutResponse*>(
      ::etcdserverpb::PutResponse::internal_default_instance());
  ::etcdserverpb::_ResponseOp_default_instance_.response_delete_range_ = const_cast< ::etcdserverpb::DeleteRangeResponse*>(
      ::etcdserverpb::DeleteRangeResponse::internal_default_instance());
  ::etcdserverpb::_ResponseOp_default_instance_.response_txn_ = const_cast< ::etcdserverpb::TxnResponse*>(
      ::etcdserverpb::TxnResponse::internal_default_instance());
}
class ResponseOp::_Internal {
 public:
  static const ::etcdserverpb::RangeResponse& response_range(const ResponseOp* msg);
  static const ::etcdserverpb::PutResponse& response_put(const ResponseOp* msg);
  static const ::etcdserverpb::DeleteRangeResponse& response_delete_range(const ResponseOp* msg);
  static const ::etcdserverpb::TxnResponse& response_txn(const ResponseOp* msg);
};

const ::etcdserverpb::RangeResponse&
ResponseOp::_Internal::response_range(const ResponseOp* msg) {
  return *msg->response_.response_range_;
}
const ::etcdserverpb::PutResponse&
ResponseOp::_Internal::response_put(const ResponseOp* msg) {
  return *msg->response_.response_put_;
}
const ::etcdserverpb::DeleteRangeResponse&
ResponseOp::_Internal::response_delete_range(const ResponseOp* msg) {
  return *msg->response_.response_delete_range_;
}
const ::etcdserverpb::TxnResponse&
ResponseOp::_Internal::response_txn(const ResponseOp* msg) {
  return *msg->response_.response_txn_;
}
void ResponseOp::set_allocated_response_range(::etcdserverpb::RangeResponse* response_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (response_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response_range, submessage_arena);
    }
    set_has_response_range();
    response_.response_range_ = response_range;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.ResponseOp.response_range)
}
void ResponseOp::set_allocated_response_put(::etcdserverpb::PutResponse* response_put) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (response_put) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response_put = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response_put, submessage_arena);
    }
    set_has_response_put();
    response_.response_put_ = response_put;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.ResponseOp.response_put)
}
void ResponseOp::set_allocated_response_delete_range(::etcdserverpb::DeleteRangeResponse* response_delete_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (response_delete_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response_delete_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response_delete_range, submessage_arena);
    }
    set_has_response_delete_range();
    response_.response_delete_range_ = response_delete_range;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.ResponseOp.response_delete_range)
}
void ResponseOp::set_allocated_response_txn(::etcdserverpb::TxnResponse* response_txn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (response_txn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response_txn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response_txn, submessage_arena);
    }
    set_has_response_txn();
    response_.response_txn_ = response_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.ResponseOp.response_txn)
}
ResponseOp::ResponseOp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.ResponseOp)
}
ResponseOp::ResponseOp(const ResponseOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kResponseRange: {
      _internal_mutable_response_range()->::etcdserverpb::RangeResponse::MergeFrom(from._internal_response_range());
      break;
    }
    case kResponsePut: {
      _internal_mutable_response_put()->::etcdserverpb::PutResponse::MergeFrom(from._internal_response_put());
      break;
    }
    case kResponseDeleteRange: {
      _internal_mutable_response_delete_range()->::etcdserverpb::DeleteRangeResponse::MergeFrom(from._internal_response_delete_range());
      break;
    }
    case kResponseTxn: {
      _internal_mutable_response_txn()->::etcdserverpb::TxnResponse::MergeFrom(from._internal_response_txn());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.ResponseOp)
}

void ResponseOp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResponseOp_rpc_2eproto.base);
  clear_has_response();
}

ResponseOp::~ResponseOp() {
  // @@protoc_insertion_point(destructor:etcdserverpb.ResponseOp)
  SharedDtor();
}

void ResponseOp::SharedDtor() {
  if (has_response()) {
    clear_response();
  }
}

void ResponseOp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseOp& ResponseOp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseOp_rpc_2eproto.base);
  return *internal_default_instance();
}


void ResponseOp::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:etcdserverpb.ResponseOp)
  switch (response_case()) {
    case kResponseRange: {
      delete response_.response_range_;
      break;
    }
    case kResponsePut: {
      delete response_.response_put_;
      break;
    }
    case kResponseDeleteRange: {
      delete response_.response_delete_range_;
      break;
    }
    case kResponseTxn: {
      delete response_.response_txn_;
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void ResponseOp::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.ResponseOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear();
}

const char* ResponseOp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.RangeResponse response_range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .etcdserverpb.PutResponse response_put = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_response_put(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .etcdserverpb.DeleteRangeResponse response_delete_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_response_delete_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .etcdserverpb.TxnResponse response_txn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_response_txn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseOp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.ResponseOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.RangeResponse response_range = 1;
  if (_internal_has_response_range()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::response_range(this), target, stream);
  }

  // .etcdserverpb.PutResponse response_put = 2;
  if (_internal_has_response_put()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::response_put(this), target, stream);
  }

  // .etcdserverpb.DeleteRangeResponse response_delete_range = 3;
  if (_internal_has_response_delete_range()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::response_delete_range(this), target, stream);
  }

  // .etcdserverpb.TxnResponse response_txn = 4;
  if (_internal_has_response_txn()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::response_txn(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.ResponseOp)
  return target;
}

size_t ResponseOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.ResponseOp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // .etcdserverpb.RangeResponse response_range = 1;
    case kResponseRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.response_range_);
      break;
    }
    // .etcdserverpb.PutResponse response_put = 2;
    case kResponsePut: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.response_put_);
      break;
    }
    // .etcdserverpb.DeleteRangeResponse response_delete_range = 3;
    case kResponseDeleteRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.response_delete_range_);
      break;
    }
    // .etcdserverpb.TxnResponse response_txn = 4;
    case kResponseTxn: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.response_txn_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseOp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.ResponseOp)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseOp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseOp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.ResponseOp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.ResponseOp)
    MergeFrom(*source);
  }
}

void ResponseOp::MergeFrom(const ResponseOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.ResponseOp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kResponseRange: {
      _internal_mutable_response_range()->::etcdserverpb::RangeResponse::MergeFrom(from._internal_response_range());
      break;
    }
    case kResponsePut: {
      _internal_mutable_response_put()->::etcdserverpb::PutResponse::MergeFrom(from._internal_response_put());
      break;
    }
    case kResponseDeleteRange: {
      _internal_mutable_response_delete_range()->::etcdserverpb::DeleteRangeResponse::MergeFrom(from._internal_response_delete_range());
      break;
    }
    case kResponseTxn: {
      _internal_mutable_response_txn()->::etcdserverpb::TxnResponse::MergeFrom(from._internal_response_txn());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
}

void ResponseOp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.ResponseOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseOp::CopyFrom(const ResponseOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.ResponseOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseOp::IsInitialized() const {
  return true;
}

void ResponseOp::InternalSwap(ResponseOp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseOp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Compare::InitAsDefaultInstance() {
  ::etcdserverpb::_Compare_default_instance_.version_ = PROTOBUF_LONGLONG(0);
  ::etcdserverpb::_Compare_default_instance_.create_revision_ = PROTOBUF_LONGLONG(0);
  ::etcdserverpb::_Compare_default_instance_.mod_revision_ = PROTOBUF_LONGLONG(0);
  ::etcdserverpb::_Compare_default_instance_.value_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::etcdserverpb::_Compare_default_instance_.lease_ = PROTOBUF_LONGLONG(0);
}
class Compare::_Internal {
 public:
};

Compare::Compare()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.Compare)
}
Compare::Compare(const Compare& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  range_end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_range_end().empty()) {
    range_end_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.range_end_);
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_) -
    reinterpret_cast<char*>(&result_)) + sizeof(target_));
  clear_has_target_union();
  switch (from.target_union_case()) {
    case kVersion: {
      _internal_set_version(from._internal_version());
      break;
    }
    case kCreateRevision: {
      _internal_set_create_revision(from._internal_create_revision());
      break;
    }
    case kModRevision: {
      _internal_set_mod_revision(from._internal_mod_revision());
      break;
    }
    case kValue: {
      _internal_set_value(from._internal_value());
      break;
    }
    case kLease: {
      _internal_set_lease(from._internal_lease());
      break;
    }
    case TARGET_UNION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.Compare)
}

void Compare::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Compare_rpc_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  range_end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_) -
      reinterpret_cast<char*>(&result_)) + sizeof(target_));
  clear_has_target_union();
}

Compare::~Compare() {
  // @@protoc_insertion_point(destructor:etcdserverpb.Compare)
  SharedDtor();
}

void Compare::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  range_end_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_target_union()) {
    clear_target_union();
  }
}

void Compare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Compare& Compare::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Compare_rpc_2eproto.base);
  return *internal_default_instance();
}


void Compare::clear_target_union() {
// @@protoc_insertion_point(one_of_clear_start:etcdserverpb.Compare)
  switch (target_union_case()) {
    case kVersion: {
      // No need to clear
      break;
    }
    case kCreateRevision: {
      // No need to clear
      break;
    }
    case kModRevision: {
      // No need to clear
      break;
    }
    case kValue: {
      target_union_.value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kLease: {
      // No need to clear
      break;
    }
    case TARGET_UNION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_UNION_NOT_SET;
}


void Compare::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.Compare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  range_end_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_) -
      reinterpret_cast<char*>(&result_)) + sizeof(target_));
  clear_target_union();
  _internal_metadata_.Clear();
}

const char* Compare::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.Compare.CompareResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::etcdserverpb::Compare_CompareResult>(val));
        } else goto handle_unusual;
        continue;
      // .etcdserverpb.Compare.CompareTarget target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_target(static_cast<::etcdserverpb::Compare_CompareTarget>(val));
        } else goto handle_unusual;
        continue;
      // bytes key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_version(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 create_revision = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_create_revision(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 mod_revision = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _internal_set_mod_revision(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lease = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _internal_set_lease(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes range_end = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_range_end(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Compare::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.Compare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.Compare.CompareResult result = 1;
  if (this->result() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // .etcdserverpb.Compare.CompareTarget target = 2;
  if (this->target() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_target(), target);
  }

  // bytes key = 3;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_key(), target);
  }

  // int64 version = 4;
  if (_internal_has_version()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_version(), target);
  }

  // int64 create_revision = 5;
  if (_internal_has_create_revision()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_create_revision(), target);
  }

  // int64 mod_revision = 6;
  if (_internal_has_mod_revision()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_mod_revision(), target);
  }

  // bytes value = 7;
  if (_internal_has_value()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_value(), target);
  }

  // int64 lease = 8;
  if (_internal_has_lease()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_lease(), target);
  }

  // bytes range_end = 64;
  if (this->range_end().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        64, this->_internal_range_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.Compare)
  return target;
}

size_t Compare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.Compare)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 3;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes range_end = 64;
  if (this->range_end().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_range_end());
  }

  // .etcdserverpb.Compare.CompareResult result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  // .etcdserverpb.Compare.CompareTarget target = 2;
  if (this->target() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_target());
  }

  switch (target_union_case()) {
    // int64 version = 4;
    case kVersion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_version());
      break;
    }
    // int64 create_revision = 5;
    case kCreateRevision: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_create_revision());
      break;
    }
    // int64 mod_revision = 6;
    case kModRevision: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mod_revision());
      break;
    }
    // bytes value = 7;
    case kValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_value());
      break;
    }
    // int64 lease = 8;
    case kLease: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_lease());
      break;
    }
    case TARGET_UNION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Compare::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.Compare)
  GOOGLE_DCHECK_NE(&from, this);
  const Compare* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Compare>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.Compare)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.Compare)
    MergeFrom(*source);
  }
}

void Compare::MergeFrom(const Compare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.Compare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.range_end().size() > 0) {

    range_end_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.range_end_);
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.target() != 0) {
    _internal_set_target(from._internal_target());
  }
  switch (from.target_union_case()) {
    case kVersion: {
      _internal_set_version(from._internal_version());
      break;
    }
    case kCreateRevision: {
      _internal_set_create_revision(from._internal_create_revision());
      break;
    }
    case kModRevision: {
      _internal_set_mod_revision(from._internal_mod_revision());
      break;
    }
    case kValue: {
      _internal_set_value(from._internal_value());
      break;
    }
    case kLease: {
      _internal_set_lease(from._internal_lease());
      break;
    }
    case TARGET_UNION_NOT_SET: {
      break;
    }
  }
}

void Compare::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.Compare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Compare::CopyFrom(const Compare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.Compare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Compare::IsInitialized() const {
  return true;
}

void Compare::InternalSwap(Compare* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  range_end_.Swap(&other->range_end_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
  swap(target_, other->target_);
  swap(target_union_, other->target_union_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Compare::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TxnRequest::InitAsDefaultInstance() {
}
class TxnRequest::_Internal {
 public:
};

TxnRequest::TxnRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.TxnRequest)
}
TxnRequest::TxnRequest(const TxnRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      compare_(from.compare_),
      success_(from.success_),
      failure_(from.failure_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.TxnRequest)
}

void TxnRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestOp_rpc_2eproto.base);
}

TxnRequest::~TxnRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.TxnRequest)
  SharedDtor();
}

void TxnRequest::SharedDtor() {
}

void TxnRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TxnRequest& TxnRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestOp_rpc_2eproto.base);
  return *internal_default_instance();
}


void TxnRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.TxnRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compare_.Clear();
  success_.Clear();
  failure_.Clear();
  _internal_metadata_.Clear();
}

const char* TxnRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .etcdserverpb.Compare compare = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_compare(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .etcdserverpb.RequestOp success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_success(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .etcdserverpb.RequestOp failure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_failure(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TxnRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.TxnRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .etcdserverpb.Compare compare = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_compare_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_compare(i), target, stream);
  }

  // repeated .etcdserverpb.RequestOp success = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_success_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_success(i), target, stream);
  }

  // repeated .etcdserverpb.RequestOp failure = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_failure_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_failure(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.TxnRequest)
  return target;
}

size_t TxnRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.TxnRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .etcdserverpb.Compare compare = 1;
  total_size += 1UL * this->_internal_compare_size();
  for (const auto& msg : this->compare_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .etcdserverpb.RequestOp success = 2;
  total_size += 1UL * this->_internal_success_size();
  for (const auto& msg : this->success_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .etcdserverpb.RequestOp failure = 3;
  total_size += 1UL * this->_internal_failure_size();
  for (const auto& msg : this->failure_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxnRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.TxnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TxnRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TxnRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.TxnRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.TxnRequest)
    MergeFrom(*source);
  }
}

void TxnRequest::MergeFrom(const TxnRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.TxnRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  compare_.MergeFrom(from.compare_);
  success_.MergeFrom(from.success_);
  failure_.MergeFrom(from.failure_);
}

void TxnRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.TxnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxnRequest::CopyFrom(const TxnRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.TxnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnRequest::IsInitialized() const {
  return true;
}

void TxnRequest::InternalSwap(TxnRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  compare_.InternalSwap(&other->compare_);
  success_.InternalSwap(&other->success_);
  failure_.InternalSwap(&other->failure_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxnRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TxnResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_TxnResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class TxnResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const TxnResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
TxnResponse::_Internal::header(const TxnResponse* msg) {
  return *msg->header_;
}
TxnResponse::TxnResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.TxnResponse)
}
TxnResponse::TxnResponse(const TxnResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  succeeded_ = from.succeeded_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.TxnResponse)
}

void TxnResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResponseOp_rpc_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&succeeded_) -
      reinterpret_cast<char*>(&header_)) + sizeof(succeeded_));
}

TxnResponse::~TxnResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.TxnResponse)
  SharedDtor();
}

void TxnResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void TxnResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TxnResponse& TxnResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseOp_rpc_2eproto.base);
  return *internal_default_instance();
}


void TxnResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.TxnResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  succeeded_ = false;
  _internal_metadata_.Clear();
}

const char* TxnResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool succeeded = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          succeeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .etcdserverpb.ResponseOp responses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TxnResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.TxnResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  // bool succeeded = 2;
  if (this->succeeded() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_succeeded(), target);
  }

  // repeated .etcdserverpb.ResponseOp responses = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.TxnResponse)
  return target;
}

size_t TxnResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.TxnResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .etcdserverpb.ResponseOp responses = 3;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // bool succeeded = 2;
  if (this->succeeded() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxnResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.TxnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TxnResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TxnResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.TxnResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.TxnResponse)
    MergeFrom(*source);
  }
}

void TxnResponse::MergeFrom(const TxnResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.TxnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.succeeded() != 0) {
    _internal_set_succeeded(from._internal_succeeded());
  }
}

void TxnResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.TxnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxnResponse::CopyFrom(const TxnResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.TxnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnResponse::IsInitialized() const {
  return true;
}

void TxnResponse::InternalSwap(TxnResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  swap(header_, other->header_);
  swap(succeeded_, other->succeeded_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxnResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompactionRequest::InitAsDefaultInstance() {
}
class CompactionRequest::_Internal {
 public:
};

CompactionRequest::CompactionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.CompactionRequest)
}
CompactionRequest::CompactionRequest(const CompactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&revision_, &from.revision_,
    static_cast<size_t>(reinterpret_cast<char*>(&physical_) -
    reinterpret_cast<char*>(&revision_)) + sizeof(physical_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.CompactionRequest)
}

void CompactionRequest::SharedCtor() {
  ::memset(&revision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&physical_) -
      reinterpret_cast<char*>(&revision_)) + sizeof(physical_));
}

CompactionRequest::~CompactionRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.CompactionRequest)
  SharedDtor();
}

void CompactionRequest::SharedDtor() {
}

void CompactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompactionRequest& CompactionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompactionRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void CompactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.CompactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&revision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&physical_) -
      reinterpret_cast<char*>(&revision_)) + sizeof(physical_));
  _internal_metadata_.Clear();
}

const char* CompactionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 revision = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool physical = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          physical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompactionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.CompactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 revision = 1;
  if (this->revision() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_revision(), target);
  }

  // bool physical = 2;
  if (this->physical() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_physical(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.CompactionRequest)
  return target;
}

size_t CompactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.CompactionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 revision = 1;
  if (this->revision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_revision());
  }

  // bool physical = 2;
  if (this->physical() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompactionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.CompactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CompactionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompactionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.CompactionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.CompactionRequest)
    MergeFrom(*source);
  }
}

void CompactionRequest::MergeFrom(const CompactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.CompactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.revision() != 0) {
    _internal_set_revision(from._internal_revision());
  }
  if (from.physical() != 0) {
    _internal_set_physical(from._internal_physical());
  }
}

void CompactionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.CompactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompactionRequest::CopyFrom(const CompactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.CompactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactionRequest::IsInitialized() const {
  return true;
}

void CompactionRequest::InternalSwap(CompactionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(revision_, other->revision_);
  swap(physical_, other->physical_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompactionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompactionResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_CompactionResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class CompactionResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const CompactionResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
CompactionResponse::_Internal::header(const CompactionResponse* msg) {
  return *msg->header_;
}
CompactionResponse::CompactionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.CompactionResponse)
}
CompactionResponse::CompactionResponse(const CompactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.CompactionResponse)
}

void CompactionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompactionResponse_rpc_2eproto.base);
  header_ = nullptr;
}

CompactionResponse::~CompactionResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.CompactionResponse)
  SharedDtor();
}

void CompactionResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void CompactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompactionResponse& CompactionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompactionResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void CompactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.CompactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CompactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompactionResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.CompactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.CompactionResponse)
  return target;
}

size_t CompactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.CompactionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompactionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.CompactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CompactionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompactionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.CompactionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.CompactionResponse)
    MergeFrom(*source);
  }
}

void CompactionResponse::MergeFrom(const CompactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.CompactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void CompactionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.CompactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompactionResponse::CopyFrom(const CompactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.CompactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompactionResponse::IsInitialized() const {
  return true;
}

void CompactionResponse::InternalSwap(CompactionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompactionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HashRequest::InitAsDefaultInstance() {
}
class HashRequest::_Internal {
 public:
};

HashRequest::HashRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.HashRequest)
}
HashRequest::HashRequest(const HashRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.HashRequest)
}

void HashRequest::SharedCtor() {
}

HashRequest::~HashRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.HashRequest)
  SharedDtor();
}

void HashRequest::SharedDtor() {
}

void HashRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HashRequest& HashRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HashRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void HashRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.HashRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* HashRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HashRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.HashRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.HashRequest)
  return target;
}

size_t HashRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.HashRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HashRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.HashRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HashRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HashRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.HashRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.HashRequest)
    MergeFrom(*source);
  }
}

void HashRequest::MergeFrom(const HashRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.HashRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HashRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.HashRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashRequest::CopyFrom(const HashRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.HashRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashRequest::IsInitialized() const {
  return true;
}

void HashRequest::InternalSwap(HashRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HashRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HashKVRequest::InitAsDefaultInstance() {
}
class HashKVRequest::_Internal {
 public:
};

HashKVRequest::HashKVRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.HashKVRequest)
}
HashKVRequest::HashKVRequest(const HashKVRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  revision_ = from.revision_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.HashKVRequest)
}

void HashKVRequest::SharedCtor() {
  revision_ = PROTOBUF_LONGLONG(0);
}

HashKVRequest::~HashKVRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.HashKVRequest)
  SharedDtor();
}

void HashKVRequest::SharedDtor() {
}

void HashKVRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HashKVRequest& HashKVRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HashKVRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void HashKVRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.HashKVRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  revision_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* HashKVRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 revision = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HashKVRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.HashKVRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 revision = 1;
  if (this->revision() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_revision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.HashKVRequest)
  return target;
}

size_t HashKVRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.HashKVRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 revision = 1;
  if (this->revision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_revision());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HashKVRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.HashKVRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HashKVRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HashKVRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.HashKVRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.HashKVRequest)
    MergeFrom(*source);
  }
}

void HashKVRequest::MergeFrom(const HashKVRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.HashKVRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.revision() != 0) {
    _internal_set_revision(from._internal_revision());
  }
}

void HashKVRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.HashKVRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashKVRequest::CopyFrom(const HashKVRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.HashKVRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashKVRequest::IsInitialized() const {
  return true;
}

void HashKVRequest::InternalSwap(HashKVRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(revision_, other->revision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HashKVRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HashKVResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_HashKVResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class HashKVResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const HashKVResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
HashKVResponse::_Internal::header(const HashKVResponse* msg) {
  return *msg->header_;
}
HashKVResponse::HashKVResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.HashKVResponse)
}
HashKVResponse::HashKVResponse(const HashKVResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&compact_revision_, &from.compact_revision_,
    static_cast<size_t>(reinterpret_cast<char*>(&hash_) -
    reinterpret_cast<char*>(&compact_revision_)) + sizeof(hash_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.HashKVResponse)
}

void HashKVResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HashKVResponse_rpc_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hash_) -
      reinterpret_cast<char*>(&header_)) + sizeof(hash_));
}

HashKVResponse::~HashKVResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.HashKVResponse)
  SharedDtor();
}

void HashKVResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void HashKVResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HashKVResponse& HashKVResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HashKVResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void HashKVResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.HashKVResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&compact_revision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hash_) -
      reinterpret_cast<char*>(&compact_revision_)) + sizeof(hash_));
  _internal_metadata_.Clear();
}

const char* HashKVResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 compact_revision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          compact_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HashKVResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.HashKVResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  // uint32 hash = 2;
  if (this->hash() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hash(), target);
  }

  // int64 compact_revision = 3;
  if (this->compact_revision() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_compact_revision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.HashKVResponse)
  return target;
}

size_t HashKVResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.HashKVResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int64 compact_revision = 3;
  if (this->compact_revision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_compact_revision());
  }

  // uint32 hash = 2;
  if (this->hash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HashKVResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.HashKVResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HashKVResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HashKVResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.HashKVResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.HashKVResponse)
    MergeFrom(*source);
  }
}

void HashKVResponse::MergeFrom(const HashKVResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.HashKVResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.compact_revision() != 0) {
    _internal_set_compact_revision(from._internal_compact_revision());
  }
  if (from.hash() != 0) {
    _internal_set_hash(from._internal_hash());
  }
}

void HashKVResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.HashKVResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashKVResponse::CopyFrom(const HashKVResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.HashKVResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashKVResponse::IsInitialized() const {
  return true;
}

void HashKVResponse::InternalSwap(HashKVResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(compact_revision_, other->compact_revision_);
  swap(hash_, other->hash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HashKVResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HashResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_HashResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class HashResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const HashResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
HashResponse::_Internal::header(const HashResponse* msg) {
  return *msg->header_;
}
HashResponse::HashResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.HashResponse)
}
HashResponse::HashResponse(const HashResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  hash_ = from.hash_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.HashResponse)
}

void HashResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HashResponse_rpc_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hash_) -
      reinterpret_cast<char*>(&header_)) + sizeof(hash_));
}

HashResponse::~HashResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.HashResponse)
  SharedDtor();
}

void HashResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void HashResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HashResponse& HashResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HashResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void HashResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.HashResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  hash_ = 0u;
  _internal_metadata_.Clear();
}

const char* HashResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HashResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.HashResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  // uint32 hash = 2;
  if (this->hash() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.HashResponse)
  return target;
}

size_t HashResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.HashResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint32 hash = 2;
  if (this->hash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HashResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.HashResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HashResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HashResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.HashResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.HashResponse)
    MergeFrom(*source);
  }
}

void HashResponse::MergeFrom(const HashResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.HashResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.hash() != 0) {
    _internal_set_hash(from._internal_hash());
  }
}

void HashResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.HashResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashResponse::CopyFrom(const HashResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.HashResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashResponse::IsInitialized() const {
  return true;
}

void HashResponse::InternalSwap(HashResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(hash_, other->hash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HashResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SnapshotRequest::InitAsDefaultInstance() {
}
class SnapshotRequest::_Internal {
 public:
};

SnapshotRequest::SnapshotRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.SnapshotRequest)
}
SnapshotRequest::SnapshotRequest(const SnapshotRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.SnapshotRequest)
}

void SnapshotRequest::SharedCtor() {
}

SnapshotRequest::~SnapshotRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.SnapshotRequest)
  SharedDtor();
}

void SnapshotRequest::SharedDtor() {
}

void SnapshotRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnapshotRequest& SnapshotRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SnapshotRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void SnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.SnapshotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SnapshotRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SnapshotRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.SnapshotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.SnapshotRequest)
  return target;
}

size_t SnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.SnapshotRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapshotRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.SnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SnapshotRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.SnapshotRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.SnapshotRequest)
    MergeFrom(*source);
  }
}

void SnapshotRequest::MergeFrom(const SnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.SnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SnapshotRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.SnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotRequest::CopyFrom(const SnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.SnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotRequest::IsInitialized() const {
  return true;
}

void SnapshotRequest::InternalSwap(SnapshotRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SnapshotResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_SnapshotResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class SnapshotResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const SnapshotResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
SnapshotResponse::_Internal::header(const SnapshotResponse* msg) {
  return *msg->header_;
}
SnapshotResponse::SnapshotResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.SnapshotResponse)
}
SnapshotResponse::SnapshotResponse(const SnapshotResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blob().empty()) {
    blob_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.blob_);
  }
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  remaining_bytes_ = from.remaining_bytes_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.SnapshotResponse)
}

void SnapshotResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SnapshotResponse_rpc_2eproto.base);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_bytes_) -
      reinterpret_cast<char*>(&header_)) + sizeof(remaining_bytes_));
}

SnapshotResponse::~SnapshotResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.SnapshotResponse)
  SharedDtor();
}

void SnapshotResponse::SharedDtor() {
  blob_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void SnapshotResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnapshotResponse& SnapshotResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SnapshotResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void SnapshotResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.SnapshotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blob_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  remaining_bytes_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* SnapshotResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 remaining_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          remaining_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes blob = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_blob(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SnapshotResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.SnapshotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  // uint64 remaining_bytes = 2;
  if (this->remaining_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_remaining_bytes(), target);
  }

  // bytes blob = 3;
  if (this->blob().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_blob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.SnapshotResponse)
  return target;
}

size_t SnapshotResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.SnapshotResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes blob = 3;
  if (this->blob().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blob());
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint64 remaining_bytes = 2;
  if (this->remaining_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_remaining_bytes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnapshotResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.SnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SnapshotResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SnapshotResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.SnapshotResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.SnapshotResponse)
    MergeFrom(*source);
  }
}

void SnapshotResponse::MergeFrom(const SnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.SnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blob().size() > 0) {

    blob_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.blob_);
  }
  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.remaining_bytes() != 0) {
    _internal_set_remaining_bytes(from._internal_remaining_bytes());
  }
}

void SnapshotResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.SnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotResponse::CopyFrom(const SnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.SnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotResponse::IsInitialized() const {
  return true;
}

void SnapshotResponse::InternalSwap(SnapshotResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  blob_.Swap(&other->blob_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(remaining_bytes_, other->remaining_bytes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchRequest::InitAsDefaultInstance() {
  ::etcdserverpb::_WatchRequest_default_instance_.create_request_ = const_cast< ::etcdserverpb::WatchCreateRequest*>(
      ::etcdserverpb::WatchCreateRequest::internal_default_instance());
  ::etcdserverpb::_WatchRequest_default_instance_.cancel_request_ = const_cast< ::etcdserverpb::WatchCancelRequest*>(
      ::etcdserverpb::WatchCancelRequest::internal_default_instance());
  ::etcdserverpb::_WatchRequest_default_instance_.progress_request_ = const_cast< ::etcdserverpb::WatchProgressRequest*>(
      ::etcdserverpb::WatchProgressRequest::internal_default_instance());
}
class WatchRequest::_Internal {
 public:
  static const ::etcdserverpb::WatchCreateRequest& create_request(const WatchRequest* msg);
  static const ::etcdserverpb::WatchCancelRequest& cancel_request(const WatchRequest* msg);
  static const ::etcdserverpb::WatchProgressRequest& progress_request(const WatchRequest* msg);
};

const ::etcdserverpb::WatchCreateRequest&
WatchRequest::_Internal::create_request(const WatchRequest* msg) {
  return *msg->request_union_.create_request_;
}
const ::etcdserverpb::WatchCancelRequest&
WatchRequest::_Internal::cancel_request(const WatchRequest* msg) {
  return *msg->request_union_.cancel_request_;
}
const ::etcdserverpb::WatchProgressRequest&
WatchRequest::_Internal::progress_request(const WatchRequest* msg) {
  return *msg->request_union_.progress_request_;
}
void WatchRequest::set_allocated_create_request(::etcdserverpb::WatchCreateRequest* create_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_request_union();
  if (create_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      create_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_request, submessage_arena);
    }
    set_has_create_request();
    request_union_.create_request_ = create_request;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.WatchRequest.create_request)
}
void WatchRequest::set_allocated_cancel_request(::etcdserverpb::WatchCancelRequest* cancel_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_request_union();
  if (cancel_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cancel_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_request, submessage_arena);
    }
    set_has_cancel_request();
    request_union_.cancel_request_ = cancel_request;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.WatchRequest.cancel_request)
}
void WatchRequest::set_allocated_progress_request(::etcdserverpb::WatchProgressRequest* progress_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_request_union();
  if (progress_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      progress_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, progress_request, submessage_arena);
    }
    set_has_progress_request();
    request_union_.progress_request_ = progress_request;
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.WatchRequest.progress_request)
}
WatchRequest::WatchRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.WatchRequest)
}
WatchRequest::WatchRequest(const WatchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_request_union();
  switch (from.request_union_case()) {
    case kCreateRequest: {
      _internal_mutable_create_request()->::etcdserverpb::WatchCreateRequest::MergeFrom(from._internal_create_request());
      break;
    }
    case kCancelRequest: {
      _internal_mutable_cancel_request()->::etcdserverpb::WatchCancelRequest::MergeFrom(from._internal_cancel_request());
      break;
    }
    case kProgressRequest: {
      _internal_mutable_progress_request()->::etcdserverpb::WatchProgressRequest::MergeFrom(from._internal_progress_request());
      break;
    }
    case REQUEST_UNION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.WatchRequest)
}

void WatchRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WatchRequest_rpc_2eproto.base);
  clear_has_request_union();
}

WatchRequest::~WatchRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.WatchRequest)
  SharedDtor();
}

void WatchRequest::SharedDtor() {
  if (has_request_union()) {
    clear_request_union();
  }
}

void WatchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchRequest& WatchRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void WatchRequest::clear_request_union() {
// @@protoc_insertion_point(one_of_clear_start:etcdserverpb.WatchRequest)
  switch (request_union_case()) {
    case kCreateRequest: {
      delete request_union_.create_request_;
      break;
    }
    case kCancelRequest: {
      delete request_union_.cancel_request_;
      break;
    }
    case kProgressRequest: {
      delete request_union_.progress_request_;
      break;
    }
    case REQUEST_UNION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_UNION_NOT_SET;
}


void WatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.WatchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request_union();
  _internal_metadata_.Clear();
}

const char* WatchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.WatchCreateRequest create_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .etcdserverpb.WatchCancelRequest cancel_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancel_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .etcdserverpb.WatchProgressRequest progress_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_progress_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.WatchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.WatchCreateRequest create_request = 1;
  if (_internal_has_create_request()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::create_request(this), target, stream);
  }

  // .etcdserverpb.WatchCancelRequest cancel_request = 2;
  if (_internal_has_cancel_request()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::cancel_request(this), target, stream);
  }

  // .etcdserverpb.WatchProgressRequest progress_request = 3;
  if (_internal_has_progress_request()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::progress_request(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.WatchRequest)
  return target;
}

size_t WatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.WatchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_union_case()) {
    // .etcdserverpb.WatchCreateRequest create_request = 1;
    case kCreateRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_union_.create_request_);
      break;
    }
    // .etcdserverpb.WatchCancelRequest cancel_request = 2;
    case kCancelRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_union_.cancel_request_);
      break;
    }
    // .etcdserverpb.WatchProgressRequest progress_request = 3;
    case kProgressRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_union_.progress_request_);
      break;
    }
    case REQUEST_UNION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.WatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.WatchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.WatchRequest)
    MergeFrom(*source);
  }
}

void WatchRequest::MergeFrom(const WatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.WatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_union_case()) {
    case kCreateRequest: {
      _internal_mutable_create_request()->::etcdserverpb::WatchCreateRequest::MergeFrom(from._internal_create_request());
      break;
    }
    case kCancelRequest: {
      _internal_mutable_cancel_request()->::etcdserverpb::WatchCancelRequest::MergeFrom(from._internal_cancel_request());
      break;
    }
    case kProgressRequest: {
      _internal_mutable_progress_request()->::etcdserverpb::WatchProgressRequest::MergeFrom(from._internal_progress_request());
      break;
    }
    case REQUEST_UNION_NOT_SET: {
      break;
    }
  }
}

void WatchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.WatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchRequest::CopyFrom(const WatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.WatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchRequest::IsInitialized() const {
  return true;
}

void WatchRequest::InternalSwap(WatchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(request_union_, other->request_union_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchCreateRequest::InitAsDefaultInstance() {
}
class WatchCreateRequest::_Internal {
 public:
};

WatchCreateRequest::WatchCreateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.WatchCreateRequest)
}
WatchCreateRequest::WatchCreateRequest(const WatchCreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      filters_(from.filters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  range_end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_range_end().empty()) {
    range_end_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.range_end_);
  }
  ::memcpy(&start_revision_, &from.start_revision_,
    static_cast<size_t>(reinterpret_cast<char*>(&fragment_) -
    reinterpret_cast<char*>(&start_revision_)) + sizeof(fragment_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.WatchCreateRequest)
}

void WatchCreateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WatchCreateRequest_rpc_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  range_end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_revision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fragment_) -
      reinterpret_cast<char*>(&start_revision_)) + sizeof(fragment_));
}

WatchCreateRequest::~WatchCreateRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.WatchCreateRequest)
  SharedDtor();
}

void WatchCreateRequest::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  range_end_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WatchCreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchCreateRequest& WatchCreateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchCreateRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void WatchCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.WatchCreateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filters_.Clear();
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  range_end_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_revision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fragment_) -
      reinterpret_cast<char*>(&start_revision_)) + sizeof(fragment_));
  _internal_metadata_.Clear();
}

const char* WatchCreateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes range_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_range_end(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 start_revision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          start_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool progress_notify = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          progress_notify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .etcdserverpb.WatchCreateRequest.FilterType filters = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_filters(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_add_filters(static_cast<::etcdserverpb::WatchCreateRequest_FilterType>(val));
        } else goto handle_unusual;
        continue;
      // bool prev_kv = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          prev_kv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 watch_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          watch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fragment = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          fragment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchCreateRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.WatchCreateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes range_end = 2;
  if (this->range_end().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_range_end(), target);
  }

  // int64 start_revision = 3;
  if (this->start_revision() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_start_revision(), target);
  }

  // bool progress_notify = 4;
  if (this->progress_notify() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_progress_notify(), target);
  }

  // repeated .etcdserverpb.WatchCreateRequest.FilterType filters = 5;
  {
    int byte_size = _filters_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          5, filters_, byte_size, target);
    }
  }

  // bool prev_kv = 6;
  if (this->prev_kv() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_prev_kv(), target);
  }

  // int64 watch_id = 7;
  if (this->watch_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_watch_id(), target);
  }

  // bool fragment = 8;
  if (this->fragment() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_fragment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.WatchCreateRequest)
  return target;
}

size_t WatchCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.WatchCreateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .etcdserverpb.WatchCreateRequest.FilterType filters = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_filters_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_filters(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _filters_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes range_end = 2;
  if (this->range_end().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_range_end());
  }

  // int64 start_revision = 3;
  if (this->start_revision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_start_revision());
  }

  // int64 watch_id = 7;
  if (this->watch_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_watch_id());
  }

  // bool progress_notify = 4;
  if (this->progress_notify() != 0) {
    total_size += 1 + 1;
  }

  // bool prev_kv = 6;
  if (this->prev_kv() != 0) {
    total_size += 1 + 1;
  }

  // bool fragment = 8;
  if (this->fragment() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchCreateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.WatchCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchCreateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchCreateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.WatchCreateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.WatchCreateRequest)
    MergeFrom(*source);
  }
}

void WatchCreateRequest::MergeFrom(const WatchCreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.WatchCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filters_.MergeFrom(from.filters_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.range_end().size() > 0) {

    range_end_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.range_end_);
  }
  if (from.start_revision() != 0) {
    _internal_set_start_revision(from._internal_start_revision());
  }
  if (from.watch_id() != 0) {
    _internal_set_watch_id(from._internal_watch_id());
  }
  if (from.progress_notify() != 0) {
    _internal_set_progress_notify(from._internal_progress_notify());
  }
  if (from.prev_kv() != 0) {
    _internal_set_prev_kv(from._internal_prev_kv());
  }
  if (from.fragment() != 0) {
    _internal_set_fragment(from._internal_fragment());
  }
}

void WatchCreateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.WatchCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchCreateRequest::CopyFrom(const WatchCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.WatchCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchCreateRequest::IsInitialized() const {
  return true;
}

void WatchCreateRequest::InternalSwap(WatchCreateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filters_.InternalSwap(&other->filters_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  range_end_.Swap(&other->range_end_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_revision_, other->start_revision_);
  swap(watch_id_, other->watch_id_);
  swap(progress_notify_, other->progress_notify_);
  swap(prev_kv_, other->prev_kv_);
  swap(fragment_, other->fragment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchCreateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchCancelRequest::InitAsDefaultInstance() {
}
class WatchCancelRequest::_Internal {
 public:
};

WatchCancelRequest::WatchCancelRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.WatchCancelRequest)
}
WatchCancelRequest::WatchCancelRequest(const WatchCancelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  watch_id_ = from.watch_id_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.WatchCancelRequest)
}

void WatchCancelRequest::SharedCtor() {
  watch_id_ = PROTOBUF_LONGLONG(0);
}

WatchCancelRequest::~WatchCancelRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.WatchCancelRequest)
  SharedDtor();
}

void WatchCancelRequest::SharedDtor() {
}

void WatchCancelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchCancelRequest& WatchCancelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchCancelRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void WatchCancelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.WatchCancelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  watch_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* WatchCancelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 watch_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          watch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchCancelRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.WatchCancelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 watch_id = 1;
  if (this->watch_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_watch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.WatchCancelRequest)
  return target;
}

size_t WatchCancelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.WatchCancelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 watch_id = 1;
  if (this->watch_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_watch_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchCancelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.WatchCancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchCancelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchCancelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.WatchCancelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.WatchCancelRequest)
    MergeFrom(*source);
  }
}

void WatchCancelRequest::MergeFrom(const WatchCancelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.WatchCancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.watch_id() != 0) {
    _internal_set_watch_id(from._internal_watch_id());
  }
}

void WatchCancelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.WatchCancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchCancelRequest::CopyFrom(const WatchCancelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.WatchCancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchCancelRequest::IsInitialized() const {
  return true;
}

void WatchCancelRequest::InternalSwap(WatchCancelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(watch_id_, other->watch_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchCancelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchProgressRequest::InitAsDefaultInstance() {
}
class WatchProgressRequest::_Internal {
 public:
};

WatchProgressRequest::WatchProgressRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.WatchProgressRequest)
}
WatchProgressRequest::WatchProgressRequest(const WatchProgressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.WatchProgressRequest)
}

void WatchProgressRequest::SharedCtor() {
}

WatchProgressRequest::~WatchProgressRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.WatchProgressRequest)
  SharedDtor();
}

void WatchProgressRequest::SharedDtor() {
}

void WatchProgressRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchProgressRequest& WatchProgressRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchProgressRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void WatchProgressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.WatchProgressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* WatchProgressRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchProgressRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.WatchProgressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.WatchProgressRequest)
  return target;
}

size_t WatchProgressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.WatchProgressRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchProgressRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.WatchProgressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchProgressRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchProgressRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.WatchProgressRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.WatchProgressRequest)
    MergeFrom(*source);
  }
}

void WatchProgressRequest::MergeFrom(const WatchProgressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.WatchProgressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WatchProgressRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.WatchProgressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchProgressRequest::CopyFrom(const WatchProgressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.WatchProgressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchProgressRequest::IsInitialized() const {
  return true;
}

void WatchProgressRequest::InternalSwap(WatchProgressRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchProgressRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WatchResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_WatchResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class WatchResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const WatchResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
WatchResponse::_Internal::header(const WatchResponse* msg) {
  return *msg->header_;
}
void WatchResponse::clear_events() {
  events_.Clear();
}
WatchResponse::WatchResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.WatchResponse)
}
WatchResponse::WatchResponse(const WatchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      events_(from.events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cancel_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cancel_reason().empty()) {
    cancel_reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cancel_reason_);
  }
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&watch_id_, &from.watch_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&fragment_) -
    reinterpret_cast<char*>(&watch_id_)) + sizeof(fragment_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.WatchResponse)
}

void WatchResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WatchResponse_rpc_2eproto.base);
  cancel_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fragment_) -
      reinterpret_cast<char*>(&header_)) + sizeof(fragment_));
}

WatchResponse::~WatchResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.WatchResponse)
  SharedDtor();
}

void WatchResponse::SharedDtor() {
  cancel_reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void WatchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WatchResponse& WatchResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WatchResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void WatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.WatchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  cancel_reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&watch_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fragment_) -
      reinterpret_cast<char*>(&watch_id_)) + sizeof(fragment_));
  _internal_metadata_.Clear();
}

const char* WatchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 watch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          watch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool created = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool canceled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          canceled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 compact_revision = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          compact_revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cancel_reason = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_cancel_reason(), ptr, ctx, "etcdserverpb.WatchResponse.cancel_reason");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fragment = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          fragment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mvccpb.Event events = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WatchResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.WatchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  // int64 watch_id = 2;
  if (this->watch_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_watch_id(), target);
  }

  // bool created = 3;
  if (this->created() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_created(), target);
  }

  // bool canceled = 4;
  if (this->canceled() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_canceled(), target);
  }

  // int64 compact_revision = 5;
  if (this->compact_revision() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_compact_revision(), target);
  }

  // string cancel_reason = 6;
  if (this->cancel_reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cancel_reason().data(), static_cast<int>(this->_internal_cancel_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.WatchResponse.cancel_reason");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_cancel_reason(), target);
  }

  // bool fragment = 7;
  if (this->fragment() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_fragment(), target);
  }

  // repeated .mvccpb.Event events = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(11, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.WatchResponse)
  return target;
}

size_t WatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.WatchResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mvccpb.Event events = 11;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string cancel_reason = 6;
  if (this->cancel_reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cancel_reason());
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int64 watch_id = 2;
  if (this->watch_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_watch_id());
  }

  // int64 compact_revision = 5;
  if (this->compact_revision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_compact_revision());
  }

  // bool created = 3;
  if (this->created() != 0) {
    total_size += 1 + 1;
  }

  // bool canceled = 4;
  if (this->canceled() != 0) {
    total_size += 1 + 1;
  }

  // bool fragment = 7;
  if (this->fragment() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WatchResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.WatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WatchResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WatchResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.WatchResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.WatchResponse)
    MergeFrom(*source);
  }
}

void WatchResponse::MergeFrom(const WatchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.WatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (from.cancel_reason().size() > 0) {

    cancel_reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cancel_reason_);
  }
  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.watch_id() != 0) {
    _internal_set_watch_id(from._internal_watch_id());
  }
  if (from.compact_revision() != 0) {
    _internal_set_compact_revision(from._internal_compact_revision());
  }
  if (from.created() != 0) {
    _internal_set_created(from._internal_created());
  }
  if (from.canceled() != 0) {
    _internal_set_canceled(from._internal_canceled());
  }
  if (from.fragment() != 0) {
    _internal_set_fragment(from._internal_fragment());
  }
}

void WatchResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.WatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WatchResponse::CopyFrom(const WatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.WatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchResponse::IsInitialized() const {
  return true;
}

void WatchResponse::InternalSwap(WatchResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
  cancel_reason_.Swap(&other->cancel_reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(watch_id_, other->watch_id_);
  swap(compact_revision_, other->compact_revision_);
  swap(created_, other->created_);
  swap(canceled_, other->canceled_);
  swap(fragment_, other->fragment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaseGrantRequest::InitAsDefaultInstance() {
}
class LeaseGrantRequest::_Internal {
 public:
};

LeaseGrantRequest::LeaseGrantRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.LeaseGrantRequest)
}
LeaseGrantRequest::LeaseGrantRequest(const LeaseGrantRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ttl_, &from.ttl_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&ttl_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseGrantRequest)
}

void LeaseGrantRequest::SharedCtor() {
  ::memset(&ttl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&ttl_)) + sizeof(id_));
}

LeaseGrantRequest::~LeaseGrantRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseGrantRequest)
  SharedDtor();
}

void LeaseGrantRequest::SharedDtor() {
}

void LeaseGrantRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaseGrantRequest& LeaseGrantRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaseGrantRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void LeaseGrantRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseGrantRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ttl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&ttl_)) + sizeof(id_));
  _internal_metadata_.Clear();
}

const char* LeaseGrantRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 TTL = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaseGrantRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseGrantRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 TTL = 1;
  if (this->ttl() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ttl(), target);
  }

  // int64 ID = 2;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseGrantRequest)
  return target;
}

size_t LeaseGrantRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseGrantRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 TTL = 1;
  if (this->ttl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttl());
  }

  // int64 ID = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaseGrantRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.LeaseGrantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaseGrantRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaseGrantRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.LeaseGrantRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.LeaseGrantRequest)
    MergeFrom(*source);
  }
}

void LeaseGrantRequest::MergeFrom(const LeaseGrantRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseGrantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ttl() != 0) {
    _internal_set_ttl(from._internal_ttl());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void LeaseGrantRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.LeaseGrantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseGrantRequest::CopyFrom(const LeaseGrantRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseGrantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseGrantRequest::IsInitialized() const {
  return true;
}

void LeaseGrantRequest::InternalSwap(LeaseGrantRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ttl_, other->ttl_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseGrantRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaseGrantResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_LeaseGrantResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class LeaseGrantResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const LeaseGrantResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
LeaseGrantResponse::_Internal::header(const LeaseGrantResponse* msg) {
  return *msg->header_;
}
LeaseGrantResponse::LeaseGrantResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.LeaseGrantResponse)
}
LeaseGrantResponse::LeaseGrantResponse(const LeaseGrantResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttl_) -
    reinterpret_cast<char*>(&id_)) + sizeof(ttl_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseGrantResponse)
}

void LeaseGrantResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaseGrantResponse_rpc_2eproto.base);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ttl_) -
      reinterpret_cast<char*>(&header_)) + sizeof(ttl_));
}

LeaseGrantResponse::~LeaseGrantResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseGrantResponse)
  SharedDtor();
}

void LeaseGrantResponse::SharedDtor() {
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void LeaseGrantResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaseGrantResponse& LeaseGrantResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaseGrantResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void LeaseGrantResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseGrantResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ttl_) -
      reinterpret_cast<char*>(&id_)) + sizeof(ttl_));
  _internal_metadata_.Clear();
}

const char* LeaseGrantResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 TTL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_error(), ptr, ctx, "etcdserverpb.LeaseGrantResponse.error");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaseGrantResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseGrantResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  // int64 ID = 2;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  // int64 TTL = 3;
  if (this->ttl() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_ttl(), target);
  }

  // string error = 4;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.LeaseGrantResponse.error");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseGrantResponse)
  return target;
}

size_t LeaseGrantResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseGrantResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 4;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int64 ID = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 TTL = 3;
  if (this->ttl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttl());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaseGrantResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.LeaseGrantResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaseGrantResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaseGrantResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.LeaseGrantResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.LeaseGrantResponse)
    MergeFrom(*source);
  }
}

void LeaseGrantResponse::MergeFrom(const LeaseGrantResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseGrantResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.ttl() != 0) {
    _internal_set_ttl(from._internal_ttl());
  }
}

void LeaseGrantResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.LeaseGrantResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseGrantResponse::CopyFrom(const LeaseGrantResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseGrantResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseGrantResponse::IsInitialized() const {
  return true;
}

void LeaseGrantResponse::InternalSwap(LeaseGrantResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(id_, other->id_);
  swap(ttl_, other->ttl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseGrantResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaseRevokeRequest::InitAsDefaultInstance() {
}
class LeaseRevokeRequest::_Internal {
 public:
};

LeaseRevokeRequest::LeaseRevokeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.LeaseRevokeRequest)
}
LeaseRevokeRequest::LeaseRevokeRequest(const LeaseRevokeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseRevokeRequest)
}

void LeaseRevokeRequest::SharedCtor() {
  id_ = PROTOBUF_LONGLONG(0);
}

LeaseRevokeRequest::~LeaseRevokeRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseRevokeRequest)
  SharedDtor();
}

void LeaseRevokeRequest::SharedDtor() {
}

void LeaseRevokeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaseRevokeRequest& LeaseRevokeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaseRevokeRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void LeaseRevokeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseRevokeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* LeaseRevokeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaseRevokeRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseRevokeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseRevokeRequest)
  return target;
}

size_t LeaseRevokeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseRevokeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaseRevokeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.LeaseRevokeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaseRevokeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaseRevokeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.LeaseRevokeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.LeaseRevokeRequest)
    MergeFrom(*source);
  }
}

void LeaseRevokeRequest::MergeFrom(const LeaseRevokeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseRevokeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void LeaseRevokeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.LeaseRevokeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseRevokeRequest::CopyFrom(const LeaseRevokeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseRevokeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseRevokeRequest::IsInitialized() const {
  return true;
}

void LeaseRevokeRequest::InternalSwap(LeaseRevokeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseRevokeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaseRevokeResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_LeaseRevokeResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class LeaseRevokeResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const LeaseRevokeResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
LeaseRevokeResponse::_Internal::header(const LeaseRevokeResponse* msg) {
  return *msg->header_;
}
LeaseRevokeResponse::LeaseRevokeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.LeaseRevokeResponse)
}
LeaseRevokeResponse::LeaseRevokeResponse(const LeaseRevokeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseRevokeResponse)
}

void LeaseRevokeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaseRevokeResponse_rpc_2eproto.base);
  header_ = nullptr;
}

LeaseRevokeResponse::~LeaseRevokeResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseRevokeResponse)
  SharedDtor();
}

void LeaseRevokeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void LeaseRevokeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaseRevokeResponse& LeaseRevokeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaseRevokeResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void LeaseRevokeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseRevokeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* LeaseRevokeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaseRevokeResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseRevokeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseRevokeResponse)
  return target;
}

size_t LeaseRevokeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseRevokeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaseRevokeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.LeaseRevokeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaseRevokeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaseRevokeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.LeaseRevokeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.LeaseRevokeResponse)
    MergeFrom(*source);
  }
}

void LeaseRevokeResponse::MergeFrom(const LeaseRevokeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseRevokeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void LeaseRevokeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.LeaseRevokeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseRevokeResponse::CopyFrom(const LeaseRevokeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseRevokeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseRevokeResponse::IsInitialized() const {
  return true;
}

void LeaseRevokeResponse::InternalSwap(LeaseRevokeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseRevokeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaseCheckpoint::InitAsDefaultInstance() {
}
class LeaseCheckpoint::_Internal {
 public:
};

LeaseCheckpoint::LeaseCheckpoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.LeaseCheckpoint)
}
LeaseCheckpoint::LeaseCheckpoint(const LeaseCheckpoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&remaining_ttl_) -
    reinterpret_cast<char*>(&id_)) + sizeof(remaining_ttl_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseCheckpoint)
}

void LeaseCheckpoint::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_ttl_) -
      reinterpret_cast<char*>(&id_)) + sizeof(remaining_ttl_));
}

LeaseCheckpoint::~LeaseCheckpoint() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseCheckpoint)
  SharedDtor();
}

void LeaseCheckpoint::SharedDtor() {
}

void LeaseCheckpoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaseCheckpoint& LeaseCheckpoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaseCheckpoint_rpc_2eproto.base);
  return *internal_default_instance();
}


void LeaseCheckpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseCheckpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_ttl_) -
      reinterpret_cast<char*>(&id_)) + sizeof(remaining_ttl_));
  _internal_metadata_.Clear();
}

const char* LeaseCheckpoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 remaining_TTL = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          remaining_ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaseCheckpoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseCheckpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int64 remaining_TTL = 2;
  if (this->remaining_ttl() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_remaining_ttl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseCheckpoint)
  return target;
}

size_t LeaseCheckpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseCheckpoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 remaining_TTL = 2;
  if (this->remaining_ttl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_remaining_ttl());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaseCheckpoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.LeaseCheckpoint)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaseCheckpoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaseCheckpoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.LeaseCheckpoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.LeaseCheckpoint)
    MergeFrom(*source);
  }
}

void LeaseCheckpoint::MergeFrom(const LeaseCheckpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseCheckpoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.remaining_ttl() != 0) {
    _internal_set_remaining_ttl(from._internal_remaining_ttl());
  }
}

void LeaseCheckpoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.LeaseCheckpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseCheckpoint::CopyFrom(const LeaseCheckpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseCheckpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseCheckpoint::IsInitialized() const {
  return true;
}

void LeaseCheckpoint::InternalSwap(LeaseCheckpoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(remaining_ttl_, other->remaining_ttl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseCheckpoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaseCheckpointRequest::InitAsDefaultInstance() {
}
class LeaseCheckpointRequest::_Internal {
 public:
};

LeaseCheckpointRequest::LeaseCheckpointRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.LeaseCheckpointRequest)
}
LeaseCheckpointRequest::LeaseCheckpointRequest(const LeaseCheckpointRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      checkpoints_(from.checkpoints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseCheckpointRequest)
}

void LeaseCheckpointRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaseCheckpointRequest_rpc_2eproto.base);
}

LeaseCheckpointRequest::~LeaseCheckpointRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseCheckpointRequest)
  SharedDtor();
}

void LeaseCheckpointRequest::SharedDtor() {
}

void LeaseCheckpointRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaseCheckpointRequest& LeaseCheckpointRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaseCheckpointRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void LeaseCheckpointRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseCheckpointRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  checkpoints_.Clear();
  _internal_metadata_.Clear();
}

const char* LeaseCheckpointRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .etcdserverpb.LeaseCheckpoint checkpoints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_checkpoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaseCheckpointRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseCheckpointRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .etcdserverpb.LeaseCheckpoint checkpoints = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_checkpoints_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_checkpoints(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseCheckpointRequest)
  return target;
}

size_t LeaseCheckpointRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseCheckpointRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .etcdserverpb.LeaseCheckpoint checkpoints = 1;
  total_size += 1UL * this->_internal_checkpoints_size();
  for (const auto& msg : this->checkpoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaseCheckpointRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.LeaseCheckpointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaseCheckpointRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaseCheckpointRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.LeaseCheckpointRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.LeaseCheckpointRequest)
    MergeFrom(*source);
  }
}

void LeaseCheckpointRequest::MergeFrom(const LeaseCheckpointRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseCheckpointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  checkpoints_.MergeFrom(from.checkpoints_);
}

void LeaseCheckpointRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.LeaseCheckpointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseCheckpointRequest::CopyFrom(const LeaseCheckpointRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseCheckpointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseCheckpointRequest::IsInitialized() const {
  return true;
}

void LeaseCheckpointRequest::InternalSwap(LeaseCheckpointRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  checkpoints_.InternalSwap(&other->checkpoints_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseCheckpointRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaseCheckpointResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_LeaseCheckpointResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class LeaseCheckpointResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const LeaseCheckpointResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
LeaseCheckpointResponse::_Internal::header(const LeaseCheckpointResponse* msg) {
  return *msg->header_;
}
LeaseCheckpointResponse::LeaseCheckpointResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.LeaseCheckpointResponse)
}
LeaseCheckpointResponse::LeaseCheckpointResponse(const LeaseCheckpointResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseCheckpointResponse)
}

void LeaseCheckpointResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaseCheckpointResponse_rpc_2eproto.base);
  header_ = nullptr;
}

LeaseCheckpointResponse::~LeaseCheckpointResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseCheckpointResponse)
  SharedDtor();
}

void LeaseCheckpointResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void LeaseCheckpointResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaseCheckpointResponse& LeaseCheckpointResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaseCheckpointResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void LeaseCheckpointResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseCheckpointResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* LeaseCheckpointResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaseCheckpointResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseCheckpointResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseCheckpointResponse)
  return target;
}

size_t LeaseCheckpointResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseCheckpointResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaseCheckpointResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.LeaseCheckpointResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaseCheckpointResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaseCheckpointResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.LeaseCheckpointResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.LeaseCheckpointResponse)
    MergeFrom(*source);
  }
}

void LeaseCheckpointResponse::MergeFrom(const LeaseCheckpointResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseCheckpointResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void LeaseCheckpointResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.LeaseCheckpointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseCheckpointResponse::CopyFrom(const LeaseCheckpointResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseCheckpointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseCheckpointResponse::IsInitialized() const {
  return true;
}

void LeaseCheckpointResponse::InternalSwap(LeaseCheckpointResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseCheckpointResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaseKeepAliveRequest::InitAsDefaultInstance() {
}
class LeaseKeepAliveRequest::_Internal {
 public:
};

LeaseKeepAliveRequest::LeaseKeepAliveRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.LeaseKeepAliveRequest)
}
LeaseKeepAliveRequest::LeaseKeepAliveRequest(const LeaseKeepAliveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseKeepAliveRequest)
}

void LeaseKeepAliveRequest::SharedCtor() {
  id_ = PROTOBUF_LONGLONG(0);
}

LeaseKeepAliveRequest::~LeaseKeepAliveRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseKeepAliveRequest)
  SharedDtor();
}

void LeaseKeepAliveRequest::SharedDtor() {
}

void LeaseKeepAliveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaseKeepAliveRequest& LeaseKeepAliveRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaseKeepAliveRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void LeaseKeepAliveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseKeepAliveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* LeaseKeepAliveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaseKeepAliveRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseKeepAliveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseKeepAliveRequest)
  return target;
}

size_t LeaseKeepAliveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseKeepAliveRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaseKeepAliveRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.LeaseKeepAliveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaseKeepAliveRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaseKeepAliveRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.LeaseKeepAliveRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.LeaseKeepAliveRequest)
    MergeFrom(*source);
  }
}

void LeaseKeepAliveRequest::MergeFrom(const LeaseKeepAliveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseKeepAliveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void LeaseKeepAliveRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.LeaseKeepAliveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseKeepAliveRequest::CopyFrom(const LeaseKeepAliveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseKeepAliveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseKeepAliveRequest::IsInitialized() const {
  return true;
}

void LeaseKeepAliveRequest::InternalSwap(LeaseKeepAliveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseKeepAliveRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaseKeepAliveResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_LeaseKeepAliveResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class LeaseKeepAliveResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const LeaseKeepAliveResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
LeaseKeepAliveResponse::_Internal::header(const LeaseKeepAliveResponse* msg) {
  return *msg->header_;
}
LeaseKeepAliveResponse::LeaseKeepAliveResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.LeaseKeepAliveResponse)
}
LeaseKeepAliveResponse::LeaseKeepAliveResponse(const LeaseKeepAliveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttl_) -
    reinterpret_cast<char*>(&id_)) + sizeof(ttl_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseKeepAliveResponse)
}

void LeaseKeepAliveResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaseKeepAliveResponse_rpc_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ttl_) -
      reinterpret_cast<char*>(&header_)) + sizeof(ttl_));
}

LeaseKeepAliveResponse::~LeaseKeepAliveResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseKeepAliveResponse)
  SharedDtor();
}

void LeaseKeepAliveResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void LeaseKeepAliveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaseKeepAliveResponse& LeaseKeepAliveResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaseKeepAliveResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void LeaseKeepAliveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseKeepAliveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ttl_) -
      reinterpret_cast<char*>(&id_)) + sizeof(ttl_));
  _internal_metadata_.Clear();
}

const char* LeaseKeepAliveResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 TTL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaseKeepAliveResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseKeepAliveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  // int64 ID = 2;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  // int64 TTL = 3;
  if (this->ttl() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_ttl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseKeepAliveResponse)
  return target;
}

size_t LeaseKeepAliveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseKeepAliveResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int64 ID = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 TTL = 3;
  if (this->ttl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttl());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaseKeepAliveResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.LeaseKeepAliveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaseKeepAliveResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaseKeepAliveResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.LeaseKeepAliveResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.LeaseKeepAliveResponse)
    MergeFrom(*source);
  }
}

void LeaseKeepAliveResponse::MergeFrom(const LeaseKeepAliveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseKeepAliveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.ttl() != 0) {
    _internal_set_ttl(from._internal_ttl());
  }
}

void LeaseKeepAliveResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.LeaseKeepAliveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseKeepAliveResponse::CopyFrom(const LeaseKeepAliveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseKeepAliveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseKeepAliveResponse::IsInitialized() const {
  return true;
}

void LeaseKeepAliveResponse::InternalSwap(LeaseKeepAliveResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(id_, other->id_);
  swap(ttl_, other->ttl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseKeepAliveResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaseTimeToLiveRequest::InitAsDefaultInstance() {
}
class LeaseTimeToLiveRequest::_Internal {
 public:
};

LeaseTimeToLiveRequest::LeaseTimeToLiveRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.LeaseTimeToLiveRequest)
}
LeaseTimeToLiveRequest::LeaseTimeToLiveRequest(const LeaseTimeToLiveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&keys_) -
    reinterpret_cast<char*>(&id_)) + sizeof(keys_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseTimeToLiveRequest)
}

void LeaseTimeToLiveRequest::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keys_) -
      reinterpret_cast<char*>(&id_)) + sizeof(keys_));
}

LeaseTimeToLiveRequest::~LeaseTimeToLiveRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseTimeToLiveRequest)
  SharedDtor();
}

void LeaseTimeToLiveRequest::SharedDtor() {
}

void LeaseTimeToLiveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaseTimeToLiveRequest& LeaseTimeToLiveRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaseTimeToLiveRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void LeaseTimeToLiveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseTimeToLiveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keys_) -
      reinterpret_cast<char*>(&id_)) + sizeof(keys_));
  _internal_metadata_.Clear();
}

const char* LeaseTimeToLiveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          keys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaseTimeToLiveRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseTimeToLiveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // bool keys = 2;
  if (this->keys() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_keys(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseTimeToLiveRequest)
  return target;
}

size_t LeaseTimeToLiveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseTimeToLiveRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // bool keys = 2;
  if (this->keys() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaseTimeToLiveRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.LeaseTimeToLiveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaseTimeToLiveRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaseTimeToLiveRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.LeaseTimeToLiveRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.LeaseTimeToLiveRequest)
    MergeFrom(*source);
  }
}

void LeaseTimeToLiveRequest::MergeFrom(const LeaseTimeToLiveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseTimeToLiveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.keys() != 0) {
    _internal_set_keys(from._internal_keys());
  }
}

void LeaseTimeToLiveRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.LeaseTimeToLiveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseTimeToLiveRequest::CopyFrom(const LeaseTimeToLiveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseTimeToLiveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseTimeToLiveRequest::IsInitialized() const {
  return true;
}

void LeaseTimeToLiveRequest::InternalSwap(LeaseTimeToLiveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(keys_, other->keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseTimeToLiveRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaseTimeToLiveResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_LeaseTimeToLiveResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class LeaseTimeToLiveResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const LeaseTimeToLiveResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
LeaseTimeToLiveResponse::_Internal::header(const LeaseTimeToLiveResponse* msg) {
  return *msg->header_;
}
LeaseTimeToLiveResponse::LeaseTimeToLiveResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.LeaseTimeToLiveResponse)
}
LeaseTimeToLiveResponse::LeaseTimeToLiveResponse(const LeaseTimeToLiveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&grantedttl_) -
    reinterpret_cast<char*>(&id_)) + sizeof(grantedttl_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseTimeToLiveResponse)
}

void LeaseTimeToLiveResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaseTimeToLiveResponse_rpc_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grantedttl_) -
      reinterpret_cast<char*>(&header_)) + sizeof(grantedttl_));
}

LeaseTimeToLiveResponse::~LeaseTimeToLiveResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseTimeToLiveResponse)
  SharedDtor();
}

void LeaseTimeToLiveResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void LeaseTimeToLiveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaseTimeToLiveResponse& LeaseTimeToLiveResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaseTimeToLiveResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void LeaseTimeToLiveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseTimeToLiveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grantedttl_) -
      reinterpret_cast<char*>(&id_)) + sizeof(grantedttl_));
  _internal_metadata_.Clear();
}

const char* LeaseTimeToLiveResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 TTL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 grantedTTL = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          grantedttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes keys = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_add_keys(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaseTimeToLiveResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseTimeToLiveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  // int64 ID = 2;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_id(), target);
  }

  // int64 TTL = 3;
  if (this->ttl() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_ttl(), target);
  }

  // int64 grantedTTL = 4;
  if (this->grantedttl() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_grantedttl(), target);
  }

  // repeated bytes keys = 5;
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keys(i);
    target = stream->WriteBytes(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseTimeToLiveResponse)
  return target;
}

size_t LeaseTimeToLiveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseTimeToLiveResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes keys = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(keys_.size());
  for (int i = 0, n = keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      keys_.Get(i));
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int64 ID = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 TTL = 3;
  if (this->ttl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ttl());
  }

  // int64 grantedTTL = 4;
  if (this->grantedttl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_grantedttl());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaseTimeToLiveResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.LeaseTimeToLiveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaseTimeToLiveResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaseTimeToLiveResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.LeaseTimeToLiveResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.LeaseTimeToLiveResponse)
    MergeFrom(*source);
  }
}

void LeaseTimeToLiveResponse::MergeFrom(const LeaseTimeToLiveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseTimeToLiveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.ttl() != 0) {
    _internal_set_ttl(from._internal_ttl());
  }
  if (from.grantedttl() != 0) {
    _internal_set_grantedttl(from._internal_grantedttl());
  }
}

void LeaseTimeToLiveResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.LeaseTimeToLiveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseTimeToLiveResponse::CopyFrom(const LeaseTimeToLiveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseTimeToLiveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseTimeToLiveResponse::IsInitialized() const {
  return true;
}

void LeaseTimeToLiveResponse::InternalSwap(LeaseTimeToLiveResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
  swap(header_, other->header_);
  swap(id_, other->id_);
  swap(ttl_, other->ttl_);
  swap(grantedttl_, other->grantedttl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseTimeToLiveResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaseLeasesRequest::InitAsDefaultInstance() {
}
class LeaseLeasesRequest::_Internal {
 public:
};

LeaseLeasesRequest::LeaseLeasesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.LeaseLeasesRequest)
}
LeaseLeasesRequest::LeaseLeasesRequest(const LeaseLeasesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseLeasesRequest)
}

void LeaseLeasesRequest::SharedCtor() {
}

LeaseLeasesRequest::~LeaseLeasesRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseLeasesRequest)
  SharedDtor();
}

void LeaseLeasesRequest::SharedDtor() {
}

void LeaseLeasesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaseLeasesRequest& LeaseLeasesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaseLeasesRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void LeaseLeasesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseLeasesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* LeaseLeasesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaseLeasesRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseLeasesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseLeasesRequest)
  return target;
}

size_t LeaseLeasesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseLeasesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaseLeasesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.LeaseLeasesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaseLeasesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaseLeasesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.LeaseLeasesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.LeaseLeasesRequest)
    MergeFrom(*source);
  }
}

void LeaseLeasesRequest::MergeFrom(const LeaseLeasesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseLeasesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LeaseLeasesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.LeaseLeasesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseLeasesRequest::CopyFrom(const LeaseLeasesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseLeasesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseLeasesRequest::IsInitialized() const {
  return true;
}

void LeaseLeasesRequest::InternalSwap(LeaseLeasesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseLeasesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaseStatus::InitAsDefaultInstance() {
}
class LeaseStatus::_Internal {
 public:
};

LeaseStatus::LeaseStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.LeaseStatus)
}
LeaseStatus::LeaseStatus(const LeaseStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseStatus)
}

void LeaseStatus::SharedCtor() {
  id_ = PROTOBUF_LONGLONG(0);
}

LeaseStatus::~LeaseStatus() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseStatus)
  SharedDtor();
}

void LeaseStatus::SharedDtor() {
}

void LeaseStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaseStatus& LeaseStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaseStatus_rpc_2eproto.base);
  return *internal_default_instance();
}


void LeaseStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* LeaseStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaseStatus::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseStatus)
  return target;
}

size_t LeaseStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaseStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.LeaseStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaseStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaseStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.LeaseStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.LeaseStatus)
    MergeFrom(*source);
  }
}

void LeaseStatus::MergeFrom(const LeaseStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void LeaseStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.LeaseStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseStatus::CopyFrom(const LeaseStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseStatus::IsInitialized() const {
  return true;
}

void LeaseStatus::InternalSwap(LeaseStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaseLeasesResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_LeaseLeasesResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class LeaseLeasesResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const LeaseLeasesResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
LeaseLeasesResponse::_Internal::header(const LeaseLeasesResponse* msg) {
  return *msg->header_;
}
LeaseLeasesResponse::LeaseLeasesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.LeaseLeasesResponse)
}
LeaseLeasesResponse::LeaseLeasesResponse(const LeaseLeasesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      leases_(from.leases_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.LeaseLeasesResponse)
}

void LeaseLeasesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaseLeasesResponse_rpc_2eproto.base);
  header_ = nullptr;
}

LeaseLeasesResponse::~LeaseLeasesResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.LeaseLeasesResponse)
  SharedDtor();
}

void LeaseLeasesResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void LeaseLeasesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaseLeasesResponse& LeaseLeasesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaseLeasesResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void LeaseLeasesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.LeaseLeasesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leases_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* LeaseLeasesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .etcdserverpb.LeaseStatus leases = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaseLeasesResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.LeaseLeasesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  // repeated .etcdserverpb.LeaseStatus leases = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_leases_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_leases(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.LeaseLeasesResponse)
  return target;
}

size_t LeaseLeasesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.LeaseLeasesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .etcdserverpb.LeaseStatus leases = 2;
  total_size += 1UL * this->_internal_leases_size();
  for (const auto& msg : this->leases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaseLeasesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.LeaseLeasesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaseLeasesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaseLeasesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.LeaseLeasesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.LeaseLeasesResponse)
    MergeFrom(*source);
  }
}

void LeaseLeasesResponse::MergeFrom(const LeaseLeasesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.LeaseLeasesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  leases_.MergeFrom(from.leases_);
  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void LeaseLeasesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.LeaseLeasesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseLeasesResponse::CopyFrom(const LeaseLeasesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.LeaseLeasesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseLeasesResponse::IsInitialized() const {
  return true;
}

void LeaseLeasesResponse::InternalSwap(LeaseLeasesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  leases_.InternalSwap(&other->leases_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseLeasesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Member::InitAsDefaultInstance() {
}
class Member::_Internal {
 public:
};

Member::Member()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.Member)
}
Member::Member(const Member& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      peerurls_(from.peerurls_),
      clienturls_(from.clienturls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&islearner_) -
    reinterpret_cast<char*>(&id_)) + sizeof(islearner_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.Member)
}

void Member::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Member_rpc_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&islearner_) -
      reinterpret_cast<char*>(&id_)) + sizeof(islearner_));
}

Member::~Member() {
  // @@protoc_insertion_point(destructor:etcdserverpb.Member)
  SharedDtor();
}

void Member::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Member& Member::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Member_rpc_2eproto.base);
  return *internal_default_instance();
}


void Member::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peerurls_.Clear();
  clienturls_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&islearner_) -
      reinterpret_cast<char*>(&id_)) + sizeof(islearner_));
  _internal_metadata_.Clear();
}

const char* Member::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "etcdserverpb.Member.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string peerURLs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_peerurls(), ptr, ctx, "etcdserverpb.Member.peerURLs");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string clientURLs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_clienturls(), ptr, ctx, "etcdserverpb.Member.clientURLs");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // bool isLearner = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          islearner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Member::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ID = 1;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.Member.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated string peerURLs = 3;
  for (int i = 0, n = this->_internal_peerurls_size(); i < n; i++) {
    const auto& s = this->_internal_peerurls(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.Member.peerURLs");
    target = stream->WriteString(3, s, target);
  }

  // repeated string clientURLs = 4;
  for (int i = 0, n = this->_internal_clienturls_size(); i < n; i++) {
    const auto& s = this->_internal_clienturls(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.Member.clientURLs");
    target = stream->WriteString(4, s, target);
  }

  // bool isLearner = 5;
  if (this->islearner() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_islearner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.Member)
  return target;
}

size_t Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.Member)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string peerURLs = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(peerurls_.size());
  for (int i = 0, n = peerurls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      peerurls_.Get(i));
  }

  // repeated string clientURLs = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(clienturls_.size());
  for (int i = 0, n = clienturls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      clienturls_.Get(i));
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // bool isLearner = 5;
  if (this->islearner() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Member::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const Member* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Member>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.Member)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.Member)
    MergeFrom(*source);
  }
}

void Member::MergeFrom(const Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peerurls_.MergeFrom(from.peerurls_);
  clienturls_.MergeFrom(from.clienturls_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.islearner() != 0) {
    _internal_set_islearner(from._internal_islearner());
  }
}

void Member::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Member::CopyFrom(const Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Member::IsInitialized() const {
  return true;
}

void Member::InternalSwap(Member* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  peerurls_.InternalSwap(&other->peerurls_);
  clienturls_.InternalSwap(&other->clienturls_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(islearner_, other->islearner_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Member::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemberAddRequest::InitAsDefaultInstance() {
}
class MemberAddRequest::_Internal {
 public:
};

MemberAddRequest::MemberAddRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.MemberAddRequest)
}
MemberAddRequest::MemberAddRequest(const MemberAddRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      peerurls_(from.peerurls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  islearner_ = from.islearner_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MemberAddRequest)
}

void MemberAddRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemberAddRequest_rpc_2eproto.base);
  islearner_ = false;
}

MemberAddRequest::~MemberAddRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MemberAddRequest)
  SharedDtor();
}

void MemberAddRequest::SharedDtor() {
}

void MemberAddRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemberAddRequest& MemberAddRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemberAddRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void MemberAddRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MemberAddRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peerurls_.Clear();
  islearner_ = false;
  _internal_metadata_.Clear();
}

const char* MemberAddRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string peerURLs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_peerurls(), ptr, ctx, "etcdserverpb.MemberAddRequest.peerURLs");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool isLearner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          islearner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemberAddRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MemberAddRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string peerURLs = 1;
  for (int i = 0, n = this->_internal_peerurls_size(); i < n; i++) {
    const auto& s = this->_internal_peerurls(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.MemberAddRequest.peerURLs");
    target = stream->WriteString(1, s, target);
  }

  // bool isLearner = 2;
  if (this->islearner() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_islearner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MemberAddRequest)
  return target;
}

size_t MemberAddRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MemberAddRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string peerURLs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(peerurls_.size());
  for (int i = 0, n = peerurls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      peerurls_.Get(i));
  }

  // bool isLearner = 2;
  if (this->islearner() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberAddRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.MemberAddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberAddRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberAddRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.MemberAddRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.MemberAddRequest)
    MergeFrom(*source);
  }
}

void MemberAddRequest::MergeFrom(const MemberAddRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MemberAddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peerurls_.MergeFrom(from.peerurls_);
  if (from.islearner() != 0) {
    _internal_set_islearner(from._internal_islearner());
  }
}

void MemberAddRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.MemberAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberAddRequest::CopyFrom(const MemberAddRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MemberAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberAddRequest::IsInitialized() const {
  return true;
}

void MemberAddRequest::InternalSwap(MemberAddRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  peerurls_.InternalSwap(&other->peerurls_);
  swap(islearner_, other->islearner_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberAddRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemberAddResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_MemberAddResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
  ::etcdserverpb::_MemberAddResponse_default_instance_._instance.get_mutable()->member_ = const_cast< ::etcdserverpb::Member*>(
      ::etcdserverpb::Member::internal_default_instance());
}
class MemberAddResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const MemberAddResponse* msg);
  static const ::etcdserverpb::Member& member(const MemberAddResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
MemberAddResponse::_Internal::header(const MemberAddResponse* msg) {
  return *msg->header_;
}
const ::etcdserverpb::Member&
MemberAddResponse::_Internal::member(const MemberAddResponse* msg) {
  return *msg->member_;
}
MemberAddResponse::MemberAddResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.MemberAddResponse)
}
MemberAddResponse::MemberAddResponse(const MemberAddResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_member()) {
    member_ = new ::etcdserverpb::Member(*from.member_);
  } else {
    member_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MemberAddResponse)
}

void MemberAddResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemberAddResponse_rpc_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_) -
      reinterpret_cast<char*>(&header_)) + sizeof(member_));
}

MemberAddResponse::~MemberAddResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MemberAddResponse)
  SharedDtor();
}

void MemberAddResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete member_;
}

void MemberAddResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemberAddResponse& MemberAddResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemberAddResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void MemberAddResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MemberAddResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && member_ != nullptr) {
    delete member_;
  }
  member_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MemberAddResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .etcdserverpb.Member member = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_member(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .etcdserverpb.Member members = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemberAddResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MemberAddResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  // .etcdserverpb.Member member = 2;
  if (this->has_member()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::member(this), target, stream);
  }

  // repeated .etcdserverpb.Member members = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_members(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MemberAddResponse)
  return target;
}

size_t MemberAddResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MemberAddResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .etcdserverpb.Member members = 3;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .etcdserverpb.Member member = 2;
  if (this->has_member()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *member_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberAddResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.MemberAddResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberAddResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberAddResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.MemberAddResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.MemberAddResponse)
    MergeFrom(*source);
  }
}

void MemberAddResponse::MergeFrom(const MemberAddResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MemberAddResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_member()) {
    _internal_mutable_member()->::etcdserverpb::Member::MergeFrom(from._internal_member());
  }
}

void MemberAddResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.MemberAddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberAddResponse::CopyFrom(const MemberAddResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MemberAddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberAddResponse::IsInitialized() const {
  return true;
}

void MemberAddResponse::InternalSwap(MemberAddResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  swap(header_, other->header_);
  swap(member_, other->member_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberAddResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemberRemoveRequest::InitAsDefaultInstance() {
}
class MemberRemoveRequest::_Internal {
 public:
};

MemberRemoveRequest::MemberRemoveRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.MemberRemoveRequest)
}
MemberRemoveRequest::MemberRemoveRequest(const MemberRemoveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MemberRemoveRequest)
}

void MemberRemoveRequest::SharedCtor() {
  id_ = PROTOBUF_ULONGLONG(0);
}

MemberRemoveRequest::~MemberRemoveRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MemberRemoveRequest)
  SharedDtor();
}

void MemberRemoveRequest::SharedDtor() {
}

void MemberRemoveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemberRemoveRequest& MemberRemoveRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemberRemoveRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void MemberRemoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MemberRemoveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* MemberRemoveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemberRemoveRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MemberRemoveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ID = 1;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MemberRemoveRequest)
  return target;
}

size_t MemberRemoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MemberRemoveRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberRemoveRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.MemberRemoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberRemoveRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberRemoveRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.MemberRemoveRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.MemberRemoveRequest)
    MergeFrom(*source);
  }
}

void MemberRemoveRequest::MergeFrom(const MemberRemoveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MemberRemoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void MemberRemoveRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.MemberRemoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberRemoveRequest::CopyFrom(const MemberRemoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MemberRemoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberRemoveRequest::IsInitialized() const {
  return true;
}

void MemberRemoveRequest::InternalSwap(MemberRemoveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberRemoveRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemberRemoveResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_MemberRemoveResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class MemberRemoveResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const MemberRemoveResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
MemberRemoveResponse::_Internal::header(const MemberRemoveResponse* msg) {
  return *msg->header_;
}
MemberRemoveResponse::MemberRemoveResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.MemberRemoveResponse)
}
MemberRemoveResponse::MemberRemoveResponse(const MemberRemoveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MemberRemoveResponse)
}

void MemberRemoveResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemberRemoveResponse_rpc_2eproto.base);
  header_ = nullptr;
}

MemberRemoveResponse::~MemberRemoveResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MemberRemoveResponse)
  SharedDtor();
}

void MemberRemoveResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void MemberRemoveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemberRemoveResponse& MemberRemoveResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemberRemoveResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void MemberRemoveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MemberRemoveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MemberRemoveResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .etcdserverpb.Member members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemberRemoveResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MemberRemoveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  // repeated .etcdserverpb.Member members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_members(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MemberRemoveResponse)
  return target;
}

size_t MemberRemoveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MemberRemoveResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .etcdserverpb.Member members = 2;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberRemoveResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.MemberRemoveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberRemoveResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberRemoveResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.MemberRemoveResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.MemberRemoveResponse)
    MergeFrom(*source);
  }
}

void MemberRemoveResponse::MergeFrom(const MemberRemoveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MemberRemoveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void MemberRemoveResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.MemberRemoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberRemoveResponse::CopyFrom(const MemberRemoveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MemberRemoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberRemoveResponse::IsInitialized() const {
  return true;
}

void MemberRemoveResponse::InternalSwap(MemberRemoveResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberRemoveResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemberUpdateRequest::InitAsDefaultInstance() {
}
class MemberUpdateRequest::_Internal {
 public:
};

MemberUpdateRequest::MemberUpdateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.MemberUpdateRequest)
}
MemberUpdateRequest::MemberUpdateRequest(const MemberUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      peerurls_(from.peerurls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MemberUpdateRequest)
}

void MemberUpdateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemberUpdateRequest_rpc_2eproto.base);
  id_ = PROTOBUF_ULONGLONG(0);
}

MemberUpdateRequest::~MemberUpdateRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MemberUpdateRequest)
  SharedDtor();
}

void MemberUpdateRequest::SharedDtor() {
}

void MemberUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemberUpdateRequest& MemberUpdateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemberUpdateRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void MemberUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MemberUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peerurls_.Clear();
  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* MemberUpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string peerURLs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_peerurls(), ptr, ctx, "etcdserverpb.MemberUpdateRequest.peerURLs");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemberUpdateRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MemberUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ID = 1;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // repeated string peerURLs = 2;
  for (int i = 0, n = this->_internal_peerurls_size(); i < n; i++) {
    const auto& s = this->_internal_peerurls(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.MemberUpdateRequest.peerURLs");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MemberUpdateRequest)
  return target;
}

size_t MemberUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MemberUpdateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string peerURLs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(peerurls_.size());
  for (int i = 0, n = peerurls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      peerurls_.Get(i));
  }

  // uint64 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberUpdateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.MemberUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberUpdateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberUpdateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.MemberUpdateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.MemberUpdateRequest)
    MergeFrom(*source);
  }
}

void MemberUpdateRequest::MergeFrom(const MemberUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MemberUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peerurls_.MergeFrom(from.peerurls_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void MemberUpdateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.MemberUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberUpdateRequest::CopyFrom(const MemberUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MemberUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberUpdateRequest::IsInitialized() const {
  return true;
}

void MemberUpdateRequest::InternalSwap(MemberUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  peerurls_.InternalSwap(&other->peerurls_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberUpdateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemberUpdateResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_MemberUpdateResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class MemberUpdateResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const MemberUpdateResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
MemberUpdateResponse::_Internal::header(const MemberUpdateResponse* msg) {
  return *msg->header_;
}
MemberUpdateResponse::MemberUpdateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.MemberUpdateResponse)
}
MemberUpdateResponse::MemberUpdateResponse(const MemberUpdateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MemberUpdateResponse)
}

void MemberUpdateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemberUpdateResponse_rpc_2eproto.base);
  header_ = nullptr;
}

MemberUpdateResponse::~MemberUpdateResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MemberUpdateResponse)
  SharedDtor();
}

void MemberUpdateResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void MemberUpdateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemberUpdateResponse& MemberUpdateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemberUpdateResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void MemberUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MemberUpdateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MemberUpdateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .etcdserverpb.Member members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemberUpdateResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MemberUpdateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  // repeated .etcdserverpb.Member members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_members(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MemberUpdateResponse)
  return target;
}

size_t MemberUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MemberUpdateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .etcdserverpb.Member members = 2;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberUpdateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.MemberUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberUpdateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberUpdateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.MemberUpdateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.MemberUpdateResponse)
    MergeFrom(*source);
  }
}

void MemberUpdateResponse::MergeFrom(const MemberUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MemberUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void MemberUpdateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.MemberUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberUpdateResponse::CopyFrom(const MemberUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MemberUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberUpdateResponse::IsInitialized() const {
  return true;
}

void MemberUpdateResponse::InternalSwap(MemberUpdateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberUpdateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemberListRequest::InitAsDefaultInstance() {
}
class MemberListRequest::_Internal {
 public:
};

MemberListRequest::MemberListRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.MemberListRequest)
}
MemberListRequest::MemberListRequest(const MemberListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MemberListRequest)
}

void MemberListRequest::SharedCtor() {
}

MemberListRequest::~MemberListRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MemberListRequest)
  SharedDtor();
}

void MemberListRequest::SharedDtor() {
}

void MemberListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemberListRequest& MemberListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemberListRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void MemberListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MemberListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* MemberListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemberListRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MemberListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MemberListRequest)
  return target;
}

size_t MemberListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MemberListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.MemberListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.MemberListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.MemberListRequest)
    MergeFrom(*source);
  }
}

void MemberListRequest::MergeFrom(const MemberListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MemberListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MemberListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.MemberListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberListRequest::CopyFrom(const MemberListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MemberListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberListRequest::IsInitialized() const {
  return true;
}

void MemberListRequest::InternalSwap(MemberListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemberListResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_MemberListResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class MemberListResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const MemberListResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
MemberListResponse::_Internal::header(const MemberListResponse* msg) {
  return *msg->header_;
}
MemberListResponse::MemberListResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.MemberListResponse)
}
MemberListResponse::MemberListResponse(const MemberListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MemberListResponse)
}

void MemberListResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemberListResponse_rpc_2eproto.base);
  header_ = nullptr;
}

MemberListResponse::~MemberListResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MemberListResponse)
  SharedDtor();
}

void MemberListResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void MemberListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemberListResponse& MemberListResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemberListResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void MemberListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MemberListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MemberListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .etcdserverpb.Member members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemberListResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MemberListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  // repeated .etcdserverpb.Member members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_members(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MemberListResponse)
  return target;
}

size_t MemberListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MemberListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .etcdserverpb.Member members = 2;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.MemberListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.MemberListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.MemberListResponse)
    MergeFrom(*source);
  }
}

void MemberListResponse::MergeFrom(const MemberListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MemberListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void MemberListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.MemberListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberListResponse::CopyFrom(const MemberListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MemberListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberListResponse::IsInitialized() const {
  return true;
}

void MemberListResponse::InternalSwap(MemberListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemberPromoteRequest::InitAsDefaultInstance() {
}
class MemberPromoteRequest::_Internal {
 public:
};

MemberPromoteRequest::MemberPromoteRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.MemberPromoteRequest)
}
MemberPromoteRequest::MemberPromoteRequest(const MemberPromoteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MemberPromoteRequest)
}

void MemberPromoteRequest::SharedCtor() {
  id_ = PROTOBUF_ULONGLONG(0);
}

MemberPromoteRequest::~MemberPromoteRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MemberPromoteRequest)
  SharedDtor();
}

void MemberPromoteRequest::SharedDtor() {
}

void MemberPromoteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemberPromoteRequest& MemberPromoteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemberPromoteRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void MemberPromoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MemberPromoteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* MemberPromoteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemberPromoteRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MemberPromoteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ID = 1;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MemberPromoteRequest)
  return target;
}

size_t MemberPromoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MemberPromoteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberPromoteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.MemberPromoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberPromoteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberPromoteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.MemberPromoteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.MemberPromoteRequest)
    MergeFrom(*source);
  }
}

void MemberPromoteRequest::MergeFrom(const MemberPromoteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MemberPromoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void MemberPromoteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.MemberPromoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberPromoteRequest::CopyFrom(const MemberPromoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MemberPromoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberPromoteRequest::IsInitialized() const {
  return true;
}

void MemberPromoteRequest::InternalSwap(MemberPromoteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberPromoteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemberPromoteResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_MemberPromoteResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class MemberPromoteResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const MemberPromoteResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
MemberPromoteResponse::_Internal::header(const MemberPromoteResponse* msg) {
  return *msg->header_;
}
MemberPromoteResponse::MemberPromoteResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.MemberPromoteResponse)
}
MemberPromoteResponse::MemberPromoteResponse(const MemberPromoteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MemberPromoteResponse)
}

void MemberPromoteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemberPromoteResponse_rpc_2eproto.base);
  header_ = nullptr;
}

MemberPromoteResponse::~MemberPromoteResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MemberPromoteResponse)
  SharedDtor();
}

void MemberPromoteResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void MemberPromoteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemberPromoteResponse& MemberPromoteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemberPromoteResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void MemberPromoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MemberPromoteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MemberPromoteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .etcdserverpb.Member members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemberPromoteResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MemberPromoteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  // repeated .etcdserverpb.Member members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_members(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MemberPromoteResponse)
  return target;
}

size_t MemberPromoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MemberPromoteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .etcdserverpb.Member members = 2;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberPromoteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.MemberPromoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberPromoteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberPromoteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.MemberPromoteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.MemberPromoteResponse)
    MergeFrom(*source);
  }
}

void MemberPromoteResponse::MergeFrom(const MemberPromoteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MemberPromoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void MemberPromoteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.MemberPromoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberPromoteResponse::CopyFrom(const MemberPromoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MemberPromoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberPromoteResponse::IsInitialized() const {
  return true;
}

void MemberPromoteResponse::InternalSwap(MemberPromoteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberPromoteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DefragmentRequest::InitAsDefaultInstance() {
}
class DefragmentRequest::_Internal {
 public:
};

DefragmentRequest::DefragmentRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.DefragmentRequest)
}
DefragmentRequest::DefragmentRequest(const DefragmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.DefragmentRequest)
}

void DefragmentRequest::SharedCtor() {
}

DefragmentRequest::~DefragmentRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.DefragmentRequest)
  SharedDtor();
}

void DefragmentRequest::SharedDtor() {
}

void DefragmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DefragmentRequest& DefragmentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DefragmentRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void DefragmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.DefragmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* DefragmentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DefragmentRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.DefragmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.DefragmentRequest)
  return target;
}

size_t DefragmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.DefragmentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DefragmentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.DefragmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DefragmentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DefragmentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.DefragmentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.DefragmentRequest)
    MergeFrom(*source);
  }
}

void DefragmentRequest::MergeFrom(const DefragmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.DefragmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DefragmentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.DefragmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefragmentRequest::CopyFrom(const DefragmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.DefragmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefragmentRequest::IsInitialized() const {
  return true;
}

void DefragmentRequest::InternalSwap(DefragmentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DefragmentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DefragmentResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_DefragmentResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class DefragmentResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const DefragmentResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
DefragmentResponse::_Internal::header(const DefragmentResponse* msg) {
  return *msg->header_;
}
DefragmentResponse::DefragmentResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.DefragmentResponse)
}
DefragmentResponse::DefragmentResponse(const DefragmentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.DefragmentResponse)
}

void DefragmentResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DefragmentResponse_rpc_2eproto.base);
  header_ = nullptr;
}

DefragmentResponse::~DefragmentResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.DefragmentResponse)
  SharedDtor();
}

void DefragmentResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void DefragmentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DefragmentResponse& DefragmentResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DefragmentResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void DefragmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.DefragmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DefragmentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DefragmentResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.DefragmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.DefragmentResponse)
  return target;
}

size_t DefragmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.DefragmentResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DefragmentResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.DefragmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DefragmentResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DefragmentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.DefragmentResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.DefragmentResponse)
    MergeFrom(*source);
  }
}

void DefragmentResponse::MergeFrom(const DefragmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.DefragmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void DefragmentResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.DefragmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefragmentResponse::CopyFrom(const DefragmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.DefragmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefragmentResponse::IsInitialized() const {
  return true;
}

void DefragmentResponse::InternalSwap(DefragmentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DefragmentResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveLeaderRequest::InitAsDefaultInstance() {
}
class MoveLeaderRequest::_Internal {
 public:
};

MoveLeaderRequest::MoveLeaderRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.MoveLeaderRequest)
}
MoveLeaderRequest::MoveLeaderRequest(const MoveLeaderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  targetid_ = from.targetid_;
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MoveLeaderRequest)
}

void MoveLeaderRequest::SharedCtor() {
  targetid_ = PROTOBUF_ULONGLONG(0);
}

MoveLeaderRequest::~MoveLeaderRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MoveLeaderRequest)
  SharedDtor();
}

void MoveLeaderRequest::SharedDtor() {
}

void MoveLeaderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveLeaderRequest& MoveLeaderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveLeaderRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void MoveLeaderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MoveLeaderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targetid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* MoveLeaderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 targetID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveLeaderRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MoveLeaderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 targetID = 1;
  if (this->targetid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_targetid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MoveLeaderRequest)
  return target;
}

size_t MoveLeaderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MoveLeaderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 targetID = 1;
  if (this->targetid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_targetid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveLeaderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.MoveLeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveLeaderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveLeaderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.MoveLeaderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.MoveLeaderRequest)
    MergeFrom(*source);
  }
}

void MoveLeaderRequest::MergeFrom(const MoveLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MoveLeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.targetid() != 0) {
    _internal_set_targetid(from._internal_targetid());
  }
}

void MoveLeaderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.MoveLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveLeaderRequest::CopyFrom(const MoveLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MoveLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveLeaderRequest::IsInitialized() const {
  return true;
}

void MoveLeaderRequest::InternalSwap(MoveLeaderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(targetid_, other->targetid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveLeaderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveLeaderResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_MoveLeaderResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class MoveLeaderResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const MoveLeaderResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
MoveLeaderResponse::_Internal::header(const MoveLeaderResponse* msg) {
  return *msg->header_;
}
MoveLeaderResponse::MoveLeaderResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.MoveLeaderResponse)
}
MoveLeaderResponse::MoveLeaderResponse(const MoveLeaderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.MoveLeaderResponse)
}

void MoveLeaderResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveLeaderResponse_rpc_2eproto.base);
  header_ = nullptr;
}

MoveLeaderResponse::~MoveLeaderResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.MoveLeaderResponse)
  SharedDtor();
}

void MoveLeaderResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void MoveLeaderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveLeaderResponse& MoveLeaderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveLeaderResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void MoveLeaderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.MoveLeaderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MoveLeaderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveLeaderResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.MoveLeaderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.MoveLeaderResponse)
  return target;
}

size_t MoveLeaderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.MoveLeaderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveLeaderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.MoveLeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveLeaderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveLeaderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.MoveLeaderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.MoveLeaderResponse)
    MergeFrom(*source);
  }
}

void MoveLeaderResponse::MergeFrom(const MoveLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.MoveLeaderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void MoveLeaderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.MoveLeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveLeaderResponse::CopyFrom(const MoveLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.MoveLeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveLeaderResponse::IsInitialized() const {
  return true;
}

void MoveLeaderResponse::InternalSwap(MoveLeaderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveLeaderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlarmRequest::InitAsDefaultInstance() {
}
class AlarmRequest::_Internal {
 public:
};

AlarmRequest::AlarmRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AlarmRequest)
}
AlarmRequest::AlarmRequest(const AlarmRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&memberid_, &from.memberid_,
    static_cast<size_t>(reinterpret_cast<char*>(&alarm_) -
    reinterpret_cast<char*>(&memberid_)) + sizeof(alarm_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AlarmRequest)
}

void AlarmRequest::SharedCtor() {
  ::memset(&memberid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alarm_) -
      reinterpret_cast<char*>(&memberid_)) + sizeof(alarm_));
}

AlarmRequest::~AlarmRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AlarmRequest)
  SharedDtor();
}

void AlarmRequest::SharedDtor() {
}

void AlarmRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlarmRequest& AlarmRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlarmRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void AlarmRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AlarmRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&memberid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alarm_) -
      reinterpret_cast<char*>(&memberid_)) + sizeof(alarm_));
  _internal_metadata_.Clear();
}

const char* AlarmRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.AlarmRequest.AlarmAction action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::etcdserverpb::AlarmRequest_AlarmAction>(val));
        } else goto handle_unusual;
        continue;
      // uint64 memberID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          memberid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .etcdserverpb.AlarmType alarm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_alarm(static_cast<::etcdserverpb::AlarmType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlarmRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AlarmRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.AlarmRequest.AlarmAction action = 1;
  if (this->action() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  // uint64 memberID = 2;
  if (this->memberid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_memberid(), target);
  }

  // .etcdserverpb.AlarmType alarm = 3;
  if (this->alarm() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_alarm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AlarmRequest)
  return target;
}

size_t AlarmRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AlarmRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 memberID = 2;
  if (this->memberid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_memberid());
  }

  // .etcdserverpb.AlarmRequest.AlarmAction action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  // .etcdserverpb.AlarmType alarm = 3;
  if (this->alarm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_alarm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlarmRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AlarmRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AlarmRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlarmRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AlarmRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AlarmRequest)
    MergeFrom(*source);
  }
}

void AlarmRequest::MergeFrom(const AlarmRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AlarmRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.memberid() != 0) {
    _internal_set_memberid(from._internal_memberid());
  }
  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
  if (from.alarm() != 0) {
    _internal_set_alarm(from._internal_alarm());
  }
}

void AlarmRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AlarmRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmRequest::CopyFrom(const AlarmRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AlarmRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmRequest::IsInitialized() const {
  return true;
}

void AlarmRequest::InternalSwap(AlarmRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(memberid_, other->memberid_);
  swap(action_, other->action_);
  swap(alarm_, other->alarm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlarmRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlarmMember::InitAsDefaultInstance() {
}
class AlarmMember::_Internal {
 public:
};

AlarmMember::AlarmMember()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AlarmMember)
}
AlarmMember::AlarmMember(const AlarmMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&memberid_, &from.memberid_,
    static_cast<size_t>(reinterpret_cast<char*>(&alarm_) -
    reinterpret_cast<char*>(&memberid_)) + sizeof(alarm_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AlarmMember)
}

void AlarmMember::SharedCtor() {
  ::memset(&memberid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alarm_) -
      reinterpret_cast<char*>(&memberid_)) + sizeof(alarm_));
}

AlarmMember::~AlarmMember() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AlarmMember)
  SharedDtor();
}

void AlarmMember::SharedDtor() {
}

void AlarmMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlarmMember& AlarmMember::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlarmMember_rpc_2eproto.base);
  return *internal_default_instance();
}


void AlarmMember::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AlarmMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&memberid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alarm_) -
      reinterpret_cast<char*>(&memberid_)) + sizeof(alarm_));
  _internal_metadata_.Clear();
}

const char* AlarmMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 memberID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          memberid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .etcdserverpb.AlarmType alarm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_alarm(static_cast<::etcdserverpb::AlarmType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlarmMember::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AlarmMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 memberID = 1;
  if (this->memberid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_memberid(), target);
  }

  // .etcdserverpb.AlarmType alarm = 2;
  if (this->alarm() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_alarm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AlarmMember)
  return target;
}

size_t AlarmMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AlarmMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 memberID = 1;
  if (this->memberid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_memberid());
  }

  // .etcdserverpb.AlarmType alarm = 2;
  if (this->alarm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_alarm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlarmMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AlarmMember)
  GOOGLE_DCHECK_NE(&from, this);
  const AlarmMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlarmMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AlarmMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AlarmMember)
    MergeFrom(*source);
  }
}

void AlarmMember::MergeFrom(const AlarmMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AlarmMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.memberid() != 0) {
    _internal_set_memberid(from._internal_memberid());
  }
  if (from.alarm() != 0) {
    _internal_set_alarm(from._internal_alarm());
  }
}

void AlarmMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AlarmMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmMember::CopyFrom(const AlarmMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AlarmMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmMember::IsInitialized() const {
  return true;
}

void AlarmMember::InternalSwap(AlarmMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(memberid_, other->memberid_);
  swap(alarm_, other->alarm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlarmMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlarmResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_AlarmResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class AlarmResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AlarmResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AlarmResponse::_Internal::header(const AlarmResponse* msg) {
  return *msg->header_;
}
AlarmResponse::AlarmResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AlarmResponse)
}
AlarmResponse::AlarmResponse(const AlarmResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      alarms_(from.alarms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AlarmResponse)
}

void AlarmResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlarmResponse_rpc_2eproto.base);
  header_ = nullptr;
}

AlarmResponse::~AlarmResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AlarmResponse)
  SharedDtor();
}

void AlarmResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AlarmResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlarmResponse& AlarmResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlarmResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void AlarmResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AlarmResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alarms_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AlarmResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .etcdserverpb.AlarmMember alarms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_alarms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlarmResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AlarmResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  // repeated .etcdserverpb.AlarmMember alarms = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_alarms_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_alarms(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AlarmResponse)
  return target;
}

size_t AlarmResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AlarmResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .etcdserverpb.AlarmMember alarms = 2;
  total_size += 1UL * this->_internal_alarms_size();
  for (const auto& msg : this->alarms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlarmResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AlarmResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AlarmResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlarmResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AlarmResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AlarmResponse)
    MergeFrom(*source);
  }
}

void AlarmResponse::MergeFrom(const AlarmResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AlarmResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alarms_.MergeFrom(from.alarms_);
  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void AlarmResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AlarmResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmResponse::CopyFrom(const AlarmResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AlarmResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmResponse::IsInitialized() const {
  return true;
}

void AlarmResponse::InternalSwap(AlarmResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  alarms_.InternalSwap(&other->alarms_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlarmResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatusRequest::InitAsDefaultInstance() {
}
class StatusRequest::_Internal {
 public:
};

StatusRequest::StatusRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.StatusRequest)
}
StatusRequest::StatusRequest(const StatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.StatusRequest)
}

void StatusRequest::SharedCtor() {
}

StatusRequest::~StatusRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.StatusRequest)
  SharedDtor();
}

void StatusRequest::SharedDtor() {
}

void StatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusRequest& StatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void StatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.StatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* StatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.StatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.StatusRequest)
  return target;
}

size_t StatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.StatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.StatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.StatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.StatusRequest)
    MergeFrom(*source);
  }
}

void StatusRequest::MergeFrom(const StatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.StatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.StatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusRequest::CopyFrom(const StatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.StatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusRequest::IsInitialized() const {
  return true;
}

void StatusRequest::InternalSwap(StatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatusResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_StatusResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class StatusResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const StatusResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
StatusResponse::_Internal::header(const StatusResponse* msg) {
  return *msg->header_;
}
StatusResponse::StatusResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.StatusResponse)
}
StatusResponse::StatusResponse(const StatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      errors_(from.errors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&dbsize_, &from.dbsize_,
    static_cast<size_t>(reinterpret_cast<char*>(&islearner_) -
    reinterpret_cast<char*>(&dbsize_)) + sizeof(islearner_));
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.StatusResponse)
}

void StatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatusResponse_rpc_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&islearner_) -
      reinterpret_cast<char*>(&header_)) + sizeof(islearner_));
}

StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.StatusResponse)
  SharedDtor();
}

void StatusResponse::SharedDtor() {
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void StatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusResponse& StatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void StatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.StatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errors_.Clear();
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&dbsize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&islearner_) -
      reinterpret_cast<char*>(&dbsize_)) + sizeof(islearner_));
  _internal_metadata_.Clear();
}

const char* StatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_version(), ptr, ctx, "etcdserverpb.StatusResponse.version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 dbSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dbsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 leader = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          leader_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 raftIndex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          raftindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 raftTerm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          raftterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 raftAppliedIndex = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          raftappliedindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string errors = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_errors(), ptr, ctx, "etcdserverpb.StatusResponse.errors");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 dbSizeInUse = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          dbsizeinuse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isLearner = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          islearner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.StatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.StatusResponse.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // int64 dbSize = 3;
  if (this->dbsize() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_dbsize(), target);
  }

  // uint64 leader = 4;
  if (this->leader() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_leader(), target);
  }

  // uint64 raftIndex = 5;
  if (this->raftindex() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_raftindex(), target);
  }

  // uint64 raftTerm = 6;
  if (this->raftterm() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_raftterm(), target);
  }

  // uint64 raftAppliedIndex = 7;
  if (this->raftappliedindex() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_raftappliedindex(), target);
  }

  // repeated string errors = 8;
  for (int i = 0, n = this->_internal_errors_size(); i < n; i++) {
    const auto& s = this->_internal_errors(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.StatusResponse.errors");
    target = stream->WriteString(8, s, target);
  }

  // int64 dbSizeInUse = 9;
  if (this->dbsizeinuse() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_dbsizeinuse(), target);
  }

  // bool isLearner = 10;
  if (this->islearner() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_islearner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.StatusResponse)
  return target;
}

size_t StatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.StatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string errors = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(errors_.size());
  for (int i = 0, n = errors_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      errors_.Get(i));
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int64 dbSize = 3;
  if (this->dbsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_dbsize());
  }

  // uint64 leader = 4;
  if (this->leader() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_leader());
  }

  // uint64 raftIndex = 5;
  if (this->raftindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_raftindex());
  }

  // uint64 raftTerm = 6;
  if (this->raftterm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_raftterm());
  }

  // uint64 raftAppliedIndex = 7;
  if (this->raftappliedindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_raftappliedindex());
  }

  // int64 dbSizeInUse = 9;
  if (this->dbsizeinuse() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_dbsizeinuse());
  }

  // bool isLearner = 10;
  if (this->islearner() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.StatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.StatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.StatusResponse)
    MergeFrom(*source);
  }
}

void StatusResponse::MergeFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.StatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  errors_.MergeFrom(from.errors_);
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.dbsize() != 0) {
    _internal_set_dbsize(from._internal_dbsize());
  }
  if (from.leader() != 0) {
    _internal_set_leader(from._internal_leader());
  }
  if (from.raftindex() != 0) {
    _internal_set_raftindex(from._internal_raftindex());
  }
  if (from.raftterm() != 0) {
    _internal_set_raftterm(from._internal_raftterm());
  }
  if (from.raftappliedindex() != 0) {
    _internal_set_raftappliedindex(from._internal_raftappliedindex());
  }
  if (from.dbsizeinuse() != 0) {
    _internal_set_dbsizeinuse(from._internal_dbsizeinuse());
  }
  if (from.islearner() != 0) {
    _internal_set_islearner(from._internal_islearner());
  }
}

void StatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse::IsInitialized() const {
  return true;
}

void StatusResponse::InternalSwap(StatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  errors_.InternalSwap(&other->errors_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(dbsize_, other->dbsize_);
  swap(leader_, other->leader_);
  swap(raftindex_, other->raftindex_);
  swap(raftterm_, other->raftterm_);
  swap(raftappliedindex_, other->raftappliedindex_);
  swap(dbsizeinuse_, other->dbsizeinuse_);
  swap(islearner_, other->islearner_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthEnableRequest::InitAsDefaultInstance() {
}
class AuthEnableRequest::_Internal {
 public:
};

AuthEnableRequest::AuthEnableRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthEnableRequest)
}
AuthEnableRequest::AuthEnableRequest(const AuthEnableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthEnableRequest)
}

void AuthEnableRequest::SharedCtor() {
}

AuthEnableRequest::~AuthEnableRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthEnableRequest)
  SharedDtor();
}

void AuthEnableRequest::SharedDtor() {
}

void AuthEnableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthEnableRequest& AuthEnableRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthEnableRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthEnableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthEnableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* AuthEnableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthEnableRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthEnableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthEnableRequest)
  return target;
}

size_t AuthEnableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthEnableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthEnableRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthEnableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthEnableRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthEnableRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthEnableRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthEnableRequest)
    MergeFrom(*source);
  }
}

void AuthEnableRequest::MergeFrom(const AuthEnableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthEnableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AuthEnableRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthEnableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthEnableRequest::CopyFrom(const AuthEnableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthEnableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthEnableRequest::IsInitialized() const {
  return true;
}

void AuthEnableRequest::InternalSwap(AuthEnableRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthEnableRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthDisableRequest::InitAsDefaultInstance() {
}
class AuthDisableRequest::_Internal {
 public:
};

AuthDisableRequest::AuthDisableRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthDisableRequest)
}
AuthDisableRequest::AuthDisableRequest(const AuthDisableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthDisableRequest)
}

void AuthDisableRequest::SharedCtor() {
}

AuthDisableRequest::~AuthDisableRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthDisableRequest)
  SharedDtor();
}

void AuthDisableRequest::SharedDtor() {
}

void AuthDisableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthDisableRequest& AuthDisableRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthDisableRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthDisableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthDisableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* AuthDisableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthDisableRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthDisableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthDisableRequest)
  return target;
}

size_t AuthDisableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthDisableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthDisableRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthDisableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthDisableRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthDisableRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthDisableRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthDisableRequest)
    MergeFrom(*source);
  }
}

void AuthDisableRequest::MergeFrom(const AuthDisableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthDisableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AuthDisableRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthDisableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthDisableRequest::CopyFrom(const AuthDisableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthDisableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthDisableRequest::IsInitialized() const {
  return true;
}

void AuthDisableRequest::InternalSwap(AuthDisableRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthDisableRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthenticateRequest::InitAsDefaultInstance() {
}
class AuthenticateRequest::_Internal {
 public:
};

AuthenticateRequest::AuthenticateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthenticateRequest)
}
AuthenticateRequest::AuthenticateRequest(const AuthenticateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthenticateRequest)
}

void AuthenticateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthenticateRequest_rpc_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AuthenticateRequest::~AuthenticateRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthenticateRequest)
  SharedDtor();
}

void AuthenticateRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthenticateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthenticateRequest& AuthenticateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthenticateRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthenticateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthenticateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AuthenticateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "etcdserverpb.AuthenticateRequest.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_password(), ptr, ctx, "etcdserverpb.AuthenticateRequest.password");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthenticateRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthenticateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthenticateRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthenticateRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthenticateRequest)
  return target;
}

size_t AuthenticateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthenticateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthenticateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthenticateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthenticateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthenticateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthenticateRequest)
    MergeFrom(*source);
  }
}

void AuthenticateRequest::MergeFrom(const AuthenticateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthenticateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void AuthenticateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthenticateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateRequest::CopyFrom(const AuthenticateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthenticateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateRequest::IsInitialized() const {
  return true;
}

void AuthenticateRequest::InternalSwap(AuthenticateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthUserAddRequest::InitAsDefaultInstance() {
  ::etcdserverpb::_AuthUserAddRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::authpb::UserAddOptions*>(
      ::authpb::UserAddOptions::internal_default_instance());
}
class AuthUserAddRequest::_Internal {
 public:
  static const ::authpb::UserAddOptions& options(const AuthUserAddRequest* msg);
};

const ::authpb::UserAddOptions&
AuthUserAddRequest::_Internal::options(const AuthUserAddRequest* msg) {
  return *msg->options_;
}
void AuthUserAddRequest::clear_options() {
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
AuthUserAddRequest::AuthUserAddRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserAddRequest)
}
AuthUserAddRequest::AuthUserAddRequest(const AuthUserAddRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from._internal_has_options()) {
    options_ = new ::authpb::UserAddOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserAddRequest)
}

void AuthUserAddRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthUserAddRequest_rpc_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  options_ = nullptr;
}

AuthUserAddRequest::~AuthUserAddRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserAddRequest)
  SharedDtor();
}

void AuthUserAddRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
}

void AuthUserAddRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthUserAddRequest& AuthUserAddRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthUserAddRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthUserAddRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserAddRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AuthUserAddRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "etcdserverpb.AuthUserAddRequest.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_password(), ptr, ctx, "etcdserverpb.AuthUserAddRequest.password");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .authpb.UserAddOptions options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthUserAddRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserAddRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserAddRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserAddRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // .authpb.UserAddOptions options = 3;
  if (this->has_options()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserAddRequest)
  return target;
}

size_t AuthUserAddRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserAddRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // .authpb.UserAddOptions options = 3;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthUserAddRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserAddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserAddRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthUserAddRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserAddRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserAddRequest)
    MergeFrom(*source);
  }
}

void AuthUserAddRequest::MergeFrom(const AuthUserAddRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserAddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_options()) {
    _internal_mutable_options()->::authpb::UserAddOptions::MergeFrom(from._internal_options());
  }
}

void AuthUserAddRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserAddRequest::CopyFrom(const AuthUserAddRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserAddRequest::IsInitialized() const {
  return true;
}

void AuthUserAddRequest::InternalSwap(AuthUserAddRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthUserAddRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthUserGetRequest::InitAsDefaultInstance() {
}
class AuthUserGetRequest::_Internal {
 public:
};

AuthUserGetRequest::AuthUserGetRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserGetRequest)
}
AuthUserGetRequest::AuthUserGetRequest(const AuthUserGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserGetRequest)
}

void AuthUserGetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthUserGetRequest_rpc_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AuthUserGetRequest::~AuthUserGetRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserGetRequest)
  SharedDtor();
}

void AuthUserGetRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthUserGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthUserGetRequest& AuthUserGetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthUserGetRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthUserGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AuthUserGetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "etcdserverpb.AuthUserGetRequest.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthUserGetRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserGetRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserGetRequest)
  return target;
}

size_t AuthUserGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserGetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthUserGetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserGetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthUserGetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserGetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserGetRequest)
    MergeFrom(*source);
  }
}

void AuthUserGetRequest::MergeFrom(const AuthUserGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void AuthUserGetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserGetRequest::CopyFrom(const AuthUserGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserGetRequest::IsInitialized() const {
  return true;
}

void AuthUserGetRequest::InternalSwap(AuthUserGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthUserGetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthUserDeleteRequest::InitAsDefaultInstance() {
}
class AuthUserDeleteRequest::_Internal {
 public:
};

AuthUserDeleteRequest::AuthUserDeleteRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserDeleteRequest)
}
AuthUserDeleteRequest::AuthUserDeleteRequest(const AuthUserDeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserDeleteRequest)
}

void AuthUserDeleteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthUserDeleteRequest_rpc_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AuthUserDeleteRequest::~AuthUserDeleteRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserDeleteRequest)
  SharedDtor();
}

void AuthUserDeleteRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthUserDeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthUserDeleteRequest& AuthUserDeleteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthUserDeleteRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthUserDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserDeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AuthUserDeleteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "etcdserverpb.AuthUserDeleteRequest.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthUserDeleteRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserDeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserDeleteRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserDeleteRequest)
  return target;
}

size_t AuthUserDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserDeleteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthUserDeleteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserDeleteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthUserDeleteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserDeleteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserDeleteRequest)
    MergeFrom(*source);
  }
}

void AuthUserDeleteRequest::MergeFrom(const AuthUserDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void AuthUserDeleteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserDeleteRequest::CopyFrom(const AuthUserDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserDeleteRequest::IsInitialized() const {
  return true;
}

void AuthUserDeleteRequest::InternalSwap(AuthUserDeleteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthUserDeleteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthUserChangePasswordRequest::InitAsDefaultInstance() {
}
class AuthUserChangePasswordRequest::_Internal {
 public:
};

AuthUserChangePasswordRequest::AuthUserChangePasswordRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserChangePasswordRequest)
}
AuthUserChangePasswordRequest::AuthUserChangePasswordRequest(const AuthUserChangePasswordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserChangePasswordRequest)
}

void AuthUserChangePasswordRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthUserChangePasswordRequest_rpc_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AuthUserChangePasswordRequest::~AuthUserChangePasswordRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserChangePasswordRequest)
  SharedDtor();
}

void AuthUserChangePasswordRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthUserChangePasswordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthUserChangePasswordRequest& AuthUserChangePasswordRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthUserChangePasswordRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthUserChangePasswordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserChangePasswordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AuthUserChangePasswordRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "etcdserverpb.AuthUserChangePasswordRequest.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_password(), ptr, ctx, "etcdserverpb.AuthUserChangePasswordRequest.password");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthUserChangePasswordRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserChangePasswordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserChangePasswordRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserChangePasswordRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserChangePasswordRequest)
  return target;
}

size_t AuthUserChangePasswordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserChangePasswordRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthUserChangePasswordRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserChangePasswordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserChangePasswordRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthUserChangePasswordRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserChangePasswordRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserChangePasswordRequest)
    MergeFrom(*source);
  }
}

void AuthUserChangePasswordRequest::MergeFrom(const AuthUserChangePasswordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserChangePasswordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void AuthUserChangePasswordRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserChangePasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserChangePasswordRequest::CopyFrom(const AuthUserChangePasswordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserChangePasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserChangePasswordRequest::IsInitialized() const {
  return true;
}

void AuthUserChangePasswordRequest::InternalSwap(AuthUserChangePasswordRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthUserChangePasswordRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthUserGrantRoleRequest::InitAsDefaultInstance() {
}
class AuthUserGrantRoleRequest::_Internal {
 public:
};

AuthUserGrantRoleRequest::AuthUserGrantRoleRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserGrantRoleRequest)
}
AuthUserGrantRoleRequest::AuthUserGrantRoleRequest(const AuthUserGrantRoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user().empty()) {
    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_role().empty()) {
    role_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserGrantRoleRequest)
}

void AuthUserGrantRoleRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthUserGrantRoleRequest_rpc_2eproto.base);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AuthUserGrantRoleRequest::~AuthUserGrantRoleRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserGrantRoleRequest)
  SharedDtor();
}

void AuthUserGrantRoleRequest::SharedDtor() {
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthUserGrantRoleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthUserGrantRoleRequest& AuthUserGrantRoleRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthUserGrantRoleRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthUserGrantRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserGrantRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AuthUserGrantRoleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_user(), ptr, ctx, "etcdserverpb.AuthUserGrantRoleRequest.user");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_role(), ptr, ctx, "etcdserverpb.AuthUserGrantRoleRequest.role");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthUserGrantRoleRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserGrantRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (this->user().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserGrantRoleRequest.user");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user(), target);
  }

  // string role = 2;
  if (this->role().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role().data(), static_cast<int>(this->_internal_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserGrantRoleRequest.role");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserGrantRoleRequest)
  return target;
}

size_t AuthUserGrantRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserGrantRoleRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user = 1;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // string role = 2;
  if (this->role().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthUserGrantRoleRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserGrantRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserGrantRoleRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthUserGrantRoleRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserGrantRoleRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserGrantRoleRequest)
    MergeFrom(*source);
  }
}

void AuthUserGrantRoleRequest::MergeFrom(const AuthUserGrantRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserGrantRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.role().size() > 0) {

    role_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
}

void AuthUserGrantRoleRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserGrantRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserGrantRoleRequest::CopyFrom(const AuthUserGrantRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserGrantRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserGrantRoleRequest::IsInitialized() const {
  return true;
}

void AuthUserGrantRoleRequest::InternalSwap(AuthUserGrantRoleRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_.Swap(&other->user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  role_.Swap(&other->role_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthUserGrantRoleRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthUserRevokeRoleRequest::InitAsDefaultInstance() {
}
class AuthUserRevokeRoleRequest::_Internal {
 public:
};

AuthUserRevokeRoleRequest::AuthUserRevokeRoleRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserRevokeRoleRequest)
}
AuthUserRevokeRoleRequest::AuthUserRevokeRoleRequest(const AuthUserRevokeRoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_role().empty()) {
    role_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserRevokeRoleRequest)
}

void AuthUserRevokeRoleRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthUserRevokeRoleRequest_rpc_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AuthUserRevokeRoleRequest::~AuthUserRevokeRoleRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserRevokeRoleRequest)
  SharedDtor();
}

void AuthUserRevokeRoleRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthUserRevokeRoleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthUserRevokeRoleRequest& AuthUserRevokeRoleRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthUserRevokeRoleRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthUserRevokeRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserRevokeRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AuthUserRevokeRoleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "etcdserverpb.AuthUserRevokeRoleRequest.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_role(), ptr, ctx, "etcdserverpb.AuthUserRevokeRoleRequest.role");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthUserRevokeRoleRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserRevokeRoleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserRevokeRoleRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string role = 2;
  if (this->role().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role().data(), static_cast<int>(this->_internal_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserRevokeRoleRequest.role");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserRevokeRoleRequest)
  return target;
}

size_t AuthUserRevokeRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserRevokeRoleRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string role = 2;
  if (this->role().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthUserRevokeRoleRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserRevokeRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserRevokeRoleRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthUserRevokeRoleRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserRevokeRoleRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserRevokeRoleRequest)
    MergeFrom(*source);
  }
}

void AuthUserRevokeRoleRequest::MergeFrom(const AuthUserRevokeRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserRevokeRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.role().size() > 0) {

    role_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
}

void AuthUserRevokeRoleRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserRevokeRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserRevokeRoleRequest::CopyFrom(const AuthUserRevokeRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserRevokeRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserRevokeRoleRequest::IsInitialized() const {
  return true;
}

void AuthUserRevokeRoleRequest::InternalSwap(AuthUserRevokeRoleRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  role_.Swap(&other->role_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthUserRevokeRoleRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthRoleAddRequest::InitAsDefaultInstance() {
}
class AuthRoleAddRequest::_Internal {
 public:
};

AuthRoleAddRequest::AuthRoleAddRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthRoleAddRequest)
}
AuthRoleAddRequest::AuthRoleAddRequest(const AuthRoleAddRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleAddRequest)
}

void AuthRoleAddRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthRoleAddRequest_rpc_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AuthRoleAddRequest::~AuthRoleAddRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleAddRequest)
  SharedDtor();
}

void AuthRoleAddRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthRoleAddRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthRoleAddRequest& AuthRoleAddRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthRoleAddRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthRoleAddRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleAddRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AuthRoleAddRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "etcdserverpb.AuthRoleAddRequest.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthRoleAddRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleAddRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleAddRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleAddRequest)
  return target;
}

size_t AuthRoleAddRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleAddRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthRoleAddRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthRoleAddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRoleAddRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthRoleAddRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthRoleAddRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthRoleAddRequest)
    MergeFrom(*source);
  }
}

void AuthRoleAddRequest::MergeFrom(const AuthRoleAddRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleAddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void AuthRoleAddRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthRoleAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRoleAddRequest::CopyFrom(const AuthRoleAddRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleAddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleAddRequest::IsInitialized() const {
  return true;
}

void AuthRoleAddRequest::InternalSwap(AuthRoleAddRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthRoleAddRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthRoleGetRequest::InitAsDefaultInstance() {
}
class AuthRoleGetRequest::_Internal {
 public:
};

AuthRoleGetRequest::AuthRoleGetRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthRoleGetRequest)
}
AuthRoleGetRequest::AuthRoleGetRequest(const AuthRoleGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_role().empty()) {
    role_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleGetRequest)
}

void AuthRoleGetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthRoleGetRequest_rpc_2eproto.base);
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AuthRoleGetRequest::~AuthRoleGetRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleGetRequest)
  SharedDtor();
}

void AuthRoleGetRequest::SharedDtor() {
  role_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthRoleGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthRoleGetRequest& AuthRoleGetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthRoleGetRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthRoleGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AuthRoleGetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_role(), ptr, ctx, "etcdserverpb.AuthRoleGetRequest.role");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthRoleGetRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string role = 1;
  if (this->role().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role().data(), static_cast<int>(this->_internal_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleGetRequest.role");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleGetRequest)
  return target;
}

size_t AuthRoleGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleGetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string role = 1;
  if (this->role().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthRoleGetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthRoleGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRoleGetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthRoleGetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthRoleGetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthRoleGetRequest)
    MergeFrom(*source);
  }
}

void AuthRoleGetRequest::MergeFrom(const AuthRoleGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role().size() > 0) {

    role_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
}

void AuthRoleGetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthRoleGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRoleGetRequest::CopyFrom(const AuthRoleGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleGetRequest::IsInitialized() const {
  return true;
}

void AuthRoleGetRequest::InternalSwap(AuthRoleGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  role_.Swap(&other->role_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthRoleGetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthUserListRequest::InitAsDefaultInstance() {
}
class AuthUserListRequest::_Internal {
 public:
};

AuthUserListRequest::AuthUserListRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserListRequest)
}
AuthUserListRequest::AuthUserListRequest(const AuthUserListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserListRequest)
}

void AuthUserListRequest::SharedCtor() {
}

AuthUserListRequest::~AuthUserListRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserListRequest)
  SharedDtor();
}

void AuthUserListRequest::SharedDtor() {
}

void AuthUserListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthUserListRequest& AuthUserListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthUserListRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthUserListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* AuthUserListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthUserListRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserListRequest)
  return target;
}

size_t AuthUserListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthUserListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthUserListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserListRequest)
    MergeFrom(*source);
  }
}

void AuthUserListRequest::MergeFrom(const AuthUserListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AuthUserListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserListRequest::CopyFrom(const AuthUserListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserListRequest::IsInitialized() const {
  return true;
}

void AuthUserListRequest::InternalSwap(AuthUserListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthUserListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthRoleListRequest::InitAsDefaultInstance() {
}
class AuthRoleListRequest::_Internal {
 public:
};

AuthRoleListRequest::AuthRoleListRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthRoleListRequest)
}
AuthRoleListRequest::AuthRoleListRequest(const AuthRoleListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleListRequest)
}

void AuthRoleListRequest::SharedCtor() {
}

AuthRoleListRequest::~AuthRoleListRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleListRequest)
  SharedDtor();
}

void AuthRoleListRequest::SharedDtor() {
}

void AuthRoleListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthRoleListRequest& AuthRoleListRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthRoleListRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthRoleListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* AuthRoleListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthRoleListRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleListRequest)
  return target;
}

size_t AuthRoleListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthRoleListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthRoleListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRoleListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthRoleListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthRoleListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthRoleListRequest)
    MergeFrom(*source);
  }
}

void AuthRoleListRequest::MergeFrom(const AuthRoleListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AuthRoleListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthRoleListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRoleListRequest::CopyFrom(const AuthRoleListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleListRequest::IsInitialized() const {
  return true;
}

void AuthRoleListRequest::InternalSwap(AuthRoleListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthRoleListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthRoleDeleteRequest::InitAsDefaultInstance() {
}
class AuthRoleDeleteRequest::_Internal {
 public:
};

AuthRoleDeleteRequest::AuthRoleDeleteRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthRoleDeleteRequest)
}
AuthRoleDeleteRequest::AuthRoleDeleteRequest(const AuthRoleDeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_role().empty()) {
    role_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleDeleteRequest)
}

void AuthRoleDeleteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthRoleDeleteRequest_rpc_2eproto.base);
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AuthRoleDeleteRequest::~AuthRoleDeleteRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleDeleteRequest)
  SharedDtor();
}

void AuthRoleDeleteRequest::SharedDtor() {
  role_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthRoleDeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthRoleDeleteRequest& AuthRoleDeleteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthRoleDeleteRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthRoleDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleDeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AuthRoleDeleteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_role(), ptr, ctx, "etcdserverpb.AuthRoleDeleteRequest.role");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthRoleDeleteRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleDeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string role = 1;
  if (this->role().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role().data(), static_cast<int>(this->_internal_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleDeleteRequest.role");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleDeleteRequest)
  return target;
}

size_t AuthRoleDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleDeleteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string role = 1;
  if (this->role().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthRoleDeleteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthRoleDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRoleDeleteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthRoleDeleteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthRoleDeleteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthRoleDeleteRequest)
    MergeFrom(*source);
  }
}

void AuthRoleDeleteRequest::MergeFrom(const AuthRoleDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role().size() > 0) {

    role_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
}

void AuthRoleDeleteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthRoleDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRoleDeleteRequest::CopyFrom(const AuthRoleDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleDeleteRequest::IsInitialized() const {
  return true;
}

void AuthRoleDeleteRequest::InternalSwap(AuthRoleDeleteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  role_.Swap(&other->role_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthRoleDeleteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthRoleGrantPermissionRequest::InitAsDefaultInstance() {
  ::etcdserverpb::_AuthRoleGrantPermissionRequest_default_instance_._instance.get_mutable()->perm_ = const_cast< ::authpb::Permission*>(
      ::authpb::Permission::internal_default_instance());
}
class AuthRoleGrantPermissionRequest::_Internal {
 public:
  static const ::authpb::Permission& perm(const AuthRoleGrantPermissionRequest* msg);
};

const ::authpb::Permission&
AuthRoleGrantPermissionRequest::_Internal::perm(const AuthRoleGrantPermissionRequest* msg) {
  return *msg->perm_;
}
void AuthRoleGrantPermissionRequest::clear_perm() {
  if (GetArenaNoVirtual() == nullptr && perm_ != nullptr) {
    delete perm_;
  }
  perm_ = nullptr;
}
AuthRoleGrantPermissionRequest::AuthRoleGrantPermissionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthRoleGrantPermissionRequest)
}
AuthRoleGrantPermissionRequest::AuthRoleGrantPermissionRequest(const AuthRoleGrantPermissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_perm()) {
    perm_ = new ::authpb::Permission(*from.perm_);
  } else {
    perm_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleGrantPermissionRequest)
}

void AuthRoleGrantPermissionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthRoleGrantPermissionRequest_rpc_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  perm_ = nullptr;
}

AuthRoleGrantPermissionRequest::~AuthRoleGrantPermissionRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleGrantPermissionRequest)
  SharedDtor();
}

void AuthRoleGrantPermissionRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete perm_;
}

void AuthRoleGrantPermissionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthRoleGrantPermissionRequest& AuthRoleGrantPermissionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthRoleGrantPermissionRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthRoleGrantPermissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleGrantPermissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && perm_ != nullptr) {
    delete perm_;
  }
  perm_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AuthRoleGrantPermissionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "etcdserverpb.AuthRoleGrantPermissionRequest.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .authpb.Permission perm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_perm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthRoleGrantPermissionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleGrantPermissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleGrantPermissionRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .authpb.Permission perm = 2;
  if (this->has_perm()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::perm(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleGrantPermissionRequest)
  return target;
}

size_t AuthRoleGrantPermissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleGrantPermissionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .authpb.Permission perm = 2;
  if (this->has_perm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *perm_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthRoleGrantPermissionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthRoleGrantPermissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRoleGrantPermissionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthRoleGrantPermissionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthRoleGrantPermissionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthRoleGrantPermissionRequest)
    MergeFrom(*source);
  }
}

void AuthRoleGrantPermissionRequest::MergeFrom(const AuthRoleGrantPermissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleGrantPermissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_perm()) {
    _internal_mutable_perm()->::authpb::Permission::MergeFrom(from._internal_perm());
  }
}

void AuthRoleGrantPermissionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthRoleGrantPermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRoleGrantPermissionRequest::CopyFrom(const AuthRoleGrantPermissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleGrantPermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleGrantPermissionRequest::IsInitialized() const {
  return true;
}

void AuthRoleGrantPermissionRequest::InternalSwap(AuthRoleGrantPermissionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(perm_, other->perm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthRoleGrantPermissionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthRoleRevokePermissionRequest::InitAsDefaultInstance() {
}
class AuthRoleRevokePermissionRequest::_Internal {
 public:
};

AuthRoleRevokePermissionRequest::AuthRoleRevokePermissionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthRoleRevokePermissionRequest)
}
AuthRoleRevokePermissionRequest::AuthRoleRevokePermissionRequest(const AuthRoleRevokePermissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_role().empty()) {
    role_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  range_end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_range_end().empty()) {
    range_end_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.range_end_);
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleRevokePermissionRequest)
}

void AuthRoleRevokePermissionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthRoleRevokePermissionRequest_rpc_2eproto.base);
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  range_end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AuthRoleRevokePermissionRequest::~AuthRoleRevokePermissionRequest() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleRevokePermissionRequest)
  SharedDtor();
}

void AuthRoleRevokePermissionRequest::SharedDtor() {
  role_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  range_end_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthRoleRevokePermissionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthRoleRevokePermissionRequest& AuthRoleRevokePermissionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthRoleRevokePermissionRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthRoleRevokePermissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleRevokePermissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  range_end_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AuthRoleRevokePermissionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_role(), ptr, ctx, "etcdserverpb.AuthRoleRevokePermissionRequest.role");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes range_end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_range_end(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthRoleRevokePermissionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleRevokePermissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string role = 1;
  if (this->role().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role().data(), static_cast<int>(this->_internal_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleRevokePermissionRequest.role");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_role(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // bytes range_end = 3;
  if (this->range_end().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_range_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleRevokePermissionRequest)
  return target;
}

size_t AuthRoleRevokePermissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleRevokePermissionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string role = 1;
  if (this->role().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role());
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes range_end = 3;
  if (this->range_end().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_range_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthRoleRevokePermissionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthRoleRevokePermissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRoleRevokePermissionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthRoleRevokePermissionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthRoleRevokePermissionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthRoleRevokePermissionRequest)
    MergeFrom(*source);
  }
}

void AuthRoleRevokePermissionRequest::MergeFrom(const AuthRoleRevokePermissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleRevokePermissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role().size() > 0) {

    role_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.range_end().size() > 0) {

    range_end_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.range_end_);
  }
}

void AuthRoleRevokePermissionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthRoleRevokePermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRoleRevokePermissionRequest::CopyFrom(const AuthRoleRevokePermissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleRevokePermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleRevokePermissionRequest::IsInitialized() const {
  return true;
}

void AuthRoleRevokePermissionRequest::InternalSwap(AuthRoleRevokePermissionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  role_.Swap(&other->role_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  range_end_.Swap(&other->range_end_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthRoleRevokePermissionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthEnableResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_AuthEnableResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class AuthEnableResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthEnableResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthEnableResponse::_Internal::header(const AuthEnableResponse* msg) {
  return *msg->header_;
}
AuthEnableResponse::AuthEnableResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthEnableResponse)
}
AuthEnableResponse::AuthEnableResponse(const AuthEnableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthEnableResponse)
}

void AuthEnableResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthEnableResponse_rpc_2eproto.base);
  header_ = nullptr;
}

AuthEnableResponse::~AuthEnableResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthEnableResponse)
  SharedDtor();
}

void AuthEnableResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AuthEnableResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthEnableResponse& AuthEnableResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthEnableResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthEnableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthEnableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AuthEnableResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthEnableResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthEnableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthEnableResponse)
  return target;
}

size_t AuthEnableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthEnableResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthEnableResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthEnableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthEnableResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthEnableResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthEnableResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthEnableResponse)
    MergeFrom(*source);
  }
}

void AuthEnableResponse::MergeFrom(const AuthEnableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthEnableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void AuthEnableResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthEnableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthEnableResponse::CopyFrom(const AuthEnableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthEnableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthEnableResponse::IsInitialized() const {
  return true;
}

void AuthEnableResponse::InternalSwap(AuthEnableResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthEnableResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthDisableResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_AuthDisableResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class AuthDisableResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthDisableResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthDisableResponse::_Internal::header(const AuthDisableResponse* msg) {
  return *msg->header_;
}
AuthDisableResponse::AuthDisableResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthDisableResponse)
}
AuthDisableResponse::AuthDisableResponse(const AuthDisableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthDisableResponse)
}

void AuthDisableResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthDisableResponse_rpc_2eproto.base);
  header_ = nullptr;
}

AuthDisableResponse::~AuthDisableResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthDisableResponse)
  SharedDtor();
}

void AuthDisableResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AuthDisableResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthDisableResponse& AuthDisableResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthDisableResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthDisableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthDisableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AuthDisableResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthDisableResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthDisableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthDisableResponse)
  return target;
}

size_t AuthDisableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthDisableResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthDisableResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthDisableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthDisableResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthDisableResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthDisableResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthDisableResponse)
    MergeFrom(*source);
  }
}

void AuthDisableResponse::MergeFrom(const AuthDisableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthDisableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void AuthDisableResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthDisableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthDisableResponse::CopyFrom(const AuthDisableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthDisableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthDisableResponse::IsInitialized() const {
  return true;
}

void AuthDisableResponse::InternalSwap(AuthDisableResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthDisableResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthenticateResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_AuthenticateResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class AuthenticateResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthenticateResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthenticateResponse::_Internal::header(const AuthenticateResponse* msg) {
  return *msg->header_;
}
AuthenticateResponse::AuthenticateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthenticateResponse)
}
AuthenticateResponse::AuthenticateResponse(const AuthenticateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthenticateResponse)
}

void AuthenticateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthenticateResponse_rpc_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_ = nullptr;
}

AuthenticateResponse::~AuthenticateResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthenticateResponse)
  SharedDtor();
}

void AuthenticateResponse::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void AuthenticateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthenticateResponse& AuthenticateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthenticateResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthenticateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthenticateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AuthenticateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_token(), ptr, ctx, "etcdserverpb.AuthenticateResponse.token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthenticateResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthenticateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthenticateResponse.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthenticateResponse)
  return target;
}

size_t AuthenticateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthenticateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthenticateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthenticateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthenticateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthenticateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthenticateResponse)
    MergeFrom(*source);
  }
}

void AuthenticateResponse::MergeFrom(const AuthenticateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthenticateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void AuthenticateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthenticateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateResponse::CopyFrom(const AuthenticateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthenticateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateResponse::IsInitialized() const {
  return true;
}

void AuthenticateResponse::InternalSwap(AuthenticateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthUserAddResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_AuthUserAddResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class AuthUserAddResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthUserAddResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthUserAddResponse::_Internal::header(const AuthUserAddResponse* msg) {
  return *msg->header_;
}
AuthUserAddResponse::AuthUserAddResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserAddResponse)
}
AuthUserAddResponse::AuthUserAddResponse(const AuthUserAddResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserAddResponse)
}

void AuthUserAddResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthUserAddResponse_rpc_2eproto.base);
  header_ = nullptr;
}

AuthUserAddResponse::~AuthUserAddResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserAddResponse)
  SharedDtor();
}

void AuthUserAddResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AuthUserAddResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthUserAddResponse& AuthUserAddResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthUserAddResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthUserAddResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserAddResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AuthUserAddResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthUserAddResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserAddResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserAddResponse)
  return target;
}

size_t AuthUserAddResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserAddResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthUserAddResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserAddResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserAddResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthUserAddResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserAddResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserAddResponse)
    MergeFrom(*source);
  }
}

void AuthUserAddResponse::MergeFrom(const AuthUserAddResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserAddResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void AuthUserAddResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserAddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserAddResponse::CopyFrom(const AuthUserAddResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserAddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserAddResponse::IsInitialized() const {
  return true;
}

void AuthUserAddResponse::InternalSwap(AuthUserAddResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthUserAddResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthUserGetResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_AuthUserGetResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class AuthUserGetResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthUserGetResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthUserGetResponse::_Internal::header(const AuthUserGetResponse* msg) {
  return *msg->header_;
}
AuthUserGetResponse::AuthUserGetResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserGetResponse)
}
AuthUserGetResponse::AuthUserGetResponse(const AuthUserGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      roles_(from.roles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserGetResponse)
}

void AuthUserGetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthUserGetResponse_rpc_2eproto.base);
  header_ = nullptr;
}

AuthUserGetResponse::~AuthUserGetResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserGetResponse)
  SharedDtor();
}

void AuthUserGetResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AuthUserGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthUserGetResponse& AuthUserGetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthUserGetResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthUserGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AuthUserGetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string roles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_roles(), ptr, ctx, "etcdserverpb.AuthUserGetResponse.roles");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthUserGetResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  // repeated string roles = 2;
  for (int i = 0, n = this->_internal_roles_size(); i < n; i++) {
    const auto& s = this->_internal_roles(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserGetResponse.roles");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserGetResponse)
  return target;
}

size_t AuthUserGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserGetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string roles = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(roles_.size());
  for (int i = 0, n = roles_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      roles_.Get(i));
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthUserGetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserGetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthUserGetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserGetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserGetResponse)
    MergeFrom(*source);
  }
}

void AuthUserGetResponse::MergeFrom(const AuthUserGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void AuthUserGetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserGetResponse::CopyFrom(const AuthUserGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserGetResponse::IsInitialized() const {
  return true;
}

void AuthUserGetResponse::InternalSwap(AuthUserGetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthUserGetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthUserDeleteResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_AuthUserDeleteResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class AuthUserDeleteResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthUserDeleteResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthUserDeleteResponse::_Internal::header(const AuthUserDeleteResponse* msg) {
  return *msg->header_;
}
AuthUserDeleteResponse::AuthUserDeleteResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserDeleteResponse)
}
AuthUserDeleteResponse::AuthUserDeleteResponse(const AuthUserDeleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserDeleteResponse)
}

void AuthUserDeleteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthUserDeleteResponse_rpc_2eproto.base);
  header_ = nullptr;
}

AuthUserDeleteResponse::~AuthUserDeleteResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserDeleteResponse)
  SharedDtor();
}

void AuthUserDeleteResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AuthUserDeleteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthUserDeleteResponse& AuthUserDeleteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthUserDeleteResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthUserDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserDeleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AuthUserDeleteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthUserDeleteResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserDeleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserDeleteResponse)
  return target;
}

size_t AuthUserDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserDeleteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthUserDeleteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserDeleteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthUserDeleteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserDeleteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserDeleteResponse)
    MergeFrom(*source);
  }
}

void AuthUserDeleteResponse::MergeFrom(const AuthUserDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void AuthUserDeleteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserDeleteResponse::CopyFrom(const AuthUserDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserDeleteResponse::IsInitialized() const {
  return true;
}

void AuthUserDeleteResponse::InternalSwap(AuthUserDeleteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthUserDeleteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthUserChangePasswordResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_AuthUserChangePasswordResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class AuthUserChangePasswordResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthUserChangePasswordResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthUserChangePasswordResponse::_Internal::header(const AuthUserChangePasswordResponse* msg) {
  return *msg->header_;
}
AuthUserChangePasswordResponse::AuthUserChangePasswordResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserChangePasswordResponse)
}
AuthUserChangePasswordResponse::AuthUserChangePasswordResponse(const AuthUserChangePasswordResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserChangePasswordResponse)
}

void AuthUserChangePasswordResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthUserChangePasswordResponse_rpc_2eproto.base);
  header_ = nullptr;
}

AuthUserChangePasswordResponse::~AuthUserChangePasswordResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserChangePasswordResponse)
  SharedDtor();
}

void AuthUserChangePasswordResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AuthUserChangePasswordResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthUserChangePasswordResponse& AuthUserChangePasswordResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthUserChangePasswordResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthUserChangePasswordResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserChangePasswordResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AuthUserChangePasswordResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthUserChangePasswordResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserChangePasswordResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserChangePasswordResponse)
  return target;
}

size_t AuthUserChangePasswordResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserChangePasswordResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthUserChangePasswordResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserChangePasswordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserChangePasswordResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthUserChangePasswordResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserChangePasswordResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserChangePasswordResponse)
    MergeFrom(*source);
  }
}

void AuthUserChangePasswordResponse::MergeFrom(const AuthUserChangePasswordResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserChangePasswordResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void AuthUserChangePasswordResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserChangePasswordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserChangePasswordResponse::CopyFrom(const AuthUserChangePasswordResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserChangePasswordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserChangePasswordResponse::IsInitialized() const {
  return true;
}

void AuthUserChangePasswordResponse::InternalSwap(AuthUserChangePasswordResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthUserChangePasswordResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthUserGrantRoleResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_AuthUserGrantRoleResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class AuthUserGrantRoleResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthUserGrantRoleResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthUserGrantRoleResponse::_Internal::header(const AuthUserGrantRoleResponse* msg) {
  return *msg->header_;
}
AuthUserGrantRoleResponse::AuthUserGrantRoleResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserGrantRoleResponse)
}
AuthUserGrantRoleResponse::AuthUserGrantRoleResponse(const AuthUserGrantRoleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserGrantRoleResponse)
}

void AuthUserGrantRoleResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthUserGrantRoleResponse_rpc_2eproto.base);
  header_ = nullptr;
}

AuthUserGrantRoleResponse::~AuthUserGrantRoleResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserGrantRoleResponse)
  SharedDtor();
}

void AuthUserGrantRoleResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AuthUserGrantRoleResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthUserGrantRoleResponse& AuthUserGrantRoleResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthUserGrantRoleResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthUserGrantRoleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserGrantRoleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AuthUserGrantRoleResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthUserGrantRoleResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserGrantRoleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserGrantRoleResponse)
  return target;
}

size_t AuthUserGrantRoleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserGrantRoleResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthUserGrantRoleResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserGrantRoleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserGrantRoleResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthUserGrantRoleResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserGrantRoleResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserGrantRoleResponse)
    MergeFrom(*source);
  }
}

void AuthUserGrantRoleResponse::MergeFrom(const AuthUserGrantRoleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserGrantRoleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void AuthUserGrantRoleResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserGrantRoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserGrantRoleResponse::CopyFrom(const AuthUserGrantRoleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserGrantRoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserGrantRoleResponse::IsInitialized() const {
  return true;
}

void AuthUserGrantRoleResponse::InternalSwap(AuthUserGrantRoleResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthUserGrantRoleResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthUserRevokeRoleResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_AuthUserRevokeRoleResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class AuthUserRevokeRoleResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthUserRevokeRoleResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthUserRevokeRoleResponse::_Internal::header(const AuthUserRevokeRoleResponse* msg) {
  return *msg->header_;
}
AuthUserRevokeRoleResponse::AuthUserRevokeRoleResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserRevokeRoleResponse)
}
AuthUserRevokeRoleResponse::AuthUserRevokeRoleResponse(const AuthUserRevokeRoleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserRevokeRoleResponse)
}

void AuthUserRevokeRoleResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthUserRevokeRoleResponse_rpc_2eproto.base);
  header_ = nullptr;
}

AuthUserRevokeRoleResponse::~AuthUserRevokeRoleResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserRevokeRoleResponse)
  SharedDtor();
}

void AuthUserRevokeRoleResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AuthUserRevokeRoleResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthUserRevokeRoleResponse& AuthUserRevokeRoleResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthUserRevokeRoleResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthUserRevokeRoleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserRevokeRoleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AuthUserRevokeRoleResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthUserRevokeRoleResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserRevokeRoleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserRevokeRoleResponse)
  return target;
}

size_t AuthUserRevokeRoleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserRevokeRoleResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthUserRevokeRoleResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserRevokeRoleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserRevokeRoleResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthUserRevokeRoleResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserRevokeRoleResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserRevokeRoleResponse)
    MergeFrom(*source);
  }
}

void AuthUserRevokeRoleResponse::MergeFrom(const AuthUserRevokeRoleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserRevokeRoleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void AuthUserRevokeRoleResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserRevokeRoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserRevokeRoleResponse::CopyFrom(const AuthUserRevokeRoleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserRevokeRoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserRevokeRoleResponse::IsInitialized() const {
  return true;
}

void AuthUserRevokeRoleResponse::InternalSwap(AuthUserRevokeRoleResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthUserRevokeRoleResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthRoleAddResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_AuthRoleAddResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class AuthRoleAddResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthRoleAddResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthRoleAddResponse::_Internal::header(const AuthRoleAddResponse* msg) {
  return *msg->header_;
}
AuthRoleAddResponse::AuthRoleAddResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthRoleAddResponse)
}
AuthRoleAddResponse::AuthRoleAddResponse(const AuthRoleAddResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleAddResponse)
}

void AuthRoleAddResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthRoleAddResponse_rpc_2eproto.base);
  header_ = nullptr;
}

AuthRoleAddResponse::~AuthRoleAddResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleAddResponse)
  SharedDtor();
}

void AuthRoleAddResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AuthRoleAddResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthRoleAddResponse& AuthRoleAddResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthRoleAddResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthRoleAddResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleAddResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AuthRoleAddResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthRoleAddResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleAddResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleAddResponse)
  return target;
}

size_t AuthRoleAddResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleAddResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthRoleAddResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthRoleAddResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRoleAddResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthRoleAddResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthRoleAddResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthRoleAddResponse)
    MergeFrom(*source);
  }
}

void AuthRoleAddResponse::MergeFrom(const AuthRoleAddResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleAddResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void AuthRoleAddResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthRoleAddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRoleAddResponse::CopyFrom(const AuthRoleAddResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleAddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleAddResponse::IsInitialized() const {
  return true;
}

void AuthRoleAddResponse::InternalSwap(AuthRoleAddResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthRoleAddResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthRoleGetResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_AuthRoleGetResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class AuthRoleGetResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthRoleGetResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthRoleGetResponse::_Internal::header(const AuthRoleGetResponse* msg) {
  return *msg->header_;
}
void AuthRoleGetResponse::clear_perm() {
  perm_.Clear();
}
AuthRoleGetResponse::AuthRoleGetResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthRoleGetResponse)
}
AuthRoleGetResponse::AuthRoleGetResponse(const AuthRoleGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      perm_(from.perm_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleGetResponse)
}

void AuthRoleGetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthRoleGetResponse_rpc_2eproto.base);
  header_ = nullptr;
}

AuthRoleGetResponse::~AuthRoleGetResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleGetResponse)
  SharedDtor();
}

void AuthRoleGetResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AuthRoleGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthRoleGetResponse& AuthRoleGetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthRoleGetResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthRoleGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  perm_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AuthRoleGetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .authpb.Permission perm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_perm(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthRoleGetResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  // repeated .authpb.Permission perm = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_perm_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_perm(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleGetResponse)
  return target;
}

size_t AuthRoleGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleGetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .authpb.Permission perm = 2;
  total_size += 1UL * this->_internal_perm_size();
  for (const auto& msg : this->perm_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthRoleGetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthRoleGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRoleGetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthRoleGetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthRoleGetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthRoleGetResponse)
    MergeFrom(*source);
  }
}

void AuthRoleGetResponse::MergeFrom(const AuthRoleGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  perm_.MergeFrom(from.perm_);
  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void AuthRoleGetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthRoleGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRoleGetResponse::CopyFrom(const AuthRoleGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleGetResponse::IsInitialized() const {
  return true;
}

void AuthRoleGetResponse::InternalSwap(AuthRoleGetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  perm_.InternalSwap(&other->perm_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthRoleGetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthRoleListResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_AuthRoleListResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class AuthRoleListResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthRoleListResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthRoleListResponse::_Internal::header(const AuthRoleListResponse* msg) {
  return *msg->header_;
}
AuthRoleListResponse::AuthRoleListResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthRoleListResponse)
}
AuthRoleListResponse::AuthRoleListResponse(const AuthRoleListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      roles_(from.roles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleListResponse)
}

void AuthRoleListResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthRoleListResponse_rpc_2eproto.base);
  header_ = nullptr;
}

AuthRoleListResponse::~AuthRoleListResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleListResponse)
  SharedDtor();
}

void AuthRoleListResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AuthRoleListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthRoleListResponse& AuthRoleListResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthRoleListResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthRoleListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AuthRoleListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string roles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_roles(), ptr, ctx, "etcdserverpb.AuthRoleListResponse.roles");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthRoleListResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  // repeated string roles = 2;
  for (int i = 0, n = this->_internal_roles_size(); i < n; i++) {
    const auto& s = this->_internal_roles(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthRoleListResponse.roles");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleListResponse)
  return target;
}

size_t AuthRoleListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string roles = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(roles_.size());
  for (int i = 0, n = roles_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      roles_.Get(i));
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthRoleListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthRoleListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRoleListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthRoleListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthRoleListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthRoleListResponse)
    MergeFrom(*source);
  }
}

void AuthRoleListResponse::MergeFrom(const AuthRoleListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void AuthRoleListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthRoleListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRoleListResponse::CopyFrom(const AuthRoleListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleListResponse::IsInitialized() const {
  return true;
}

void AuthRoleListResponse::InternalSwap(AuthRoleListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthRoleListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthUserListResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_AuthUserListResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class AuthUserListResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthUserListResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthUserListResponse::_Internal::header(const AuthUserListResponse* msg) {
  return *msg->header_;
}
AuthUserListResponse::AuthUserListResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthUserListResponse)
}
AuthUserListResponse::AuthUserListResponse(const AuthUserListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      users_(from.users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthUserListResponse)
}

void AuthUserListResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthUserListResponse_rpc_2eproto.base);
  header_ = nullptr;
}

AuthUserListResponse::~AuthUserListResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthUserListResponse)
  SharedDtor();
}

void AuthUserListResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AuthUserListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthUserListResponse& AuthUserListResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthUserListResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthUserListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthUserListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AuthUserListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string users = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_users(), ptr, ctx, "etcdserverpb.AuthUserListResponse.users");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthUserListResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthUserListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  // repeated string users = 2;
  for (int i = 0, n = this->_internal_users_size(); i < n; i++) {
    const auto& s = this->_internal_users(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "etcdserverpb.AuthUserListResponse.users");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthUserListResponse)
  return target;
}

size_t AuthUserListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthUserListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string users = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(users_.size());
  for (int i = 0, n = users_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      users_.Get(i));
  }

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthUserListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthUserListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthUserListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthUserListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthUserListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthUserListResponse)
    MergeFrom(*source);
  }
}

void AuthUserListResponse::MergeFrom(const AuthUserListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthUserListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void AuthUserListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthUserListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthUserListResponse::CopyFrom(const AuthUserListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthUserListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthUserListResponse::IsInitialized() const {
  return true;
}

void AuthUserListResponse::InternalSwap(AuthUserListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  users_.InternalSwap(&other->users_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthUserListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthRoleDeleteResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_AuthRoleDeleteResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class AuthRoleDeleteResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthRoleDeleteResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthRoleDeleteResponse::_Internal::header(const AuthRoleDeleteResponse* msg) {
  return *msg->header_;
}
AuthRoleDeleteResponse::AuthRoleDeleteResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthRoleDeleteResponse)
}
AuthRoleDeleteResponse::AuthRoleDeleteResponse(const AuthRoleDeleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleDeleteResponse)
}

void AuthRoleDeleteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthRoleDeleteResponse_rpc_2eproto.base);
  header_ = nullptr;
}

AuthRoleDeleteResponse::~AuthRoleDeleteResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleDeleteResponse)
  SharedDtor();
}

void AuthRoleDeleteResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AuthRoleDeleteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthRoleDeleteResponse& AuthRoleDeleteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthRoleDeleteResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthRoleDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleDeleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AuthRoleDeleteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthRoleDeleteResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleDeleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleDeleteResponse)
  return target;
}

size_t AuthRoleDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleDeleteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthRoleDeleteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthRoleDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRoleDeleteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthRoleDeleteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthRoleDeleteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthRoleDeleteResponse)
    MergeFrom(*source);
  }
}

void AuthRoleDeleteResponse::MergeFrom(const AuthRoleDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void AuthRoleDeleteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthRoleDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRoleDeleteResponse::CopyFrom(const AuthRoleDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleDeleteResponse::IsInitialized() const {
  return true;
}

void AuthRoleDeleteResponse::InternalSwap(AuthRoleDeleteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthRoleDeleteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthRoleGrantPermissionResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_AuthRoleGrantPermissionResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class AuthRoleGrantPermissionResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthRoleGrantPermissionResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthRoleGrantPermissionResponse::_Internal::header(const AuthRoleGrantPermissionResponse* msg) {
  return *msg->header_;
}
AuthRoleGrantPermissionResponse::AuthRoleGrantPermissionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthRoleGrantPermissionResponse)
}
AuthRoleGrantPermissionResponse::AuthRoleGrantPermissionResponse(const AuthRoleGrantPermissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleGrantPermissionResponse)
}

void AuthRoleGrantPermissionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthRoleGrantPermissionResponse_rpc_2eproto.base);
  header_ = nullptr;
}

AuthRoleGrantPermissionResponse::~AuthRoleGrantPermissionResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleGrantPermissionResponse)
  SharedDtor();
}

void AuthRoleGrantPermissionResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AuthRoleGrantPermissionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthRoleGrantPermissionResponse& AuthRoleGrantPermissionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthRoleGrantPermissionResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthRoleGrantPermissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleGrantPermissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AuthRoleGrantPermissionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthRoleGrantPermissionResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleGrantPermissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleGrantPermissionResponse)
  return target;
}

size_t AuthRoleGrantPermissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleGrantPermissionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthRoleGrantPermissionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthRoleGrantPermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRoleGrantPermissionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthRoleGrantPermissionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthRoleGrantPermissionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthRoleGrantPermissionResponse)
    MergeFrom(*source);
  }
}

void AuthRoleGrantPermissionResponse::MergeFrom(const AuthRoleGrantPermissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleGrantPermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void AuthRoleGrantPermissionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthRoleGrantPermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRoleGrantPermissionResponse::CopyFrom(const AuthRoleGrantPermissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleGrantPermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleGrantPermissionResponse::IsInitialized() const {
  return true;
}

void AuthRoleGrantPermissionResponse::InternalSwap(AuthRoleGrantPermissionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthRoleGrantPermissionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AuthRoleRevokePermissionResponse::InitAsDefaultInstance() {
  ::etcdserverpb::_AuthRoleRevokePermissionResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::etcdserverpb::ResponseHeader*>(
      ::etcdserverpb::ResponseHeader::internal_default_instance());
}
class AuthRoleRevokePermissionResponse::_Internal {
 public:
  static const ::etcdserverpb::ResponseHeader& header(const AuthRoleRevokePermissionResponse* msg);
};

const ::etcdserverpb::ResponseHeader&
AuthRoleRevokePermissionResponse::_Internal::header(const AuthRoleRevokePermissionResponse* msg) {
  return *msg->header_;
}
AuthRoleRevokePermissionResponse::AuthRoleRevokePermissionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:etcdserverpb.AuthRoleRevokePermissionResponse)
}
AuthRoleRevokePermissionResponse::AuthRoleRevokePermissionResponse(const AuthRoleRevokePermissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::etcdserverpb::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:etcdserverpb.AuthRoleRevokePermissionResponse)
}

void AuthRoleRevokePermissionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthRoleRevokePermissionResponse_rpc_2eproto.base);
  header_ = nullptr;
}

AuthRoleRevokePermissionResponse::~AuthRoleRevokePermissionResponse() {
  // @@protoc_insertion_point(destructor:etcdserverpb.AuthRoleRevokePermissionResponse)
  SharedDtor();
}

void AuthRoleRevokePermissionResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AuthRoleRevokePermissionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthRoleRevokePermissionResponse& AuthRoleRevokePermissionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthRoleRevokePermissionResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void AuthRoleRevokePermissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:etcdserverpb.AuthRoleRevokePermissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AuthRoleRevokePermissionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .etcdserverpb.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthRoleRevokePermissionResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:etcdserverpb.AuthRoleRevokePermissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:etcdserverpb.AuthRoleRevokePermissionResponse)
  return target;
}

size_t AuthRoleRevokePermissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:etcdserverpb.AuthRoleRevokePermissionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .etcdserverpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthRoleRevokePermissionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:etcdserverpb.AuthRoleRevokePermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRoleRevokePermissionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthRoleRevokePermissionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:etcdserverpb.AuthRoleRevokePermissionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:etcdserverpb.AuthRoleRevokePermissionResponse)
    MergeFrom(*source);
  }
}

void AuthRoleRevokePermissionResponse::MergeFrom(const AuthRoleRevokePermissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:etcdserverpb.AuthRoleRevokePermissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::etcdserverpb::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void AuthRoleRevokePermissionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:etcdserverpb.AuthRoleRevokePermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRoleRevokePermissionResponse::CopyFrom(const AuthRoleRevokePermissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:etcdserverpb.AuthRoleRevokePermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRoleRevokePermissionResponse::IsInitialized() const {
  return true;
}

void AuthRoleRevokePermissionResponse::InternalSwap(AuthRoleRevokePermissionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthRoleRevokePermissionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace etcdserverpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::etcdserverpb::ResponseHeader* Arena::CreateMaybeMessage< ::etcdserverpb::ResponseHeader >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::ResponseHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::RangeRequest* Arena::CreateMaybeMessage< ::etcdserverpb::RangeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::RangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::RangeResponse* Arena::CreateMaybeMessage< ::etcdserverpb::RangeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::RangeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::PutRequest* Arena::CreateMaybeMessage< ::etcdserverpb::PutRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::PutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::PutResponse* Arena::CreateMaybeMessage< ::etcdserverpb::PutResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::PutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::DeleteRangeRequest* Arena::CreateMaybeMessage< ::etcdserverpb::DeleteRangeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::DeleteRangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::DeleteRangeResponse* Arena::CreateMaybeMessage< ::etcdserverpb::DeleteRangeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::DeleteRangeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::RequestOp* Arena::CreateMaybeMessage< ::etcdserverpb::RequestOp >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::RequestOp >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::ResponseOp* Arena::CreateMaybeMessage< ::etcdserverpb::ResponseOp >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::ResponseOp >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::Compare* Arena::CreateMaybeMessage< ::etcdserverpb::Compare >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::Compare >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::TxnRequest* Arena::CreateMaybeMessage< ::etcdserverpb::TxnRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::TxnRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::TxnResponse* Arena::CreateMaybeMessage< ::etcdserverpb::TxnResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::TxnResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::CompactionRequest* Arena::CreateMaybeMessage< ::etcdserverpb::CompactionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::CompactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::CompactionResponse* Arena::CreateMaybeMessage< ::etcdserverpb::CompactionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::CompactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::HashRequest* Arena::CreateMaybeMessage< ::etcdserverpb::HashRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::HashRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::HashKVRequest* Arena::CreateMaybeMessage< ::etcdserverpb::HashKVRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::HashKVRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::HashKVResponse* Arena::CreateMaybeMessage< ::etcdserverpb::HashKVResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::HashKVResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::HashResponse* Arena::CreateMaybeMessage< ::etcdserverpb::HashResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::HashResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::SnapshotRequest* Arena::CreateMaybeMessage< ::etcdserverpb::SnapshotRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::SnapshotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::SnapshotResponse* Arena::CreateMaybeMessage< ::etcdserverpb::SnapshotResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::SnapshotResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::WatchRequest* Arena::CreateMaybeMessage< ::etcdserverpb::WatchRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::WatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::WatchCreateRequest* Arena::CreateMaybeMessage< ::etcdserverpb::WatchCreateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::WatchCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::WatchCancelRequest* Arena::CreateMaybeMessage< ::etcdserverpb::WatchCancelRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::WatchCancelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::WatchProgressRequest* Arena::CreateMaybeMessage< ::etcdserverpb::WatchProgressRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::WatchProgressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::WatchResponse* Arena::CreateMaybeMessage< ::etcdserverpb::WatchResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::WatchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::LeaseGrantRequest* Arena::CreateMaybeMessage< ::etcdserverpb::LeaseGrantRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::LeaseGrantRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::LeaseGrantResponse* Arena::CreateMaybeMessage< ::etcdserverpb::LeaseGrantResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::LeaseGrantResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::LeaseRevokeRequest* Arena::CreateMaybeMessage< ::etcdserverpb::LeaseRevokeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::LeaseRevokeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::LeaseRevokeResponse* Arena::CreateMaybeMessage< ::etcdserverpb::LeaseRevokeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::LeaseRevokeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::LeaseCheckpoint* Arena::CreateMaybeMessage< ::etcdserverpb::LeaseCheckpoint >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::LeaseCheckpoint >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::LeaseCheckpointRequest* Arena::CreateMaybeMessage< ::etcdserverpb::LeaseCheckpointRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::LeaseCheckpointRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::LeaseCheckpointResponse* Arena::CreateMaybeMessage< ::etcdserverpb::LeaseCheckpointResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::LeaseCheckpointResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::LeaseKeepAliveRequest* Arena::CreateMaybeMessage< ::etcdserverpb::LeaseKeepAliveRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::LeaseKeepAliveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::LeaseKeepAliveResponse* Arena::CreateMaybeMessage< ::etcdserverpb::LeaseKeepAliveResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::LeaseKeepAliveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::LeaseTimeToLiveRequest* Arena::CreateMaybeMessage< ::etcdserverpb::LeaseTimeToLiveRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::LeaseTimeToLiveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::LeaseTimeToLiveResponse* Arena::CreateMaybeMessage< ::etcdserverpb::LeaseTimeToLiveResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::LeaseTimeToLiveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::LeaseLeasesRequest* Arena::CreateMaybeMessage< ::etcdserverpb::LeaseLeasesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::LeaseLeasesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::LeaseStatus* Arena::CreateMaybeMessage< ::etcdserverpb::LeaseStatus >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::LeaseStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::LeaseLeasesResponse* Arena::CreateMaybeMessage< ::etcdserverpb::LeaseLeasesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::LeaseLeasesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::Member* Arena::CreateMaybeMessage< ::etcdserverpb::Member >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::Member >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::MemberAddRequest* Arena::CreateMaybeMessage< ::etcdserverpb::MemberAddRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::MemberAddRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::MemberAddResponse* Arena::CreateMaybeMessage< ::etcdserverpb::MemberAddResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::MemberAddResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::MemberRemoveRequest* Arena::CreateMaybeMessage< ::etcdserverpb::MemberRemoveRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::MemberRemoveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::MemberRemoveResponse* Arena::CreateMaybeMessage< ::etcdserverpb::MemberRemoveResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::MemberRemoveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::MemberUpdateRequest* Arena::CreateMaybeMessage< ::etcdserverpb::MemberUpdateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::MemberUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::MemberUpdateResponse* Arena::CreateMaybeMessage< ::etcdserverpb::MemberUpdateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::MemberUpdateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::MemberListRequest* Arena::CreateMaybeMessage< ::etcdserverpb::MemberListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::MemberListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::MemberListResponse* Arena::CreateMaybeMessage< ::etcdserverpb::MemberListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::MemberListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::MemberPromoteRequest* Arena::CreateMaybeMessage< ::etcdserverpb::MemberPromoteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::MemberPromoteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::MemberPromoteResponse* Arena::CreateMaybeMessage< ::etcdserverpb::MemberPromoteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::MemberPromoteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::DefragmentRequest* Arena::CreateMaybeMessage< ::etcdserverpb::DefragmentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::DefragmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::DefragmentResponse* Arena::CreateMaybeMessage< ::etcdserverpb::DefragmentResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::DefragmentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::MoveLeaderRequest* Arena::CreateMaybeMessage< ::etcdserverpb::MoveLeaderRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::MoveLeaderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::MoveLeaderResponse* Arena::CreateMaybeMessage< ::etcdserverpb::MoveLeaderResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::MoveLeaderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AlarmRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AlarmRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AlarmRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AlarmMember* Arena::CreateMaybeMessage< ::etcdserverpb::AlarmMember >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AlarmMember >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AlarmResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AlarmResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AlarmResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::StatusRequest* Arena::CreateMaybeMessage< ::etcdserverpb::StatusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::StatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::StatusResponse* Arena::CreateMaybeMessage< ::etcdserverpb::StatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::StatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthEnableRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthEnableRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthEnableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthDisableRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthDisableRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthDisableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthenticateRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthenticateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthenticateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserAddRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserAddRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthUserAddRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserGetRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserGetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthUserGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserDeleteRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserDeleteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthUserDeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserChangePasswordRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserChangePasswordRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthUserChangePasswordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserGrantRoleRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserGrantRoleRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthUserGrantRoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserRevokeRoleRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserRevokeRoleRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthUserRevokeRoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthRoleAddRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthRoleAddRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthRoleAddRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthRoleGetRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthRoleGetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthRoleGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserListRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthUserListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthRoleListRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthRoleListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthRoleListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthRoleDeleteRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthRoleDeleteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthRoleDeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthRoleGrantPermissionRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthRoleGrantPermissionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthRoleGrantPermissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthRoleRevokePermissionRequest* Arena::CreateMaybeMessage< ::etcdserverpb::AuthRoleRevokePermissionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthRoleRevokePermissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthEnableResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthEnableResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthEnableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthDisableResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthDisableResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthDisableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthenticateResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthenticateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthenticateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserAddResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserAddResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthUserAddResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserGetResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserGetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthUserGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserDeleteResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserDeleteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthUserDeleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserChangePasswordResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserChangePasswordResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthUserChangePasswordResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserGrantRoleResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserGrantRoleResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthUserGrantRoleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserRevokeRoleResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserRevokeRoleResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthUserRevokeRoleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthRoleAddResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthRoleAddResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthRoleAddResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthRoleGetResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthRoleGetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthRoleGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthRoleListResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthRoleListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthRoleListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthUserListResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthUserListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthUserListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthRoleDeleteResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthRoleDeleteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthRoleDeleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthRoleGrantPermissionResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthRoleGrantPermissionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthRoleGrantPermissionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::etcdserverpb::AuthRoleRevokePermissionResponse* Arena::CreateMaybeMessage< ::etcdserverpb::AuthRoleRevokePermissionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::etcdserverpb::AuthRoleRevokePermissionResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
