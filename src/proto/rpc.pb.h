// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "kv.pb.h"
#include "auth.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[91]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_2eproto;
namespace etcdserverpb {
class AlarmMember;
class AlarmMemberDefaultTypeInternal;
extern AlarmMemberDefaultTypeInternal _AlarmMember_default_instance_;
class AlarmRequest;
class AlarmRequestDefaultTypeInternal;
extern AlarmRequestDefaultTypeInternal _AlarmRequest_default_instance_;
class AlarmResponse;
class AlarmResponseDefaultTypeInternal;
extern AlarmResponseDefaultTypeInternal _AlarmResponse_default_instance_;
class AuthDisableRequest;
class AuthDisableRequestDefaultTypeInternal;
extern AuthDisableRequestDefaultTypeInternal _AuthDisableRequest_default_instance_;
class AuthDisableResponse;
class AuthDisableResponseDefaultTypeInternal;
extern AuthDisableResponseDefaultTypeInternal _AuthDisableResponse_default_instance_;
class AuthEnableRequest;
class AuthEnableRequestDefaultTypeInternal;
extern AuthEnableRequestDefaultTypeInternal _AuthEnableRequest_default_instance_;
class AuthEnableResponse;
class AuthEnableResponseDefaultTypeInternal;
extern AuthEnableResponseDefaultTypeInternal _AuthEnableResponse_default_instance_;
class AuthRoleAddRequest;
class AuthRoleAddRequestDefaultTypeInternal;
extern AuthRoleAddRequestDefaultTypeInternal _AuthRoleAddRequest_default_instance_;
class AuthRoleAddResponse;
class AuthRoleAddResponseDefaultTypeInternal;
extern AuthRoleAddResponseDefaultTypeInternal _AuthRoleAddResponse_default_instance_;
class AuthRoleDeleteRequest;
class AuthRoleDeleteRequestDefaultTypeInternal;
extern AuthRoleDeleteRequestDefaultTypeInternal _AuthRoleDeleteRequest_default_instance_;
class AuthRoleDeleteResponse;
class AuthRoleDeleteResponseDefaultTypeInternal;
extern AuthRoleDeleteResponseDefaultTypeInternal _AuthRoleDeleteResponse_default_instance_;
class AuthRoleGetRequest;
class AuthRoleGetRequestDefaultTypeInternal;
extern AuthRoleGetRequestDefaultTypeInternal _AuthRoleGetRequest_default_instance_;
class AuthRoleGetResponse;
class AuthRoleGetResponseDefaultTypeInternal;
extern AuthRoleGetResponseDefaultTypeInternal _AuthRoleGetResponse_default_instance_;
class AuthRoleGrantPermissionRequest;
class AuthRoleGrantPermissionRequestDefaultTypeInternal;
extern AuthRoleGrantPermissionRequestDefaultTypeInternal _AuthRoleGrantPermissionRequest_default_instance_;
class AuthRoleGrantPermissionResponse;
class AuthRoleGrantPermissionResponseDefaultTypeInternal;
extern AuthRoleGrantPermissionResponseDefaultTypeInternal _AuthRoleGrantPermissionResponse_default_instance_;
class AuthRoleListRequest;
class AuthRoleListRequestDefaultTypeInternal;
extern AuthRoleListRequestDefaultTypeInternal _AuthRoleListRequest_default_instance_;
class AuthRoleListResponse;
class AuthRoleListResponseDefaultTypeInternal;
extern AuthRoleListResponseDefaultTypeInternal _AuthRoleListResponse_default_instance_;
class AuthRoleRevokePermissionRequest;
class AuthRoleRevokePermissionRequestDefaultTypeInternal;
extern AuthRoleRevokePermissionRequestDefaultTypeInternal _AuthRoleRevokePermissionRequest_default_instance_;
class AuthRoleRevokePermissionResponse;
class AuthRoleRevokePermissionResponseDefaultTypeInternal;
extern AuthRoleRevokePermissionResponseDefaultTypeInternal _AuthRoleRevokePermissionResponse_default_instance_;
class AuthUserAddRequest;
class AuthUserAddRequestDefaultTypeInternal;
extern AuthUserAddRequestDefaultTypeInternal _AuthUserAddRequest_default_instance_;
class AuthUserAddResponse;
class AuthUserAddResponseDefaultTypeInternal;
extern AuthUserAddResponseDefaultTypeInternal _AuthUserAddResponse_default_instance_;
class AuthUserChangePasswordRequest;
class AuthUserChangePasswordRequestDefaultTypeInternal;
extern AuthUserChangePasswordRequestDefaultTypeInternal _AuthUserChangePasswordRequest_default_instance_;
class AuthUserChangePasswordResponse;
class AuthUserChangePasswordResponseDefaultTypeInternal;
extern AuthUserChangePasswordResponseDefaultTypeInternal _AuthUserChangePasswordResponse_default_instance_;
class AuthUserDeleteRequest;
class AuthUserDeleteRequestDefaultTypeInternal;
extern AuthUserDeleteRequestDefaultTypeInternal _AuthUserDeleteRequest_default_instance_;
class AuthUserDeleteResponse;
class AuthUserDeleteResponseDefaultTypeInternal;
extern AuthUserDeleteResponseDefaultTypeInternal _AuthUserDeleteResponse_default_instance_;
class AuthUserGetRequest;
class AuthUserGetRequestDefaultTypeInternal;
extern AuthUserGetRequestDefaultTypeInternal _AuthUserGetRequest_default_instance_;
class AuthUserGetResponse;
class AuthUserGetResponseDefaultTypeInternal;
extern AuthUserGetResponseDefaultTypeInternal _AuthUserGetResponse_default_instance_;
class AuthUserGrantRoleRequest;
class AuthUserGrantRoleRequestDefaultTypeInternal;
extern AuthUserGrantRoleRequestDefaultTypeInternal _AuthUserGrantRoleRequest_default_instance_;
class AuthUserGrantRoleResponse;
class AuthUserGrantRoleResponseDefaultTypeInternal;
extern AuthUserGrantRoleResponseDefaultTypeInternal _AuthUserGrantRoleResponse_default_instance_;
class AuthUserListRequest;
class AuthUserListRequestDefaultTypeInternal;
extern AuthUserListRequestDefaultTypeInternal _AuthUserListRequest_default_instance_;
class AuthUserListResponse;
class AuthUserListResponseDefaultTypeInternal;
extern AuthUserListResponseDefaultTypeInternal _AuthUserListResponse_default_instance_;
class AuthUserRevokeRoleRequest;
class AuthUserRevokeRoleRequestDefaultTypeInternal;
extern AuthUserRevokeRoleRequestDefaultTypeInternal _AuthUserRevokeRoleRequest_default_instance_;
class AuthUserRevokeRoleResponse;
class AuthUserRevokeRoleResponseDefaultTypeInternal;
extern AuthUserRevokeRoleResponseDefaultTypeInternal _AuthUserRevokeRoleResponse_default_instance_;
class AuthenticateRequest;
class AuthenticateRequestDefaultTypeInternal;
extern AuthenticateRequestDefaultTypeInternal _AuthenticateRequest_default_instance_;
class AuthenticateResponse;
class AuthenticateResponseDefaultTypeInternal;
extern AuthenticateResponseDefaultTypeInternal _AuthenticateResponse_default_instance_;
class CompactionRequest;
class CompactionRequestDefaultTypeInternal;
extern CompactionRequestDefaultTypeInternal _CompactionRequest_default_instance_;
class CompactionResponse;
class CompactionResponseDefaultTypeInternal;
extern CompactionResponseDefaultTypeInternal _CompactionResponse_default_instance_;
class Compare;
class CompareDefaultTypeInternal;
extern CompareDefaultTypeInternal _Compare_default_instance_;
class DefragmentRequest;
class DefragmentRequestDefaultTypeInternal;
extern DefragmentRequestDefaultTypeInternal _DefragmentRequest_default_instance_;
class DefragmentResponse;
class DefragmentResponseDefaultTypeInternal;
extern DefragmentResponseDefaultTypeInternal _DefragmentResponse_default_instance_;
class DeleteRangeRequest;
class DeleteRangeRequestDefaultTypeInternal;
extern DeleteRangeRequestDefaultTypeInternal _DeleteRangeRequest_default_instance_;
class DeleteRangeResponse;
class DeleteRangeResponseDefaultTypeInternal;
extern DeleteRangeResponseDefaultTypeInternal _DeleteRangeResponse_default_instance_;
class HashKVRequest;
class HashKVRequestDefaultTypeInternal;
extern HashKVRequestDefaultTypeInternal _HashKVRequest_default_instance_;
class HashKVResponse;
class HashKVResponseDefaultTypeInternal;
extern HashKVResponseDefaultTypeInternal _HashKVResponse_default_instance_;
class HashRequest;
class HashRequestDefaultTypeInternal;
extern HashRequestDefaultTypeInternal _HashRequest_default_instance_;
class HashResponse;
class HashResponseDefaultTypeInternal;
extern HashResponseDefaultTypeInternal _HashResponse_default_instance_;
class LeaseCheckpoint;
class LeaseCheckpointDefaultTypeInternal;
extern LeaseCheckpointDefaultTypeInternal _LeaseCheckpoint_default_instance_;
class LeaseCheckpointRequest;
class LeaseCheckpointRequestDefaultTypeInternal;
extern LeaseCheckpointRequestDefaultTypeInternal _LeaseCheckpointRequest_default_instance_;
class LeaseCheckpointResponse;
class LeaseCheckpointResponseDefaultTypeInternal;
extern LeaseCheckpointResponseDefaultTypeInternal _LeaseCheckpointResponse_default_instance_;
class LeaseGrantRequest;
class LeaseGrantRequestDefaultTypeInternal;
extern LeaseGrantRequestDefaultTypeInternal _LeaseGrantRequest_default_instance_;
class LeaseGrantResponse;
class LeaseGrantResponseDefaultTypeInternal;
extern LeaseGrantResponseDefaultTypeInternal _LeaseGrantResponse_default_instance_;
class LeaseKeepAliveRequest;
class LeaseKeepAliveRequestDefaultTypeInternal;
extern LeaseKeepAliveRequestDefaultTypeInternal _LeaseKeepAliveRequest_default_instance_;
class LeaseKeepAliveResponse;
class LeaseKeepAliveResponseDefaultTypeInternal;
extern LeaseKeepAliveResponseDefaultTypeInternal _LeaseKeepAliveResponse_default_instance_;
class LeaseLeasesRequest;
class LeaseLeasesRequestDefaultTypeInternal;
extern LeaseLeasesRequestDefaultTypeInternal _LeaseLeasesRequest_default_instance_;
class LeaseLeasesResponse;
class LeaseLeasesResponseDefaultTypeInternal;
extern LeaseLeasesResponseDefaultTypeInternal _LeaseLeasesResponse_default_instance_;
class LeaseRevokeRequest;
class LeaseRevokeRequestDefaultTypeInternal;
extern LeaseRevokeRequestDefaultTypeInternal _LeaseRevokeRequest_default_instance_;
class LeaseRevokeResponse;
class LeaseRevokeResponseDefaultTypeInternal;
extern LeaseRevokeResponseDefaultTypeInternal _LeaseRevokeResponse_default_instance_;
class LeaseStatus;
class LeaseStatusDefaultTypeInternal;
extern LeaseStatusDefaultTypeInternal _LeaseStatus_default_instance_;
class LeaseTimeToLiveRequest;
class LeaseTimeToLiveRequestDefaultTypeInternal;
extern LeaseTimeToLiveRequestDefaultTypeInternal _LeaseTimeToLiveRequest_default_instance_;
class LeaseTimeToLiveResponse;
class LeaseTimeToLiveResponseDefaultTypeInternal;
extern LeaseTimeToLiveResponseDefaultTypeInternal _LeaseTimeToLiveResponse_default_instance_;
class Member;
class MemberDefaultTypeInternal;
extern MemberDefaultTypeInternal _Member_default_instance_;
class MemberAddRequest;
class MemberAddRequestDefaultTypeInternal;
extern MemberAddRequestDefaultTypeInternal _MemberAddRequest_default_instance_;
class MemberAddResponse;
class MemberAddResponseDefaultTypeInternal;
extern MemberAddResponseDefaultTypeInternal _MemberAddResponse_default_instance_;
class MemberListRequest;
class MemberListRequestDefaultTypeInternal;
extern MemberListRequestDefaultTypeInternal _MemberListRequest_default_instance_;
class MemberListResponse;
class MemberListResponseDefaultTypeInternal;
extern MemberListResponseDefaultTypeInternal _MemberListResponse_default_instance_;
class MemberPromoteRequest;
class MemberPromoteRequestDefaultTypeInternal;
extern MemberPromoteRequestDefaultTypeInternal _MemberPromoteRequest_default_instance_;
class MemberPromoteResponse;
class MemberPromoteResponseDefaultTypeInternal;
extern MemberPromoteResponseDefaultTypeInternal _MemberPromoteResponse_default_instance_;
class MemberRemoveRequest;
class MemberRemoveRequestDefaultTypeInternal;
extern MemberRemoveRequestDefaultTypeInternal _MemberRemoveRequest_default_instance_;
class MemberRemoveResponse;
class MemberRemoveResponseDefaultTypeInternal;
extern MemberRemoveResponseDefaultTypeInternal _MemberRemoveResponse_default_instance_;
class MemberUpdateRequest;
class MemberUpdateRequestDefaultTypeInternal;
extern MemberUpdateRequestDefaultTypeInternal _MemberUpdateRequest_default_instance_;
class MemberUpdateResponse;
class MemberUpdateResponseDefaultTypeInternal;
extern MemberUpdateResponseDefaultTypeInternal _MemberUpdateResponse_default_instance_;
class MoveLeaderRequest;
class MoveLeaderRequestDefaultTypeInternal;
extern MoveLeaderRequestDefaultTypeInternal _MoveLeaderRequest_default_instance_;
class MoveLeaderResponse;
class MoveLeaderResponseDefaultTypeInternal;
extern MoveLeaderResponseDefaultTypeInternal _MoveLeaderResponse_default_instance_;
class PutRequest;
class PutRequestDefaultTypeInternal;
extern PutRequestDefaultTypeInternal _PutRequest_default_instance_;
class PutResponse;
class PutResponseDefaultTypeInternal;
extern PutResponseDefaultTypeInternal _PutResponse_default_instance_;
class RangeRequest;
class RangeRequestDefaultTypeInternal;
extern RangeRequestDefaultTypeInternal _RangeRequest_default_instance_;
class RangeResponse;
class RangeResponseDefaultTypeInternal;
extern RangeResponseDefaultTypeInternal _RangeResponse_default_instance_;
class RequestOp;
class RequestOpDefaultTypeInternal;
extern RequestOpDefaultTypeInternal _RequestOp_default_instance_;
class ResponseHeader;
class ResponseHeaderDefaultTypeInternal;
extern ResponseHeaderDefaultTypeInternal _ResponseHeader_default_instance_;
class ResponseOp;
class ResponseOpDefaultTypeInternal;
extern ResponseOpDefaultTypeInternal _ResponseOp_default_instance_;
class SnapshotRequest;
class SnapshotRequestDefaultTypeInternal;
extern SnapshotRequestDefaultTypeInternal _SnapshotRequest_default_instance_;
class SnapshotResponse;
class SnapshotResponseDefaultTypeInternal;
extern SnapshotResponseDefaultTypeInternal _SnapshotResponse_default_instance_;
class StatusRequest;
class StatusRequestDefaultTypeInternal;
extern StatusRequestDefaultTypeInternal _StatusRequest_default_instance_;
class StatusResponse;
class StatusResponseDefaultTypeInternal;
extern StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
class TxnRequest;
class TxnRequestDefaultTypeInternal;
extern TxnRequestDefaultTypeInternal _TxnRequest_default_instance_;
class TxnResponse;
class TxnResponseDefaultTypeInternal;
extern TxnResponseDefaultTypeInternal _TxnResponse_default_instance_;
class WatchCancelRequest;
class WatchCancelRequestDefaultTypeInternal;
extern WatchCancelRequestDefaultTypeInternal _WatchCancelRequest_default_instance_;
class WatchCreateRequest;
class WatchCreateRequestDefaultTypeInternal;
extern WatchCreateRequestDefaultTypeInternal _WatchCreateRequest_default_instance_;
class WatchProgressRequest;
class WatchProgressRequestDefaultTypeInternal;
extern WatchProgressRequestDefaultTypeInternal _WatchProgressRequest_default_instance_;
class WatchRequest;
class WatchRequestDefaultTypeInternal;
extern WatchRequestDefaultTypeInternal _WatchRequest_default_instance_;
class WatchResponse;
class WatchResponseDefaultTypeInternal;
extern WatchResponseDefaultTypeInternal _WatchResponse_default_instance_;
}  // namespace etcdserverpb
PROTOBUF_NAMESPACE_OPEN
template<> ::etcdserverpb::AlarmMember* Arena::CreateMaybeMessage<::etcdserverpb::AlarmMember>(Arena*);
template<> ::etcdserverpb::AlarmRequest* Arena::CreateMaybeMessage<::etcdserverpb::AlarmRequest>(Arena*);
template<> ::etcdserverpb::AlarmResponse* Arena::CreateMaybeMessage<::etcdserverpb::AlarmResponse>(Arena*);
template<> ::etcdserverpb::AuthDisableRequest* Arena::CreateMaybeMessage<::etcdserverpb::AuthDisableRequest>(Arena*);
template<> ::etcdserverpb::AuthDisableResponse* Arena::CreateMaybeMessage<::etcdserverpb::AuthDisableResponse>(Arena*);
template<> ::etcdserverpb::AuthEnableRequest* Arena::CreateMaybeMessage<::etcdserverpb::AuthEnableRequest>(Arena*);
template<> ::etcdserverpb::AuthEnableResponse* Arena::CreateMaybeMessage<::etcdserverpb::AuthEnableResponse>(Arena*);
template<> ::etcdserverpb::AuthRoleAddRequest* Arena::CreateMaybeMessage<::etcdserverpb::AuthRoleAddRequest>(Arena*);
template<> ::etcdserverpb::AuthRoleAddResponse* Arena::CreateMaybeMessage<::etcdserverpb::AuthRoleAddResponse>(Arena*);
template<> ::etcdserverpb::AuthRoleDeleteRequest* Arena::CreateMaybeMessage<::etcdserverpb::AuthRoleDeleteRequest>(Arena*);
template<> ::etcdserverpb::AuthRoleDeleteResponse* Arena::CreateMaybeMessage<::etcdserverpb::AuthRoleDeleteResponse>(Arena*);
template<> ::etcdserverpb::AuthRoleGetRequest* Arena::CreateMaybeMessage<::etcdserverpb::AuthRoleGetRequest>(Arena*);
template<> ::etcdserverpb::AuthRoleGetResponse* Arena::CreateMaybeMessage<::etcdserverpb::AuthRoleGetResponse>(Arena*);
template<> ::etcdserverpb::AuthRoleGrantPermissionRequest* Arena::CreateMaybeMessage<::etcdserverpb::AuthRoleGrantPermissionRequest>(Arena*);
template<> ::etcdserverpb::AuthRoleGrantPermissionResponse* Arena::CreateMaybeMessage<::etcdserverpb::AuthRoleGrantPermissionResponse>(Arena*);
template<> ::etcdserverpb::AuthRoleListRequest* Arena::CreateMaybeMessage<::etcdserverpb::AuthRoleListRequest>(Arena*);
template<> ::etcdserverpb::AuthRoleListResponse* Arena::CreateMaybeMessage<::etcdserverpb::AuthRoleListResponse>(Arena*);
template<> ::etcdserverpb::AuthRoleRevokePermissionRequest* Arena::CreateMaybeMessage<::etcdserverpb::AuthRoleRevokePermissionRequest>(Arena*);
template<> ::etcdserverpb::AuthRoleRevokePermissionResponse* Arena::CreateMaybeMessage<::etcdserverpb::AuthRoleRevokePermissionResponse>(Arena*);
template<> ::etcdserverpb::AuthUserAddRequest* Arena::CreateMaybeMessage<::etcdserverpb::AuthUserAddRequest>(Arena*);
template<> ::etcdserverpb::AuthUserAddResponse* Arena::CreateMaybeMessage<::etcdserverpb::AuthUserAddResponse>(Arena*);
template<> ::etcdserverpb::AuthUserChangePasswordRequest* Arena::CreateMaybeMessage<::etcdserverpb::AuthUserChangePasswordRequest>(Arena*);
template<> ::etcdserverpb::AuthUserChangePasswordResponse* Arena::CreateMaybeMessage<::etcdserverpb::AuthUserChangePasswordResponse>(Arena*);
template<> ::etcdserverpb::AuthUserDeleteRequest* Arena::CreateMaybeMessage<::etcdserverpb::AuthUserDeleteRequest>(Arena*);
template<> ::etcdserverpb::AuthUserDeleteResponse* Arena::CreateMaybeMessage<::etcdserverpb::AuthUserDeleteResponse>(Arena*);
template<> ::etcdserverpb::AuthUserGetRequest* Arena::CreateMaybeMessage<::etcdserverpb::AuthUserGetRequest>(Arena*);
template<> ::etcdserverpb::AuthUserGetResponse* Arena::CreateMaybeMessage<::etcdserverpb::AuthUserGetResponse>(Arena*);
template<> ::etcdserverpb::AuthUserGrantRoleRequest* Arena::CreateMaybeMessage<::etcdserverpb::AuthUserGrantRoleRequest>(Arena*);
template<> ::etcdserverpb::AuthUserGrantRoleResponse* Arena::CreateMaybeMessage<::etcdserverpb::AuthUserGrantRoleResponse>(Arena*);
template<> ::etcdserverpb::AuthUserListRequest* Arena::CreateMaybeMessage<::etcdserverpb::AuthUserListRequest>(Arena*);
template<> ::etcdserverpb::AuthUserListResponse* Arena::CreateMaybeMessage<::etcdserverpb::AuthUserListResponse>(Arena*);
template<> ::etcdserverpb::AuthUserRevokeRoleRequest* Arena::CreateMaybeMessage<::etcdserverpb::AuthUserRevokeRoleRequest>(Arena*);
template<> ::etcdserverpb::AuthUserRevokeRoleResponse* Arena::CreateMaybeMessage<::etcdserverpb::AuthUserRevokeRoleResponse>(Arena*);
template<> ::etcdserverpb::AuthenticateRequest* Arena::CreateMaybeMessage<::etcdserverpb::AuthenticateRequest>(Arena*);
template<> ::etcdserverpb::AuthenticateResponse* Arena::CreateMaybeMessage<::etcdserverpb::AuthenticateResponse>(Arena*);
template<> ::etcdserverpb::CompactionRequest* Arena::CreateMaybeMessage<::etcdserverpb::CompactionRequest>(Arena*);
template<> ::etcdserverpb::CompactionResponse* Arena::CreateMaybeMessage<::etcdserverpb::CompactionResponse>(Arena*);
template<> ::etcdserverpb::Compare* Arena::CreateMaybeMessage<::etcdserverpb::Compare>(Arena*);
template<> ::etcdserverpb::DefragmentRequest* Arena::CreateMaybeMessage<::etcdserverpb::DefragmentRequest>(Arena*);
template<> ::etcdserverpb::DefragmentResponse* Arena::CreateMaybeMessage<::etcdserverpb::DefragmentResponse>(Arena*);
template<> ::etcdserverpb::DeleteRangeRequest* Arena::CreateMaybeMessage<::etcdserverpb::DeleteRangeRequest>(Arena*);
template<> ::etcdserverpb::DeleteRangeResponse* Arena::CreateMaybeMessage<::etcdserverpb::DeleteRangeResponse>(Arena*);
template<> ::etcdserverpb::HashKVRequest* Arena::CreateMaybeMessage<::etcdserverpb::HashKVRequest>(Arena*);
template<> ::etcdserverpb::HashKVResponse* Arena::CreateMaybeMessage<::etcdserverpb::HashKVResponse>(Arena*);
template<> ::etcdserverpb::HashRequest* Arena::CreateMaybeMessage<::etcdserverpb::HashRequest>(Arena*);
template<> ::etcdserverpb::HashResponse* Arena::CreateMaybeMessage<::etcdserverpb::HashResponse>(Arena*);
template<> ::etcdserverpb::LeaseCheckpoint* Arena::CreateMaybeMessage<::etcdserverpb::LeaseCheckpoint>(Arena*);
template<> ::etcdserverpb::LeaseCheckpointRequest* Arena::CreateMaybeMessage<::etcdserverpb::LeaseCheckpointRequest>(Arena*);
template<> ::etcdserverpb::LeaseCheckpointResponse* Arena::CreateMaybeMessage<::etcdserverpb::LeaseCheckpointResponse>(Arena*);
template<> ::etcdserverpb::LeaseGrantRequest* Arena::CreateMaybeMessage<::etcdserverpb::LeaseGrantRequest>(Arena*);
template<> ::etcdserverpb::LeaseGrantResponse* Arena::CreateMaybeMessage<::etcdserverpb::LeaseGrantResponse>(Arena*);
template<> ::etcdserverpb::LeaseKeepAliveRequest* Arena::CreateMaybeMessage<::etcdserverpb::LeaseKeepAliveRequest>(Arena*);
template<> ::etcdserverpb::LeaseKeepAliveResponse* Arena::CreateMaybeMessage<::etcdserverpb::LeaseKeepAliveResponse>(Arena*);
template<> ::etcdserverpb::LeaseLeasesRequest* Arena::CreateMaybeMessage<::etcdserverpb::LeaseLeasesRequest>(Arena*);
template<> ::etcdserverpb::LeaseLeasesResponse* Arena::CreateMaybeMessage<::etcdserverpb::LeaseLeasesResponse>(Arena*);
template<> ::etcdserverpb::LeaseRevokeRequest* Arena::CreateMaybeMessage<::etcdserverpb::LeaseRevokeRequest>(Arena*);
template<> ::etcdserverpb::LeaseRevokeResponse* Arena::CreateMaybeMessage<::etcdserverpb::LeaseRevokeResponse>(Arena*);
template<> ::etcdserverpb::LeaseStatus* Arena::CreateMaybeMessage<::etcdserverpb::LeaseStatus>(Arena*);
template<> ::etcdserverpb::LeaseTimeToLiveRequest* Arena::CreateMaybeMessage<::etcdserverpb::LeaseTimeToLiveRequest>(Arena*);
template<> ::etcdserverpb::LeaseTimeToLiveResponse* Arena::CreateMaybeMessage<::etcdserverpb::LeaseTimeToLiveResponse>(Arena*);
template<> ::etcdserverpb::Member* Arena::CreateMaybeMessage<::etcdserverpb::Member>(Arena*);
template<> ::etcdserverpb::MemberAddRequest* Arena::CreateMaybeMessage<::etcdserverpb::MemberAddRequest>(Arena*);
template<> ::etcdserverpb::MemberAddResponse* Arena::CreateMaybeMessage<::etcdserverpb::MemberAddResponse>(Arena*);
template<> ::etcdserverpb::MemberListRequest* Arena::CreateMaybeMessage<::etcdserverpb::MemberListRequest>(Arena*);
template<> ::etcdserverpb::MemberListResponse* Arena::CreateMaybeMessage<::etcdserverpb::MemberListResponse>(Arena*);
template<> ::etcdserverpb::MemberPromoteRequest* Arena::CreateMaybeMessage<::etcdserverpb::MemberPromoteRequest>(Arena*);
template<> ::etcdserverpb::MemberPromoteResponse* Arena::CreateMaybeMessage<::etcdserverpb::MemberPromoteResponse>(Arena*);
template<> ::etcdserverpb::MemberRemoveRequest* Arena::CreateMaybeMessage<::etcdserverpb::MemberRemoveRequest>(Arena*);
template<> ::etcdserverpb::MemberRemoveResponse* Arena::CreateMaybeMessage<::etcdserverpb::MemberRemoveResponse>(Arena*);
template<> ::etcdserverpb::MemberUpdateRequest* Arena::CreateMaybeMessage<::etcdserverpb::MemberUpdateRequest>(Arena*);
template<> ::etcdserverpb::MemberUpdateResponse* Arena::CreateMaybeMessage<::etcdserverpb::MemberUpdateResponse>(Arena*);
template<> ::etcdserverpb::MoveLeaderRequest* Arena::CreateMaybeMessage<::etcdserverpb::MoveLeaderRequest>(Arena*);
template<> ::etcdserverpb::MoveLeaderResponse* Arena::CreateMaybeMessage<::etcdserverpb::MoveLeaderResponse>(Arena*);
template<> ::etcdserverpb::PutRequest* Arena::CreateMaybeMessage<::etcdserverpb::PutRequest>(Arena*);
template<> ::etcdserverpb::PutResponse* Arena::CreateMaybeMessage<::etcdserverpb::PutResponse>(Arena*);
template<> ::etcdserverpb::RangeRequest* Arena::CreateMaybeMessage<::etcdserverpb::RangeRequest>(Arena*);
template<> ::etcdserverpb::RangeResponse* Arena::CreateMaybeMessage<::etcdserverpb::RangeResponse>(Arena*);
template<> ::etcdserverpb::RequestOp* Arena::CreateMaybeMessage<::etcdserverpb::RequestOp>(Arena*);
template<> ::etcdserverpb::ResponseHeader* Arena::CreateMaybeMessage<::etcdserverpb::ResponseHeader>(Arena*);
template<> ::etcdserverpb::ResponseOp* Arena::CreateMaybeMessage<::etcdserverpb::ResponseOp>(Arena*);
template<> ::etcdserverpb::SnapshotRequest* Arena::CreateMaybeMessage<::etcdserverpb::SnapshotRequest>(Arena*);
template<> ::etcdserverpb::SnapshotResponse* Arena::CreateMaybeMessage<::etcdserverpb::SnapshotResponse>(Arena*);
template<> ::etcdserverpb::StatusRequest* Arena::CreateMaybeMessage<::etcdserverpb::StatusRequest>(Arena*);
template<> ::etcdserverpb::StatusResponse* Arena::CreateMaybeMessage<::etcdserverpb::StatusResponse>(Arena*);
template<> ::etcdserverpb::TxnRequest* Arena::CreateMaybeMessage<::etcdserverpb::TxnRequest>(Arena*);
template<> ::etcdserverpb::TxnResponse* Arena::CreateMaybeMessage<::etcdserverpb::TxnResponse>(Arena*);
template<> ::etcdserverpb::WatchCancelRequest* Arena::CreateMaybeMessage<::etcdserverpb::WatchCancelRequest>(Arena*);
template<> ::etcdserverpb::WatchCreateRequest* Arena::CreateMaybeMessage<::etcdserverpb::WatchCreateRequest>(Arena*);
template<> ::etcdserverpb::WatchProgressRequest* Arena::CreateMaybeMessage<::etcdserverpb::WatchProgressRequest>(Arena*);
template<> ::etcdserverpb::WatchRequest* Arena::CreateMaybeMessage<::etcdserverpb::WatchRequest>(Arena*);
template<> ::etcdserverpb::WatchResponse* Arena::CreateMaybeMessage<::etcdserverpb::WatchResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace etcdserverpb {

enum RangeRequest_SortOrder : int {
  RangeRequest_SortOrder_NONE = 0,
  RangeRequest_SortOrder_ASCEND = 1,
  RangeRequest_SortOrder_DESCEND = 2,
  RangeRequest_SortOrder_RangeRequest_SortOrder_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RangeRequest_SortOrder_RangeRequest_SortOrder_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RangeRequest_SortOrder_IsValid(int value);
constexpr RangeRequest_SortOrder RangeRequest_SortOrder_SortOrder_MIN = RangeRequest_SortOrder_NONE;
constexpr RangeRequest_SortOrder RangeRequest_SortOrder_SortOrder_MAX = RangeRequest_SortOrder_DESCEND;
constexpr int RangeRequest_SortOrder_SortOrder_ARRAYSIZE = RangeRequest_SortOrder_SortOrder_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RangeRequest_SortOrder_descriptor();
template<typename T>
inline const std::string& RangeRequest_SortOrder_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RangeRequest_SortOrder>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RangeRequest_SortOrder_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RangeRequest_SortOrder_descriptor(), enum_t_value);
}
inline bool RangeRequest_SortOrder_Parse(
    const std::string& name, RangeRequest_SortOrder* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RangeRequest_SortOrder>(
    RangeRequest_SortOrder_descriptor(), name, value);
}
enum RangeRequest_SortTarget : int {
  RangeRequest_SortTarget_KEY = 0,
  RangeRequest_SortTarget_VERSION = 1,
  RangeRequest_SortTarget_CREATE = 2,
  RangeRequest_SortTarget_MOD = 3,
  RangeRequest_SortTarget_VALUE = 4,
  RangeRequest_SortTarget_RangeRequest_SortTarget_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RangeRequest_SortTarget_RangeRequest_SortTarget_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RangeRequest_SortTarget_IsValid(int value);
constexpr RangeRequest_SortTarget RangeRequest_SortTarget_SortTarget_MIN = RangeRequest_SortTarget_KEY;
constexpr RangeRequest_SortTarget RangeRequest_SortTarget_SortTarget_MAX = RangeRequest_SortTarget_VALUE;
constexpr int RangeRequest_SortTarget_SortTarget_ARRAYSIZE = RangeRequest_SortTarget_SortTarget_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RangeRequest_SortTarget_descriptor();
template<typename T>
inline const std::string& RangeRequest_SortTarget_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RangeRequest_SortTarget>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RangeRequest_SortTarget_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RangeRequest_SortTarget_descriptor(), enum_t_value);
}
inline bool RangeRequest_SortTarget_Parse(
    const std::string& name, RangeRequest_SortTarget* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RangeRequest_SortTarget>(
    RangeRequest_SortTarget_descriptor(), name, value);
}
enum Compare_CompareResult : int {
  Compare_CompareResult_EQUAL = 0,
  Compare_CompareResult_GREATER = 1,
  Compare_CompareResult_LESS = 2,
  Compare_CompareResult_NOT_EQUAL = 3,
  Compare_CompareResult_Compare_CompareResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Compare_CompareResult_Compare_CompareResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Compare_CompareResult_IsValid(int value);
constexpr Compare_CompareResult Compare_CompareResult_CompareResult_MIN = Compare_CompareResult_EQUAL;
constexpr Compare_CompareResult Compare_CompareResult_CompareResult_MAX = Compare_CompareResult_NOT_EQUAL;
constexpr int Compare_CompareResult_CompareResult_ARRAYSIZE = Compare_CompareResult_CompareResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Compare_CompareResult_descriptor();
template<typename T>
inline const std::string& Compare_CompareResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Compare_CompareResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Compare_CompareResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Compare_CompareResult_descriptor(), enum_t_value);
}
inline bool Compare_CompareResult_Parse(
    const std::string& name, Compare_CompareResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Compare_CompareResult>(
    Compare_CompareResult_descriptor(), name, value);
}
enum Compare_CompareTarget : int {
  Compare_CompareTarget_VERSION = 0,
  Compare_CompareTarget_CREATE = 1,
  Compare_CompareTarget_MOD = 2,
  Compare_CompareTarget_VALUE = 3,
  Compare_CompareTarget_LEASE = 4,
  Compare_CompareTarget_Compare_CompareTarget_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Compare_CompareTarget_Compare_CompareTarget_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Compare_CompareTarget_IsValid(int value);
constexpr Compare_CompareTarget Compare_CompareTarget_CompareTarget_MIN = Compare_CompareTarget_VERSION;
constexpr Compare_CompareTarget Compare_CompareTarget_CompareTarget_MAX = Compare_CompareTarget_LEASE;
constexpr int Compare_CompareTarget_CompareTarget_ARRAYSIZE = Compare_CompareTarget_CompareTarget_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Compare_CompareTarget_descriptor();
template<typename T>
inline const std::string& Compare_CompareTarget_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Compare_CompareTarget>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Compare_CompareTarget_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Compare_CompareTarget_descriptor(), enum_t_value);
}
inline bool Compare_CompareTarget_Parse(
    const std::string& name, Compare_CompareTarget* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Compare_CompareTarget>(
    Compare_CompareTarget_descriptor(), name, value);
}
enum WatchCreateRequest_FilterType : int {
  WatchCreateRequest_FilterType_NOPUT = 0,
  WatchCreateRequest_FilterType_NODELETE = 1,
  WatchCreateRequest_FilterType_WatchCreateRequest_FilterType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WatchCreateRequest_FilterType_WatchCreateRequest_FilterType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WatchCreateRequest_FilterType_IsValid(int value);
constexpr WatchCreateRequest_FilterType WatchCreateRequest_FilterType_FilterType_MIN = WatchCreateRequest_FilterType_NOPUT;
constexpr WatchCreateRequest_FilterType WatchCreateRequest_FilterType_FilterType_MAX = WatchCreateRequest_FilterType_NODELETE;
constexpr int WatchCreateRequest_FilterType_FilterType_ARRAYSIZE = WatchCreateRequest_FilterType_FilterType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WatchCreateRequest_FilterType_descriptor();
template<typename T>
inline const std::string& WatchCreateRequest_FilterType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WatchCreateRequest_FilterType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WatchCreateRequest_FilterType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WatchCreateRequest_FilterType_descriptor(), enum_t_value);
}
inline bool WatchCreateRequest_FilterType_Parse(
    const std::string& name, WatchCreateRequest_FilterType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WatchCreateRequest_FilterType>(
    WatchCreateRequest_FilterType_descriptor(), name, value);
}
enum AlarmRequest_AlarmAction : int {
  AlarmRequest_AlarmAction_GET = 0,
  AlarmRequest_AlarmAction_ACTIVATE = 1,
  AlarmRequest_AlarmAction_DEACTIVATE = 2,
  AlarmRequest_AlarmAction_AlarmRequest_AlarmAction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AlarmRequest_AlarmAction_AlarmRequest_AlarmAction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AlarmRequest_AlarmAction_IsValid(int value);
constexpr AlarmRequest_AlarmAction AlarmRequest_AlarmAction_AlarmAction_MIN = AlarmRequest_AlarmAction_GET;
constexpr AlarmRequest_AlarmAction AlarmRequest_AlarmAction_AlarmAction_MAX = AlarmRequest_AlarmAction_DEACTIVATE;
constexpr int AlarmRequest_AlarmAction_AlarmAction_ARRAYSIZE = AlarmRequest_AlarmAction_AlarmAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlarmRequest_AlarmAction_descriptor();
template<typename T>
inline const std::string& AlarmRequest_AlarmAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AlarmRequest_AlarmAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AlarmRequest_AlarmAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AlarmRequest_AlarmAction_descriptor(), enum_t_value);
}
inline bool AlarmRequest_AlarmAction_Parse(
    const std::string& name, AlarmRequest_AlarmAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AlarmRequest_AlarmAction>(
    AlarmRequest_AlarmAction_descriptor(), name, value);
}
enum AlarmType : int {
  NONE = 0,
  NOSPACE = 1,
  CORRUPT = 2,
  AlarmType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AlarmType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AlarmType_IsValid(int value);
constexpr AlarmType AlarmType_MIN = NONE;
constexpr AlarmType AlarmType_MAX = CORRUPT;
constexpr int AlarmType_ARRAYSIZE = AlarmType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlarmType_descriptor();
template<typename T>
inline const std::string& AlarmType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AlarmType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AlarmType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AlarmType_descriptor(), enum_t_value);
}
inline bool AlarmType_Parse(
    const std::string& name, AlarmType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AlarmType>(
    AlarmType_descriptor(), name, value);
}
// ===================================================================

class ResponseHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.ResponseHeader) */ {
 public:
  ResponseHeader();
  virtual ~ResponseHeader();

  ResponseHeader(const ResponseHeader& from);
  ResponseHeader(ResponseHeader&& from) noexcept
    : ResponseHeader() {
    *this = ::std::move(from);
  }

  inline ResponseHeader& operator=(const ResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseHeader& operator=(ResponseHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseHeader* internal_default_instance() {
    return reinterpret_cast<const ResponseHeader*>(
               &_ResponseHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResponseHeader& a, ResponseHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseHeader* New() const final {
    return CreateMaybeMessage<ResponseHeader>(nullptr);
  }

  ResponseHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseHeader& from);
  void MergeFrom(const ResponseHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.ResponseHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClusterIdFieldNumber = 1,
    kMemberIdFieldNumber = 2,
    kRevisionFieldNumber = 3,
    kRaftTermFieldNumber = 4,
  };
  // uint64 cluster_id = 1;
  void clear_cluster_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 cluster_id() const;
  void set_cluster_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cluster_id() const;
  void _internal_set_cluster_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 member_id = 2;
  void clear_member_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 member_id() const;
  void set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_member_id() const;
  void _internal_set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 revision = 3;
  void clear_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 revision() const;
  void set_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_revision() const;
  void _internal_set_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 raft_term = 4;
  void clear_raft_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 raft_term() const;
  void set_raft_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_raft_term() const;
  void _internal_set_raft_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.ResponseHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cluster_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 member_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 revision_;
  ::PROTOBUF_NAMESPACE_ID::uint64 raft_term_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RangeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.RangeRequest) */ {
 public:
  RangeRequest();
  virtual ~RangeRequest();

  RangeRequest(const RangeRequest& from);
  RangeRequest(RangeRequest&& from) noexcept
    : RangeRequest() {
    *this = ::std::move(from);
  }

  inline RangeRequest& operator=(const RangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeRequest& operator=(RangeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RangeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RangeRequest* internal_default_instance() {
    return reinterpret_cast<const RangeRequest*>(
               &_RangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RangeRequest& a, RangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RangeRequest* New() const final {
    return CreateMaybeMessage<RangeRequest>(nullptr);
  }

  RangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RangeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RangeRequest& from);
  void MergeFrom(const RangeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.RangeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RangeRequest_SortOrder SortOrder;
  static constexpr SortOrder NONE =
    RangeRequest_SortOrder_NONE;
  static constexpr SortOrder ASCEND =
    RangeRequest_SortOrder_ASCEND;
  static constexpr SortOrder DESCEND =
    RangeRequest_SortOrder_DESCEND;
  static inline bool SortOrder_IsValid(int value) {
    return RangeRequest_SortOrder_IsValid(value);
  }
  static constexpr SortOrder SortOrder_MIN =
    RangeRequest_SortOrder_SortOrder_MIN;
  static constexpr SortOrder SortOrder_MAX =
    RangeRequest_SortOrder_SortOrder_MAX;
  static constexpr int SortOrder_ARRAYSIZE =
    RangeRequest_SortOrder_SortOrder_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SortOrder_descriptor() {
    return RangeRequest_SortOrder_descriptor();
  }
  template<typename T>
  static inline const std::string& SortOrder_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SortOrder>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SortOrder_Name.");
    return RangeRequest_SortOrder_Name(enum_t_value);
  }
  static inline bool SortOrder_Parse(const std::string& name,
      SortOrder* value) {
    return RangeRequest_SortOrder_Parse(name, value);
  }

  typedef RangeRequest_SortTarget SortTarget;
  static constexpr SortTarget KEY =
    RangeRequest_SortTarget_KEY;
  static constexpr SortTarget VERSION =
    RangeRequest_SortTarget_VERSION;
  static constexpr SortTarget CREATE =
    RangeRequest_SortTarget_CREATE;
  static constexpr SortTarget MOD =
    RangeRequest_SortTarget_MOD;
  static constexpr SortTarget VALUE =
    RangeRequest_SortTarget_VALUE;
  static inline bool SortTarget_IsValid(int value) {
    return RangeRequest_SortTarget_IsValid(value);
  }
  static constexpr SortTarget SortTarget_MIN =
    RangeRequest_SortTarget_SortTarget_MIN;
  static constexpr SortTarget SortTarget_MAX =
    RangeRequest_SortTarget_SortTarget_MAX;
  static constexpr int SortTarget_ARRAYSIZE =
    RangeRequest_SortTarget_SortTarget_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SortTarget_descriptor() {
    return RangeRequest_SortTarget_descriptor();
  }
  template<typename T>
  static inline const std::string& SortTarget_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SortTarget>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SortTarget_Name.");
    return RangeRequest_SortTarget_Name(enum_t_value);
  }
  static inline bool SortTarget_Parse(const std::string& name,
      SortTarget* value) {
    return RangeRequest_SortTarget_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kRangeEndFieldNumber = 2,
    kLimitFieldNumber = 3,
    kRevisionFieldNumber = 4,
    kSortOrderFieldNumber = 5,
    kSortTargetFieldNumber = 6,
    kMinModRevisionFieldNumber = 10,
    kMaxModRevisionFieldNumber = 11,
    kMinCreateRevisionFieldNumber = 12,
    kMaxCreateRevisionFieldNumber = 13,
    kSerializableFieldNumber = 7,
    kKeysOnlyFieldNumber = 8,
    kCountOnlyFieldNumber = 9,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes range_end = 2;
  void clear_range_end();
  const std::string& range_end() const;
  void set_range_end(const std::string& value);
  void set_range_end(std::string&& value);
  void set_range_end(const char* value);
  void set_range_end(const void* value, size_t size);
  std::string* mutable_range_end();
  std::string* release_range_end();
  void set_allocated_range_end(std::string* range_end);
  private:
  const std::string& _internal_range_end() const;
  void _internal_set_range_end(const std::string& value);
  std::string* _internal_mutable_range_end();
  public:

  // int64 limit = 3;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 revision = 4;
  void clear_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 revision() const;
  void set_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_revision() const;
  void _internal_set_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .etcdserverpb.RangeRequest.SortOrder sort_order = 5;
  void clear_sort_order();
  ::etcdserverpb::RangeRequest_SortOrder sort_order() const;
  void set_sort_order(::etcdserverpb::RangeRequest_SortOrder value);
  private:
  ::etcdserverpb::RangeRequest_SortOrder _internal_sort_order() const;
  void _internal_set_sort_order(::etcdserverpb::RangeRequest_SortOrder value);
  public:

  // .etcdserverpb.RangeRequest.SortTarget sort_target = 6;
  void clear_sort_target();
  ::etcdserverpb::RangeRequest_SortTarget sort_target() const;
  void set_sort_target(::etcdserverpb::RangeRequest_SortTarget value);
  private:
  ::etcdserverpb::RangeRequest_SortTarget _internal_sort_target() const;
  void _internal_set_sort_target(::etcdserverpb::RangeRequest_SortTarget value);
  public:

  // int64 min_mod_revision = 10;
  void clear_min_mod_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 min_mod_revision() const;
  void set_min_mod_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_min_mod_revision() const;
  void _internal_set_min_mod_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 max_mod_revision = 11;
  void clear_max_mod_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 max_mod_revision() const;
  void set_max_mod_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_mod_revision() const;
  void _internal_set_max_mod_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 min_create_revision = 12;
  void clear_min_create_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 min_create_revision() const;
  void set_min_create_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_min_create_revision() const;
  void _internal_set_min_create_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 max_create_revision = 13;
  void clear_max_create_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 max_create_revision() const;
  void set_max_create_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_create_revision() const;
  void _internal_set_max_create_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool serializable = 7;
  void clear_serializable();
  bool serializable() const;
  void set_serializable(bool value);
  private:
  bool _internal_serializable() const;
  void _internal_set_serializable(bool value);
  public:

  // bool keys_only = 8;
  void clear_keys_only();
  bool keys_only() const;
  void set_keys_only(bool value);
  private:
  bool _internal_keys_only() const;
  void _internal_set_keys_only(bool value);
  public:

  // bool count_only = 9;
  void clear_count_only();
  bool count_only() const;
  void set_count_only(bool value);
  private:
  bool _internal_count_only() const;
  void _internal_set_count_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.RangeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr range_end_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_;
  ::PROTOBUF_NAMESPACE_ID::int64 revision_;
  int sort_order_;
  int sort_target_;
  ::PROTOBUF_NAMESPACE_ID::int64 min_mod_revision_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_mod_revision_;
  ::PROTOBUF_NAMESPACE_ID::int64 min_create_revision_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_create_revision_;
  bool serializable_;
  bool keys_only_;
  bool count_only_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RangeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.RangeResponse) */ {
 public:
  RangeResponse();
  virtual ~RangeResponse();

  RangeResponse(const RangeResponse& from);
  RangeResponse(RangeResponse&& from) noexcept
    : RangeResponse() {
    *this = ::std::move(from);
  }

  inline RangeResponse& operator=(const RangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeResponse& operator=(RangeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RangeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RangeResponse* internal_default_instance() {
    return reinterpret_cast<const RangeResponse*>(
               &_RangeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RangeResponse& a, RangeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RangeResponse* New() const final {
    return CreateMaybeMessage<RangeResponse>(nullptr);
  }

  RangeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RangeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RangeResponse& from);
  void MergeFrom(const RangeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.RangeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKvsFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kCountFieldNumber = 4,
    kMoreFieldNumber = 3,
  };
  // repeated .mvccpb.KeyValue kvs = 2;
  int kvs_size() const;
  private:
  int _internal_kvs_size() const;
  public:
  void clear_kvs();
  ::mvccpb::KeyValue* mutable_kvs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mvccpb::KeyValue >*
      mutable_kvs();
  private:
  const ::mvccpb::KeyValue& _internal_kvs(int index) const;
  ::mvccpb::KeyValue* _internal_add_kvs();
  public:
  const ::mvccpb::KeyValue& kvs(int index) const;
  ::mvccpb::KeyValue* add_kvs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mvccpb::KeyValue >&
      kvs() const;

  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // int64 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool more = 3;
  void clear_more();
  bool more() const;
  void set_more(bool value);
  private:
  bool _internal_more() const;
  void _internal_set_more(bool value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.RangeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mvccpb::KeyValue > kvs_;
  ::etcdserverpb::ResponseHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  bool more_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class PutRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.PutRequest) */ {
 public:
  PutRequest();
  virtual ~PutRequest();

  PutRequest(const PutRequest& from);
  PutRequest(PutRequest&& from) noexcept
    : PutRequest() {
    *this = ::std::move(from);
  }

  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutRequest& operator=(PutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutRequest* internal_default_instance() {
    return reinterpret_cast<const PutRequest*>(
               &_PutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PutRequest& a, PutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PutRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutRequest* New() const final {
    return CreateMaybeMessage<PutRequest>(nullptr);
  }

  PutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutRequest& from);
  void MergeFrom(const PutRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.PutRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kLeaseFieldNumber = 3,
    kPrevKvFieldNumber = 4,
    kIgnoreValueFieldNumber = 5,
    kIgnoreLeaseFieldNumber = 6,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int64 lease = 3;
  void clear_lease();
  ::PROTOBUF_NAMESPACE_ID::int64 lease() const;
  void set_lease(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lease() const;
  void _internal_set_lease(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool prev_kv = 4;
  void clear_prev_kv();
  bool prev_kv() const;
  void set_prev_kv(bool value);
  private:
  bool _internal_prev_kv() const;
  void _internal_set_prev_kv(bool value);
  public:

  // bool ignore_value = 5;
  void clear_ignore_value();
  bool ignore_value() const;
  void set_ignore_value(bool value);
  private:
  bool _internal_ignore_value() const;
  void _internal_set_ignore_value(bool value);
  public:

  // bool ignore_lease = 6;
  void clear_ignore_lease();
  bool ignore_lease() const;
  void set_ignore_lease(bool value);
  private:
  bool _internal_ignore_lease() const;
  void _internal_set_ignore_lease(bool value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.PutRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int64 lease_;
  bool prev_kv_;
  bool ignore_value_;
  bool ignore_lease_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class PutResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.PutResponse) */ {
 public:
  PutResponse();
  virtual ~PutResponse();

  PutResponse(const PutResponse& from);
  PutResponse(PutResponse&& from) noexcept
    : PutResponse() {
    *this = ::std::move(from);
  }

  inline PutResponse& operator=(const PutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutResponse& operator=(PutResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutResponse* internal_default_instance() {
    return reinterpret_cast<const PutResponse*>(
               &_PutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PutResponse& a, PutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PutResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutResponse* New() const final {
    return CreateMaybeMessage<PutResponse>(nullptr);
  }

  PutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutResponse& from);
  void MergeFrom(const PutResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.PutResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPrevKvFieldNumber = 2,
  };
  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // .mvccpb.KeyValue prev_kv = 2;
  bool has_prev_kv() const;
  private:
  bool _internal_has_prev_kv() const;
  public:
  void clear_prev_kv();
  const ::mvccpb::KeyValue& prev_kv() const;
  ::mvccpb::KeyValue* release_prev_kv();
  ::mvccpb::KeyValue* mutable_prev_kv();
  void set_allocated_prev_kv(::mvccpb::KeyValue* prev_kv);
  private:
  const ::mvccpb::KeyValue& _internal_prev_kv() const;
  ::mvccpb::KeyValue* _internal_mutable_prev_kv();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.PutResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::etcdserverpb::ResponseHeader* header_;
  ::mvccpb::KeyValue* prev_kv_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteRangeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.DeleteRangeRequest) */ {
 public:
  DeleteRangeRequest();
  virtual ~DeleteRangeRequest();

  DeleteRangeRequest(const DeleteRangeRequest& from);
  DeleteRangeRequest(DeleteRangeRequest&& from) noexcept
    : DeleteRangeRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRangeRequest& operator=(const DeleteRangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRangeRequest& operator=(DeleteRangeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteRangeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRangeRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRangeRequest*>(
               &_DeleteRangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeleteRangeRequest& a, DeleteRangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRangeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRangeRequest* New() const final {
    return CreateMaybeMessage<DeleteRangeRequest>(nullptr);
  }

  DeleteRangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRangeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteRangeRequest& from);
  void MergeFrom(const DeleteRangeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRangeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.DeleteRangeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kRangeEndFieldNumber = 2,
    kPrevKvFieldNumber = 3,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes range_end = 2;
  void clear_range_end();
  const std::string& range_end() const;
  void set_range_end(const std::string& value);
  void set_range_end(std::string&& value);
  void set_range_end(const char* value);
  void set_range_end(const void* value, size_t size);
  std::string* mutable_range_end();
  std::string* release_range_end();
  void set_allocated_range_end(std::string* range_end);
  private:
  const std::string& _internal_range_end() const;
  void _internal_set_range_end(const std::string& value);
  std::string* _internal_mutable_range_end();
  public:

  // bool prev_kv = 3;
  void clear_prev_kv();
  bool prev_kv() const;
  void set_prev_kv(bool value);
  private:
  bool _internal_prev_kv() const;
  void _internal_set_prev_kv(bool value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.DeleteRangeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr range_end_;
  bool prev_kv_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteRangeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.DeleteRangeResponse) */ {
 public:
  DeleteRangeResponse();
  virtual ~DeleteRangeResponse();

  DeleteRangeResponse(const DeleteRangeResponse& from);
  DeleteRangeResponse(DeleteRangeResponse&& from) noexcept
    : DeleteRangeResponse() {
    *this = ::std::move(from);
  }

  inline DeleteRangeResponse& operator=(const DeleteRangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRangeResponse& operator=(DeleteRangeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteRangeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteRangeResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteRangeResponse*>(
               &_DeleteRangeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteRangeResponse& a, DeleteRangeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRangeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRangeResponse* New() const final {
    return CreateMaybeMessage<DeleteRangeResponse>(nullptr);
  }

  DeleteRangeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRangeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteRangeResponse& from);
  void MergeFrom(const DeleteRangeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRangeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.DeleteRangeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrevKvsFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kDeletedFieldNumber = 2,
  };
  // repeated .mvccpb.KeyValue prev_kvs = 3;
  int prev_kvs_size() const;
  private:
  int _internal_prev_kvs_size() const;
  public:
  void clear_prev_kvs();
  ::mvccpb::KeyValue* mutable_prev_kvs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mvccpb::KeyValue >*
      mutable_prev_kvs();
  private:
  const ::mvccpb::KeyValue& _internal_prev_kvs(int index) const;
  ::mvccpb::KeyValue* _internal_add_prev_kvs();
  public:
  const ::mvccpb::KeyValue& prev_kvs(int index) const;
  ::mvccpb::KeyValue* add_prev_kvs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mvccpb::KeyValue >&
      prev_kvs() const;

  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // int64 deleted = 2;
  void clear_deleted();
  ::PROTOBUF_NAMESPACE_ID::int64 deleted() const;
  void set_deleted(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_deleted() const;
  void _internal_set_deleted(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.DeleteRangeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mvccpb::KeyValue > prev_kvs_;
  ::etcdserverpb::ResponseHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::int64 deleted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RequestOp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.RequestOp) */ {
 public:
  RequestOp();
  virtual ~RequestOp();

  RequestOp(const RequestOp& from);
  RequestOp(RequestOp&& from) noexcept
    : RequestOp() {
    *this = ::std::move(from);
  }

  inline RequestOp& operator=(const RequestOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestOp& operator=(RequestOp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestOp& default_instance();

  enum RequestCase {
    kRequestRange = 1,
    kRequestPut = 2,
    kRequestDeleteRange = 3,
    kRequestTxn = 4,
    REQUEST_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestOp* internal_default_instance() {
    return reinterpret_cast<const RequestOp*>(
               &_RequestOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RequestOp& a, RequestOp& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestOp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestOp* New() const final {
    return CreateMaybeMessage<RequestOp>(nullptr);
  }

  RequestOp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestOp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestOp& from);
  void MergeFrom(const RequestOp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestOp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.RequestOp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestRangeFieldNumber = 1,
    kRequestPutFieldNumber = 2,
    kRequestDeleteRangeFieldNumber = 3,
    kRequestTxnFieldNumber = 4,
  };
  // .etcdserverpb.RangeRequest request_range = 1;
  bool has_request_range() const;
  private:
  bool _internal_has_request_range() const;
  public:
  void clear_request_range();
  const ::etcdserverpb::RangeRequest& request_range() const;
  ::etcdserverpb::RangeRequest* release_request_range();
  ::etcdserverpb::RangeRequest* mutable_request_range();
  void set_allocated_request_range(::etcdserverpb::RangeRequest* request_range);
  private:
  const ::etcdserverpb::RangeRequest& _internal_request_range() const;
  ::etcdserverpb::RangeRequest* _internal_mutable_request_range();
  public:

  // .etcdserverpb.PutRequest request_put = 2;
  bool has_request_put() const;
  private:
  bool _internal_has_request_put() const;
  public:
  void clear_request_put();
  const ::etcdserverpb::PutRequest& request_put() const;
  ::etcdserverpb::PutRequest* release_request_put();
  ::etcdserverpb::PutRequest* mutable_request_put();
  void set_allocated_request_put(::etcdserverpb::PutRequest* request_put);
  private:
  const ::etcdserverpb::PutRequest& _internal_request_put() const;
  ::etcdserverpb::PutRequest* _internal_mutable_request_put();
  public:

  // .etcdserverpb.DeleteRangeRequest request_delete_range = 3;
  bool has_request_delete_range() const;
  private:
  bool _internal_has_request_delete_range() const;
  public:
  void clear_request_delete_range();
  const ::etcdserverpb::DeleteRangeRequest& request_delete_range() const;
  ::etcdserverpb::DeleteRangeRequest* release_request_delete_range();
  ::etcdserverpb::DeleteRangeRequest* mutable_request_delete_range();
  void set_allocated_request_delete_range(::etcdserverpb::DeleteRangeRequest* request_delete_range);
  private:
  const ::etcdserverpb::DeleteRangeRequest& _internal_request_delete_range() const;
  ::etcdserverpb::DeleteRangeRequest* _internal_mutable_request_delete_range();
  public:

  // .etcdserverpb.TxnRequest request_txn = 4;
  bool has_request_txn() const;
  private:
  bool _internal_has_request_txn() const;
  public:
  void clear_request_txn();
  const ::etcdserverpb::TxnRequest& request_txn() const;
  ::etcdserverpb::TxnRequest* release_request_txn();
  ::etcdserverpb::TxnRequest* mutable_request_txn();
  void set_allocated_request_txn(::etcdserverpb::TxnRequest* request_txn);
  private:
  const ::etcdserverpb::TxnRequest& _internal_request_txn() const;
  ::etcdserverpb::TxnRequest* _internal_mutable_request_txn();
  public:

  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:etcdserverpb.RequestOp)
 private:
  class _Internal;
  void set_has_request_range();
  void set_has_request_put();
  void set_has_request_delete_range();
  void set_has_request_txn();

  inline bool has_request() const;
  inline void clear_has_request();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union RequestUnion {
    RequestUnion() {}
    ::etcdserverpb::RangeRequest* request_range_;
    ::etcdserverpb::PutRequest* request_put_;
    ::etcdserverpb::DeleteRangeRequest* request_delete_range_;
    ::etcdserverpb::TxnRequest* request_txn_;
  } request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ResponseOp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.ResponseOp) */ {
 public:
  ResponseOp();
  virtual ~ResponseOp();

  ResponseOp(const ResponseOp& from);
  ResponseOp(ResponseOp&& from) noexcept
    : ResponseOp() {
    *this = ::std::move(from);
  }

  inline ResponseOp& operator=(const ResponseOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseOp& operator=(ResponseOp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseOp& default_instance();

  enum ResponseCase {
    kResponseRange = 1,
    kResponsePut = 2,
    kResponseDeleteRange = 3,
    kResponseTxn = 4,
    RESPONSE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseOp* internal_default_instance() {
    return reinterpret_cast<const ResponseOp*>(
               &_ResponseOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ResponseOp& a, ResponseOp& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseOp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseOp* New() const final {
    return CreateMaybeMessage<ResponseOp>(nullptr);
  }

  ResponseOp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseOp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseOp& from);
  void MergeFrom(const ResponseOp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseOp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.ResponseOp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseRangeFieldNumber = 1,
    kResponsePutFieldNumber = 2,
    kResponseDeleteRangeFieldNumber = 3,
    kResponseTxnFieldNumber = 4,
  };
  // .etcdserverpb.RangeResponse response_range = 1;
  bool has_response_range() const;
  private:
  bool _internal_has_response_range() const;
  public:
  void clear_response_range();
  const ::etcdserverpb::RangeResponse& response_range() const;
  ::etcdserverpb::RangeResponse* release_response_range();
  ::etcdserverpb::RangeResponse* mutable_response_range();
  void set_allocated_response_range(::etcdserverpb::RangeResponse* response_range);
  private:
  const ::etcdserverpb::RangeResponse& _internal_response_range() const;
  ::etcdserverpb::RangeResponse* _internal_mutable_response_range();
  public:

  // .etcdserverpb.PutResponse response_put = 2;
  bool has_response_put() const;
  private:
  bool _internal_has_response_put() const;
  public:
  void clear_response_put();
  const ::etcdserverpb::PutResponse& response_put() const;
  ::etcdserverpb::PutResponse* release_response_put();
  ::etcdserverpb::PutResponse* mutable_response_put();
  void set_allocated_response_put(::etcdserverpb::PutResponse* response_put);
  private:
  const ::etcdserverpb::PutResponse& _internal_response_put() const;
  ::etcdserverpb::PutResponse* _internal_mutable_response_put();
  public:

  // .etcdserverpb.DeleteRangeResponse response_delete_range = 3;
  bool has_response_delete_range() const;
  private:
  bool _internal_has_response_delete_range() const;
  public:
  void clear_response_delete_range();
  const ::etcdserverpb::DeleteRangeResponse& response_delete_range() const;
  ::etcdserverpb::DeleteRangeResponse* release_response_delete_range();
  ::etcdserverpb::DeleteRangeResponse* mutable_response_delete_range();
  void set_allocated_response_delete_range(::etcdserverpb::DeleteRangeResponse* response_delete_range);
  private:
  const ::etcdserverpb::DeleteRangeResponse& _internal_response_delete_range() const;
  ::etcdserverpb::DeleteRangeResponse* _internal_mutable_response_delete_range();
  public:

  // .etcdserverpb.TxnResponse response_txn = 4;
  bool has_response_txn() const;
  private:
  bool _internal_has_response_txn() const;
  public:
  void clear_response_txn();
  const ::etcdserverpb::TxnResponse& response_txn() const;
  ::etcdserverpb::TxnResponse* release_response_txn();
  ::etcdserverpb::TxnResponse* mutable_response_txn();
  void set_allocated_response_txn(::etcdserverpb::TxnResponse* response_txn);
  private:
  const ::etcdserverpb::TxnResponse& _internal_response_txn() const;
  ::etcdserverpb::TxnResponse* _internal_mutable_response_txn();
  public:

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:etcdserverpb.ResponseOp)
 private:
  class _Internal;
  void set_has_response_range();
  void set_has_response_put();
  void set_has_response_delete_range();
  void set_has_response_txn();

  inline bool has_response() const;
  inline void clear_has_response();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ResponseUnion {
    ResponseUnion() {}
    ::etcdserverpb::RangeResponse* response_range_;
    ::etcdserverpb::PutResponse* response_put_;
    ::etcdserverpb::DeleteRangeResponse* response_delete_range_;
    ::etcdserverpb::TxnResponse* response_txn_;
  } response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class Compare :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.Compare) */ {
 public:
  Compare();
  virtual ~Compare();

  Compare(const Compare& from);
  Compare(Compare&& from) noexcept
    : Compare() {
    *this = ::std::move(from);
  }

  inline Compare& operator=(const Compare& from) {
    CopyFrom(from);
    return *this;
  }
  inline Compare& operator=(Compare&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Compare& default_instance();

  enum TargetUnionCase {
    kVersion = 4,
    kCreateRevision = 5,
    kModRevision = 6,
    kValue = 7,
    kLease = 8,
    TARGET_UNION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Compare* internal_default_instance() {
    return reinterpret_cast<const Compare*>(
               &_Compare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Compare& a, Compare& b) {
    a.Swap(&b);
  }
  inline void Swap(Compare* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Compare* New() const final {
    return CreateMaybeMessage<Compare>(nullptr);
  }

  Compare* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Compare>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Compare& from);
  void MergeFrom(const Compare& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Compare* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.Compare";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Compare_CompareResult CompareResult;
  static constexpr CompareResult EQUAL =
    Compare_CompareResult_EQUAL;
  static constexpr CompareResult GREATER =
    Compare_CompareResult_GREATER;
  static constexpr CompareResult LESS =
    Compare_CompareResult_LESS;
  static constexpr CompareResult NOT_EQUAL =
    Compare_CompareResult_NOT_EQUAL;
  static inline bool CompareResult_IsValid(int value) {
    return Compare_CompareResult_IsValid(value);
  }
  static constexpr CompareResult CompareResult_MIN =
    Compare_CompareResult_CompareResult_MIN;
  static constexpr CompareResult CompareResult_MAX =
    Compare_CompareResult_CompareResult_MAX;
  static constexpr int CompareResult_ARRAYSIZE =
    Compare_CompareResult_CompareResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CompareResult_descriptor() {
    return Compare_CompareResult_descriptor();
  }
  template<typename T>
  static inline const std::string& CompareResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CompareResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CompareResult_Name.");
    return Compare_CompareResult_Name(enum_t_value);
  }
  static inline bool CompareResult_Parse(const std::string& name,
      CompareResult* value) {
    return Compare_CompareResult_Parse(name, value);
  }

  typedef Compare_CompareTarget CompareTarget;
  static constexpr CompareTarget VERSION =
    Compare_CompareTarget_VERSION;
  static constexpr CompareTarget CREATE =
    Compare_CompareTarget_CREATE;
  static constexpr CompareTarget MOD =
    Compare_CompareTarget_MOD;
  static constexpr CompareTarget VALUE =
    Compare_CompareTarget_VALUE;
  static constexpr CompareTarget LEASE =
    Compare_CompareTarget_LEASE;
  static inline bool CompareTarget_IsValid(int value) {
    return Compare_CompareTarget_IsValid(value);
  }
  static constexpr CompareTarget CompareTarget_MIN =
    Compare_CompareTarget_CompareTarget_MIN;
  static constexpr CompareTarget CompareTarget_MAX =
    Compare_CompareTarget_CompareTarget_MAX;
  static constexpr int CompareTarget_ARRAYSIZE =
    Compare_CompareTarget_CompareTarget_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CompareTarget_descriptor() {
    return Compare_CompareTarget_descriptor();
  }
  template<typename T>
  static inline const std::string& CompareTarget_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CompareTarget>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CompareTarget_Name.");
    return Compare_CompareTarget_Name(enum_t_value);
  }
  static inline bool CompareTarget_Parse(const std::string& name,
      CompareTarget* value) {
    return Compare_CompareTarget_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 3,
    kRangeEndFieldNumber = 64,
    kResultFieldNumber = 1,
    kTargetFieldNumber = 2,
    kVersionFieldNumber = 4,
    kCreateRevisionFieldNumber = 5,
    kModRevisionFieldNumber = 6,
    kValueFieldNumber = 7,
    kLeaseFieldNumber = 8,
  };
  // bytes key = 3;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes range_end = 64;
  void clear_range_end();
  const std::string& range_end() const;
  void set_range_end(const std::string& value);
  void set_range_end(std::string&& value);
  void set_range_end(const char* value);
  void set_range_end(const void* value, size_t size);
  std::string* mutable_range_end();
  std::string* release_range_end();
  void set_allocated_range_end(std::string* range_end);
  private:
  const std::string& _internal_range_end() const;
  void _internal_set_range_end(const std::string& value);
  std::string* _internal_mutable_range_end();
  public:

  // .etcdserverpb.Compare.CompareResult result = 1;
  void clear_result();
  ::etcdserverpb::Compare_CompareResult result() const;
  void set_result(::etcdserverpb::Compare_CompareResult value);
  private:
  ::etcdserverpb::Compare_CompareResult _internal_result() const;
  void _internal_set_result(::etcdserverpb::Compare_CompareResult value);
  public:

  // .etcdserverpb.Compare.CompareTarget target = 2;
  void clear_target();
  ::etcdserverpb::Compare_CompareTarget target() const;
  void set_target(::etcdserverpb::Compare_CompareTarget value);
  private:
  ::etcdserverpb::Compare_CompareTarget _internal_target() const;
  void _internal_set_target(::etcdserverpb::Compare_CompareTarget value);
  public:

  // int64 version = 4;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 create_revision = 5;
  private:
  bool _internal_has_create_revision() const;
  public:
  void clear_create_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 create_revision() const;
  void set_create_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_create_revision() const;
  void _internal_set_create_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 mod_revision = 6;
  private:
  bool _internal_has_mod_revision() const;
  public:
  void clear_mod_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 mod_revision() const;
  void set_mod_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mod_revision() const;
  void _internal_set_mod_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bytes value = 7;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int64 lease = 8;
  private:
  bool _internal_has_lease() const;
  public:
  void clear_lease();
  ::PROTOBUF_NAMESPACE_ID::int64 lease() const;
  void set_lease(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lease() const;
  void _internal_set_lease(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  void clear_target_union();
  TargetUnionCase target_union_case() const;
  // @@protoc_insertion_point(class_scope:etcdserverpb.Compare)
 private:
  class _Internal;
  void set_has_version();
  void set_has_create_revision();
  void set_has_mod_revision();
  void set_has_value();
  void set_has_lease();

  inline bool has_target_union() const;
  inline void clear_has_target_union();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr range_end_;
  int result_;
  int target_;
  union TargetUnionUnion {
    TargetUnionUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 version_;
    ::PROTOBUF_NAMESPACE_ID::int64 create_revision_;
    ::PROTOBUF_NAMESPACE_ID::int64 mod_revision_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::PROTOBUF_NAMESPACE_ID::int64 lease_;
  } target_union_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class TxnRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.TxnRequest) */ {
 public:
  TxnRequest();
  virtual ~TxnRequest();

  TxnRequest(const TxnRequest& from);
  TxnRequest(TxnRequest&& from) noexcept
    : TxnRequest() {
    *this = ::std::move(from);
  }

  inline TxnRequest& operator=(const TxnRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxnRequest& operator=(TxnRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxnRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxnRequest* internal_default_instance() {
    return reinterpret_cast<const TxnRequest*>(
               &_TxnRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TxnRequest& a, TxnRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TxnRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxnRequest* New() const final {
    return CreateMaybeMessage<TxnRequest>(nullptr);
  }

  TxnRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxnRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxnRequest& from);
  void MergeFrom(const TxnRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxnRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.TxnRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompareFieldNumber = 1,
    kSuccessFieldNumber = 2,
    kFailureFieldNumber = 3,
  };
  // repeated .etcdserverpb.Compare compare = 1;
  int compare_size() const;
  private:
  int _internal_compare_size() const;
  public:
  void clear_compare();
  ::etcdserverpb::Compare* mutable_compare(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Compare >*
      mutable_compare();
  private:
  const ::etcdserverpb::Compare& _internal_compare(int index) const;
  ::etcdserverpb::Compare* _internal_add_compare();
  public:
  const ::etcdserverpb::Compare& compare(int index) const;
  ::etcdserverpb::Compare* add_compare();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Compare >&
      compare() const;

  // repeated .etcdserverpb.RequestOp success = 2;
  int success_size() const;
  private:
  int _internal_success_size() const;
  public:
  void clear_success();
  ::etcdserverpb::RequestOp* mutable_success(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::RequestOp >*
      mutable_success();
  private:
  const ::etcdserverpb::RequestOp& _internal_success(int index) const;
  ::etcdserverpb::RequestOp* _internal_add_success();
  public:
  const ::etcdserverpb::RequestOp& success(int index) const;
  ::etcdserverpb::RequestOp* add_success();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::RequestOp >&
      success() const;

  // repeated .etcdserverpb.RequestOp failure = 3;
  int failure_size() const;
  private:
  int _internal_failure_size() const;
  public:
  void clear_failure();
  ::etcdserverpb::RequestOp* mutable_failure(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::RequestOp >*
      mutable_failure();
  private:
  const ::etcdserverpb::RequestOp& _internal_failure(int index) const;
  ::etcdserverpb::RequestOp* _internal_add_failure();
  public:
  const ::etcdserverpb::RequestOp& failure(int index) const;
  ::etcdserverpb::RequestOp* add_failure();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::RequestOp >&
      failure() const;

  // @@protoc_insertion_point(class_scope:etcdserverpb.TxnRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Compare > compare_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::RequestOp > success_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::RequestOp > failure_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class TxnResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.TxnResponse) */ {
 public:
  TxnResponse();
  virtual ~TxnResponse();

  TxnResponse(const TxnResponse& from);
  TxnResponse(TxnResponse&& from) noexcept
    : TxnResponse() {
    *this = ::std::move(from);
  }

  inline TxnResponse& operator=(const TxnResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxnResponse& operator=(TxnResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxnResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TxnResponse* internal_default_instance() {
    return reinterpret_cast<const TxnResponse*>(
               &_TxnResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TxnResponse& a, TxnResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TxnResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxnResponse* New() const final {
    return CreateMaybeMessage<TxnResponse>(nullptr);
  }

  TxnResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxnResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxnResponse& from);
  void MergeFrom(const TxnResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxnResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.TxnResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kSucceededFieldNumber = 2,
  };
  // repeated .etcdserverpb.ResponseOp responses = 3;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::etcdserverpb::ResponseOp* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::ResponseOp >*
      mutable_responses();
  private:
  const ::etcdserverpb::ResponseOp& _internal_responses(int index) const;
  ::etcdserverpb::ResponseOp* _internal_add_responses();
  public:
  const ::etcdserverpb::ResponseOp& responses(int index) const;
  ::etcdserverpb::ResponseOp* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::ResponseOp >&
      responses() const;

  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // bool succeeded = 2;
  void clear_succeeded();
  bool succeeded() const;
  void set_succeeded(bool value);
  private:
  bool _internal_succeeded() const;
  void _internal_set_succeeded(bool value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.TxnResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::ResponseOp > responses_;
  ::etcdserverpb::ResponseHeader* header_;
  bool succeeded_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class CompactionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.CompactionRequest) */ {
 public:
  CompactionRequest();
  virtual ~CompactionRequest();

  CompactionRequest(const CompactionRequest& from);
  CompactionRequest(CompactionRequest&& from) noexcept
    : CompactionRequest() {
    *this = ::std::move(from);
  }

  inline CompactionRequest& operator=(const CompactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompactionRequest& operator=(CompactionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompactionRequest* internal_default_instance() {
    return reinterpret_cast<const CompactionRequest*>(
               &_CompactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CompactionRequest& a, CompactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CompactionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompactionRequest* New() const final {
    return CreateMaybeMessage<CompactionRequest>(nullptr);
  }

  CompactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompactionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompactionRequest& from);
  void MergeFrom(const CompactionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompactionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.CompactionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRevisionFieldNumber = 1,
    kPhysicalFieldNumber = 2,
  };
  // int64 revision = 1;
  void clear_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 revision() const;
  void set_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_revision() const;
  void _internal_set_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool physical = 2;
  void clear_physical();
  bool physical() const;
  void set_physical(bool value);
  private:
  bool _internal_physical() const;
  void _internal_set_physical(bool value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.CompactionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 revision_;
  bool physical_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class CompactionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.CompactionResponse) */ {
 public:
  CompactionResponse();
  virtual ~CompactionResponse();

  CompactionResponse(const CompactionResponse& from);
  CompactionResponse(CompactionResponse&& from) noexcept
    : CompactionResponse() {
    *this = ::std::move(from);
  }

  inline CompactionResponse& operator=(const CompactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompactionResponse& operator=(CompactionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompactionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompactionResponse* internal_default_instance() {
    return reinterpret_cast<const CompactionResponse*>(
               &_CompactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CompactionResponse& a, CompactionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CompactionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompactionResponse* New() const final {
    return CreateMaybeMessage<CompactionResponse>(nullptr);
  }

  CompactionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompactionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompactionResponse& from);
  void MergeFrom(const CompactionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompactionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.CompactionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.CompactionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class HashRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.HashRequest) */ {
 public:
  HashRequest();
  virtual ~HashRequest();

  HashRequest(const HashRequest& from);
  HashRequest(HashRequest&& from) noexcept
    : HashRequest() {
    *this = ::std::move(from);
  }

  inline HashRequest& operator=(const HashRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashRequest& operator=(HashRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HashRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HashRequest* internal_default_instance() {
    return reinterpret_cast<const HashRequest*>(
               &_HashRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(HashRequest& a, HashRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HashRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HashRequest* New() const final {
    return CreateMaybeMessage<HashRequest>(nullptr);
  }

  HashRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HashRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HashRequest& from);
  void MergeFrom(const HashRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HashRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.HashRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:etcdserverpb.HashRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class HashKVRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.HashKVRequest) */ {
 public:
  HashKVRequest();
  virtual ~HashKVRequest();

  HashKVRequest(const HashKVRequest& from);
  HashKVRequest(HashKVRequest&& from) noexcept
    : HashKVRequest() {
    *this = ::std::move(from);
  }

  inline HashKVRequest& operator=(const HashKVRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashKVRequest& operator=(HashKVRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HashKVRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HashKVRequest* internal_default_instance() {
    return reinterpret_cast<const HashKVRequest*>(
               &_HashKVRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(HashKVRequest& a, HashKVRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HashKVRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HashKVRequest* New() const final {
    return CreateMaybeMessage<HashKVRequest>(nullptr);
  }

  HashKVRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HashKVRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HashKVRequest& from);
  void MergeFrom(const HashKVRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HashKVRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.HashKVRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRevisionFieldNumber = 1,
  };
  // int64 revision = 1;
  void clear_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 revision() const;
  void set_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_revision() const;
  void _internal_set_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.HashKVRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 revision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class HashKVResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.HashKVResponse) */ {
 public:
  HashKVResponse();
  virtual ~HashKVResponse();

  HashKVResponse(const HashKVResponse& from);
  HashKVResponse(HashKVResponse&& from) noexcept
    : HashKVResponse() {
    *this = ::std::move(from);
  }

  inline HashKVResponse& operator=(const HashKVResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashKVResponse& operator=(HashKVResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HashKVResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HashKVResponse* internal_default_instance() {
    return reinterpret_cast<const HashKVResponse*>(
               &_HashKVResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(HashKVResponse& a, HashKVResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HashKVResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HashKVResponse* New() const final {
    return CreateMaybeMessage<HashKVResponse>(nullptr);
  }

  HashKVResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HashKVResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HashKVResponse& from);
  void MergeFrom(const HashKVResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HashKVResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.HashKVResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kCompactRevisionFieldNumber = 3,
    kHashFieldNumber = 2,
  };
  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // int64 compact_revision = 3;
  void clear_compact_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 compact_revision() const;
  void set_compact_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_compact_revision() const;
  void _internal_set_compact_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 hash = 2;
  void clear_hash();
  ::PROTOBUF_NAMESPACE_ID::uint32 hash() const;
  void set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hash() const;
  void _internal_set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.HashKVResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::etcdserverpb::ResponseHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::int64 compact_revision_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class HashResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.HashResponse) */ {
 public:
  HashResponse();
  virtual ~HashResponse();

  HashResponse(const HashResponse& from);
  HashResponse(HashResponse&& from) noexcept
    : HashResponse() {
    *this = ::std::move(from);
  }

  inline HashResponse& operator=(const HashResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashResponse& operator=(HashResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HashResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HashResponse* internal_default_instance() {
    return reinterpret_cast<const HashResponse*>(
               &_HashResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(HashResponse& a, HashResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HashResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HashResponse* New() const final {
    return CreateMaybeMessage<HashResponse>(nullptr);
  }

  HashResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HashResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HashResponse& from);
  void MergeFrom(const HashResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HashResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.HashResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kHashFieldNumber = 2,
  };
  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // uint32 hash = 2;
  void clear_hash();
  ::PROTOBUF_NAMESPACE_ID::uint32 hash() const;
  void set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hash() const;
  void _internal_set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.HashResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::etcdserverpb::ResponseHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class SnapshotRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.SnapshotRequest) */ {
 public:
  SnapshotRequest();
  virtual ~SnapshotRequest();

  SnapshotRequest(const SnapshotRequest& from);
  SnapshotRequest(SnapshotRequest&& from) noexcept
    : SnapshotRequest() {
    *this = ::std::move(from);
  }

  inline SnapshotRequest& operator=(const SnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotRequest& operator=(SnapshotRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SnapshotRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const SnapshotRequest*>(
               &_SnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SnapshotRequest& a, SnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnapshotRequest* New() const final {
    return CreateMaybeMessage<SnapshotRequest>(nullptr);
  }

  SnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SnapshotRequest& from);
  void MergeFrom(const SnapshotRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.SnapshotRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:etcdserverpb.SnapshotRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class SnapshotResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.SnapshotResponse) */ {
 public:
  SnapshotResponse();
  virtual ~SnapshotResponse();

  SnapshotResponse(const SnapshotResponse& from);
  SnapshotResponse(SnapshotResponse&& from) noexcept
    : SnapshotResponse() {
    *this = ::std::move(from);
  }

  inline SnapshotResponse& operator=(const SnapshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotResponse& operator=(SnapshotResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SnapshotResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapshotResponse* internal_default_instance() {
    return reinterpret_cast<const SnapshotResponse*>(
               &_SnapshotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SnapshotResponse& a, SnapshotResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnapshotResponse* New() const final {
    return CreateMaybeMessage<SnapshotResponse>(nullptr);
  }

  SnapshotResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SnapshotResponse& from);
  void MergeFrom(const SnapshotResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.SnapshotResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kRemainingBytesFieldNumber = 2,
  };
  // bytes blob = 3;
  void clear_blob();
  const std::string& blob() const;
  void set_blob(const std::string& value);
  void set_blob(std::string&& value);
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  std::string* mutable_blob();
  std::string* release_blob();
  void set_allocated_blob(std::string* blob);
  private:
  const std::string& _internal_blob() const;
  void _internal_set_blob(const std::string& value);
  std::string* _internal_mutable_blob();
  public:

  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // uint64 remaining_bytes = 2;
  void clear_remaining_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 remaining_bytes() const;
  void set_remaining_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_remaining_bytes() const;
  void _internal_set_remaining_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.SnapshotResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_;
  ::etcdserverpb::ResponseHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::uint64 remaining_bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class WatchRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.WatchRequest) */ {
 public:
  WatchRequest();
  virtual ~WatchRequest();

  WatchRequest(const WatchRequest& from);
  WatchRequest(WatchRequest&& from) noexcept
    : WatchRequest() {
    *this = ::std::move(from);
  }

  inline WatchRequest& operator=(const WatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchRequest& operator=(WatchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchRequest& default_instance();

  enum RequestUnionCase {
    kCreateRequest = 1,
    kCancelRequest = 2,
    kProgressRequest = 3,
    REQUEST_UNION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchRequest* internal_default_instance() {
    return reinterpret_cast<const WatchRequest*>(
               &_WatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(WatchRequest& a, WatchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchRequest* New() const final {
    return CreateMaybeMessage<WatchRequest>(nullptr);
  }

  WatchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchRequest& from);
  void MergeFrom(const WatchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.WatchRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreateRequestFieldNumber = 1,
    kCancelRequestFieldNumber = 2,
    kProgressRequestFieldNumber = 3,
  };
  // .etcdserverpb.WatchCreateRequest create_request = 1;
  bool has_create_request() const;
  private:
  bool _internal_has_create_request() const;
  public:
  void clear_create_request();
  const ::etcdserverpb::WatchCreateRequest& create_request() const;
  ::etcdserverpb::WatchCreateRequest* release_create_request();
  ::etcdserverpb::WatchCreateRequest* mutable_create_request();
  void set_allocated_create_request(::etcdserverpb::WatchCreateRequest* create_request);
  private:
  const ::etcdserverpb::WatchCreateRequest& _internal_create_request() const;
  ::etcdserverpb::WatchCreateRequest* _internal_mutable_create_request();
  public:

  // .etcdserverpb.WatchCancelRequest cancel_request = 2;
  bool has_cancel_request() const;
  private:
  bool _internal_has_cancel_request() const;
  public:
  void clear_cancel_request();
  const ::etcdserverpb::WatchCancelRequest& cancel_request() const;
  ::etcdserverpb::WatchCancelRequest* release_cancel_request();
  ::etcdserverpb::WatchCancelRequest* mutable_cancel_request();
  void set_allocated_cancel_request(::etcdserverpb::WatchCancelRequest* cancel_request);
  private:
  const ::etcdserverpb::WatchCancelRequest& _internal_cancel_request() const;
  ::etcdserverpb::WatchCancelRequest* _internal_mutable_cancel_request();
  public:

  // .etcdserverpb.WatchProgressRequest progress_request = 3;
  bool has_progress_request() const;
  private:
  bool _internal_has_progress_request() const;
  public:
  void clear_progress_request();
  const ::etcdserverpb::WatchProgressRequest& progress_request() const;
  ::etcdserverpb::WatchProgressRequest* release_progress_request();
  ::etcdserverpb::WatchProgressRequest* mutable_progress_request();
  void set_allocated_progress_request(::etcdserverpb::WatchProgressRequest* progress_request);
  private:
  const ::etcdserverpb::WatchProgressRequest& _internal_progress_request() const;
  ::etcdserverpb::WatchProgressRequest* _internal_mutable_progress_request();
  public:

  void clear_request_union();
  RequestUnionCase request_union_case() const;
  // @@protoc_insertion_point(class_scope:etcdserverpb.WatchRequest)
 private:
  class _Internal;
  void set_has_create_request();
  void set_has_cancel_request();
  void set_has_progress_request();

  inline bool has_request_union() const;
  inline void clear_has_request_union();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union RequestUnionUnion {
    RequestUnionUnion() {}
    ::etcdserverpb::WatchCreateRequest* create_request_;
    ::etcdserverpb::WatchCancelRequest* cancel_request_;
    ::etcdserverpb::WatchProgressRequest* progress_request_;
  } request_union_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class WatchCreateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.WatchCreateRequest) */ {
 public:
  WatchCreateRequest();
  virtual ~WatchCreateRequest();

  WatchCreateRequest(const WatchCreateRequest& from);
  WatchCreateRequest(WatchCreateRequest&& from) noexcept
    : WatchCreateRequest() {
    *this = ::std::move(from);
  }

  inline WatchCreateRequest& operator=(const WatchCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchCreateRequest& operator=(WatchCreateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchCreateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchCreateRequest* internal_default_instance() {
    return reinterpret_cast<const WatchCreateRequest*>(
               &_WatchCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(WatchCreateRequest& a, WatchCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchCreateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchCreateRequest* New() const final {
    return CreateMaybeMessage<WatchCreateRequest>(nullptr);
  }

  WatchCreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchCreateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchCreateRequest& from);
  void MergeFrom(const WatchCreateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchCreateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.WatchCreateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef WatchCreateRequest_FilterType FilterType;
  static constexpr FilterType NOPUT =
    WatchCreateRequest_FilterType_NOPUT;
  static constexpr FilterType NODELETE =
    WatchCreateRequest_FilterType_NODELETE;
  static inline bool FilterType_IsValid(int value) {
    return WatchCreateRequest_FilterType_IsValid(value);
  }
  static constexpr FilterType FilterType_MIN =
    WatchCreateRequest_FilterType_FilterType_MIN;
  static constexpr FilterType FilterType_MAX =
    WatchCreateRequest_FilterType_FilterType_MAX;
  static constexpr int FilterType_ARRAYSIZE =
    WatchCreateRequest_FilterType_FilterType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FilterType_descriptor() {
    return WatchCreateRequest_FilterType_descriptor();
  }
  template<typename T>
  static inline const std::string& FilterType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FilterType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FilterType_Name.");
    return WatchCreateRequest_FilterType_Name(enum_t_value);
  }
  static inline bool FilterType_Parse(const std::string& name,
      FilterType* value) {
    return WatchCreateRequest_FilterType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFiltersFieldNumber = 5,
    kKeyFieldNumber = 1,
    kRangeEndFieldNumber = 2,
    kStartRevisionFieldNumber = 3,
    kWatchIdFieldNumber = 7,
    kProgressNotifyFieldNumber = 4,
    kPrevKvFieldNumber = 6,
    kFragmentFieldNumber = 8,
  };
  // repeated .etcdserverpb.WatchCreateRequest.FilterType filters = 5;
  int filters_size() const;
  private:
  int _internal_filters_size() const;
  public:
  void clear_filters();
  private:
  ::etcdserverpb::WatchCreateRequest_FilterType _internal_filters(int index) const;
  void _internal_add_filters(::etcdserverpb::WatchCreateRequest_FilterType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_filters();
  public:
  ::etcdserverpb::WatchCreateRequest_FilterType filters(int index) const;
  void set_filters(int index, ::etcdserverpb::WatchCreateRequest_FilterType value);
  void add_filters(::etcdserverpb::WatchCreateRequest_FilterType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& filters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_filters();

  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes range_end = 2;
  void clear_range_end();
  const std::string& range_end() const;
  void set_range_end(const std::string& value);
  void set_range_end(std::string&& value);
  void set_range_end(const char* value);
  void set_range_end(const void* value, size_t size);
  std::string* mutable_range_end();
  std::string* release_range_end();
  void set_allocated_range_end(std::string* range_end);
  private:
  const std::string& _internal_range_end() const;
  void _internal_set_range_end(const std::string& value);
  std::string* _internal_mutable_range_end();
  public:

  // int64 start_revision = 3;
  void clear_start_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 start_revision() const;
  void set_start_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_revision() const;
  void _internal_set_start_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 watch_id = 7;
  void clear_watch_id();
  ::PROTOBUF_NAMESPACE_ID::int64 watch_id() const;
  void set_watch_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_watch_id() const;
  void _internal_set_watch_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool progress_notify = 4;
  void clear_progress_notify();
  bool progress_notify() const;
  void set_progress_notify(bool value);
  private:
  bool _internal_progress_notify() const;
  void _internal_set_progress_notify(bool value);
  public:

  // bool prev_kv = 6;
  void clear_prev_kv();
  bool prev_kv() const;
  void set_prev_kv(bool value);
  private:
  bool _internal_prev_kv() const;
  void _internal_set_prev_kv(bool value);
  public:

  // bool fragment = 8;
  void clear_fragment();
  bool fragment() const;
  void set_fragment(bool value);
  private:
  bool _internal_fragment() const;
  void _internal_set_fragment(bool value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.WatchCreateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> filters_;
  mutable std::atomic<int> _filters_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr range_end_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_revision_;
  ::PROTOBUF_NAMESPACE_ID::int64 watch_id_;
  bool progress_notify_;
  bool prev_kv_;
  bool fragment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class WatchCancelRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.WatchCancelRequest) */ {
 public:
  WatchCancelRequest();
  virtual ~WatchCancelRequest();

  WatchCancelRequest(const WatchCancelRequest& from);
  WatchCancelRequest(WatchCancelRequest&& from) noexcept
    : WatchCancelRequest() {
    *this = ::std::move(from);
  }

  inline WatchCancelRequest& operator=(const WatchCancelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchCancelRequest& operator=(WatchCancelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchCancelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchCancelRequest* internal_default_instance() {
    return reinterpret_cast<const WatchCancelRequest*>(
               &_WatchCancelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(WatchCancelRequest& a, WatchCancelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchCancelRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchCancelRequest* New() const final {
    return CreateMaybeMessage<WatchCancelRequest>(nullptr);
  }

  WatchCancelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchCancelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchCancelRequest& from);
  void MergeFrom(const WatchCancelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchCancelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.WatchCancelRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWatchIdFieldNumber = 1,
  };
  // int64 watch_id = 1;
  void clear_watch_id();
  ::PROTOBUF_NAMESPACE_ID::int64 watch_id() const;
  void set_watch_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_watch_id() const;
  void _internal_set_watch_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.WatchCancelRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 watch_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class WatchProgressRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.WatchProgressRequest) */ {
 public:
  WatchProgressRequest();
  virtual ~WatchProgressRequest();

  WatchProgressRequest(const WatchProgressRequest& from);
  WatchProgressRequest(WatchProgressRequest&& from) noexcept
    : WatchProgressRequest() {
    *this = ::std::move(from);
  }

  inline WatchProgressRequest& operator=(const WatchProgressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchProgressRequest& operator=(WatchProgressRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchProgressRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchProgressRequest* internal_default_instance() {
    return reinterpret_cast<const WatchProgressRequest*>(
               &_WatchProgressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(WatchProgressRequest& a, WatchProgressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchProgressRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchProgressRequest* New() const final {
    return CreateMaybeMessage<WatchProgressRequest>(nullptr);
  }

  WatchProgressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchProgressRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchProgressRequest& from);
  void MergeFrom(const WatchProgressRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchProgressRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.WatchProgressRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:etcdserverpb.WatchProgressRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class WatchResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.WatchResponse) */ {
 public:
  WatchResponse();
  virtual ~WatchResponse();

  WatchResponse(const WatchResponse& from);
  WatchResponse(WatchResponse&& from) noexcept
    : WatchResponse() {
    *this = ::std::move(from);
  }

  inline WatchResponse& operator=(const WatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchResponse& operator=(WatchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WatchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WatchResponse* internal_default_instance() {
    return reinterpret_cast<const WatchResponse*>(
               &_WatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(WatchResponse& a, WatchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchResponse* New() const final {
    return CreateMaybeMessage<WatchResponse>(nullptr);
  }

  WatchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchResponse& from);
  void MergeFrom(const WatchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.WatchResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 11,
    kCancelReasonFieldNumber = 6,
    kHeaderFieldNumber = 1,
    kWatchIdFieldNumber = 2,
    kCompactRevisionFieldNumber = 5,
    kCreatedFieldNumber = 3,
    kCanceledFieldNumber = 4,
    kFragmentFieldNumber = 7,
  };
  // repeated .mvccpb.Event events = 11;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::mvccpb::Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mvccpb::Event >*
      mutable_events();
  private:
  const ::mvccpb::Event& _internal_events(int index) const;
  ::mvccpb::Event* _internal_add_events();
  public:
  const ::mvccpb::Event& events(int index) const;
  ::mvccpb::Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mvccpb::Event >&
      events() const;

  // string cancel_reason = 6;
  void clear_cancel_reason();
  const std::string& cancel_reason() const;
  void set_cancel_reason(const std::string& value);
  void set_cancel_reason(std::string&& value);
  void set_cancel_reason(const char* value);
  void set_cancel_reason(const char* value, size_t size);
  std::string* mutable_cancel_reason();
  std::string* release_cancel_reason();
  void set_allocated_cancel_reason(std::string* cancel_reason);
  private:
  const std::string& _internal_cancel_reason() const;
  void _internal_set_cancel_reason(const std::string& value);
  std::string* _internal_mutable_cancel_reason();
  public:

  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // int64 watch_id = 2;
  void clear_watch_id();
  ::PROTOBUF_NAMESPACE_ID::int64 watch_id() const;
  void set_watch_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_watch_id() const;
  void _internal_set_watch_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 compact_revision = 5;
  void clear_compact_revision();
  ::PROTOBUF_NAMESPACE_ID::int64 compact_revision() const;
  void set_compact_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_compact_revision() const;
  void _internal_set_compact_revision(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool created = 3;
  void clear_created();
  bool created() const;
  void set_created(bool value);
  private:
  bool _internal_created() const;
  void _internal_set_created(bool value);
  public:

  // bool canceled = 4;
  void clear_canceled();
  bool canceled() const;
  void set_canceled(bool value);
  private:
  bool _internal_canceled() const;
  void _internal_set_canceled(bool value);
  public:

  // bool fragment = 7;
  void clear_fragment();
  bool fragment() const;
  void set_fragment(bool value);
  private:
  bool _internal_fragment() const;
  void _internal_set_fragment(bool value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.WatchResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mvccpb::Event > events_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cancel_reason_;
  ::etcdserverpb::ResponseHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::int64 watch_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 compact_revision_;
  bool created_;
  bool canceled_;
  bool fragment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class LeaseGrantRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.LeaseGrantRequest) */ {
 public:
  LeaseGrantRequest();
  virtual ~LeaseGrantRequest();

  LeaseGrantRequest(const LeaseGrantRequest& from);
  LeaseGrantRequest(LeaseGrantRequest&& from) noexcept
    : LeaseGrantRequest() {
    *this = ::std::move(from);
  }

  inline LeaseGrantRequest& operator=(const LeaseGrantRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaseGrantRequest& operator=(LeaseGrantRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaseGrantRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaseGrantRequest* internal_default_instance() {
    return reinterpret_cast<const LeaseGrantRequest*>(
               &_LeaseGrantRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(LeaseGrantRequest& a, LeaseGrantRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaseGrantRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaseGrantRequest* New() const final {
    return CreateMaybeMessage<LeaseGrantRequest>(nullptr);
  }

  LeaseGrantRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaseGrantRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaseGrantRequest& from);
  void MergeFrom(const LeaseGrantRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaseGrantRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.LeaseGrantRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTTLFieldNumber = 1,
    kIDFieldNumber = 2,
  };
  // int64 TTL = 1;
  void clear_ttl();
  ::PROTOBUF_NAMESPACE_ID::int64 ttl() const;
  void set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ttl() const;
  void _internal_set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 ID = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.LeaseGrantRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 ttl_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class LeaseGrantResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.LeaseGrantResponse) */ {
 public:
  LeaseGrantResponse();
  virtual ~LeaseGrantResponse();

  LeaseGrantResponse(const LeaseGrantResponse& from);
  LeaseGrantResponse(LeaseGrantResponse&& from) noexcept
    : LeaseGrantResponse() {
    *this = ::std::move(from);
  }

  inline LeaseGrantResponse& operator=(const LeaseGrantResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaseGrantResponse& operator=(LeaseGrantResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaseGrantResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaseGrantResponse* internal_default_instance() {
    return reinterpret_cast<const LeaseGrantResponse*>(
               &_LeaseGrantResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(LeaseGrantResponse& a, LeaseGrantResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaseGrantResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaseGrantResponse* New() const final {
    return CreateMaybeMessage<LeaseGrantResponse>(nullptr);
  }

  LeaseGrantResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaseGrantResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaseGrantResponse& from);
  void MergeFrom(const LeaseGrantResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaseGrantResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.LeaseGrantResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kIDFieldNumber = 2,
    kTTLFieldNumber = 3,
  };
  // string error = 4;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // int64 ID = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 TTL = 3;
  void clear_ttl();
  ::PROTOBUF_NAMESPACE_ID::int64 ttl() const;
  void set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ttl() const;
  void _internal_set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.LeaseGrantResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::etcdserverpb::ResponseHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 ttl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class LeaseRevokeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.LeaseRevokeRequest) */ {
 public:
  LeaseRevokeRequest();
  virtual ~LeaseRevokeRequest();

  LeaseRevokeRequest(const LeaseRevokeRequest& from);
  LeaseRevokeRequest(LeaseRevokeRequest&& from) noexcept
    : LeaseRevokeRequest() {
    *this = ::std::move(from);
  }

  inline LeaseRevokeRequest& operator=(const LeaseRevokeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaseRevokeRequest& operator=(LeaseRevokeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaseRevokeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaseRevokeRequest* internal_default_instance() {
    return reinterpret_cast<const LeaseRevokeRequest*>(
               &_LeaseRevokeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(LeaseRevokeRequest& a, LeaseRevokeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaseRevokeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaseRevokeRequest* New() const final {
    return CreateMaybeMessage<LeaseRevokeRequest>(nullptr);
  }

  LeaseRevokeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaseRevokeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaseRevokeRequest& from);
  void MergeFrom(const LeaseRevokeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaseRevokeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.LeaseRevokeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
  };
  // int64 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.LeaseRevokeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class LeaseRevokeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.LeaseRevokeResponse) */ {
 public:
  LeaseRevokeResponse();
  virtual ~LeaseRevokeResponse();

  LeaseRevokeResponse(const LeaseRevokeResponse& from);
  LeaseRevokeResponse(LeaseRevokeResponse&& from) noexcept
    : LeaseRevokeResponse() {
    *this = ::std::move(from);
  }

  inline LeaseRevokeResponse& operator=(const LeaseRevokeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaseRevokeResponse& operator=(LeaseRevokeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaseRevokeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaseRevokeResponse* internal_default_instance() {
    return reinterpret_cast<const LeaseRevokeResponse*>(
               &_LeaseRevokeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(LeaseRevokeResponse& a, LeaseRevokeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaseRevokeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaseRevokeResponse* New() const final {
    return CreateMaybeMessage<LeaseRevokeResponse>(nullptr);
  }

  LeaseRevokeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaseRevokeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaseRevokeResponse& from);
  void MergeFrom(const LeaseRevokeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaseRevokeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.LeaseRevokeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.LeaseRevokeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class LeaseCheckpoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.LeaseCheckpoint) */ {
 public:
  LeaseCheckpoint();
  virtual ~LeaseCheckpoint();

  LeaseCheckpoint(const LeaseCheckpoint& from);
  LeaseCheckpoint(LeaseCheckpoint&& from) noexcept
    : LeaseCheckpoint() {
    *this = ::std::move(from);
  }

  inline LeaseCheckpoint& operator=(const LeaseCheckpoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaseCheckpoint& operator=(LeaseCheckpoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaseCheckpoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaseCheckpoint* internal_default_instance() {
    return reinterpret_cast<const LeaseCheckpoint*>(
               &_LeaseCheckpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(LeaseCheckpoint& a, LeaseCheckpoint& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaseCheckpoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaseCheckpoint* New() const final {
    return CreateMaybeMessage<LeaseCheckpoint>(nullptr);
  }

  LeaseCheckpoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaseCheckpoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaseCheckpoint& from);
  void MergeFrom(const LeaseCheckpoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaseCheckpoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.LeaseCheckpoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
    kRemainingTTLFieldNumber = 2,
  };
  // int64 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 remaining_TTL = 2;
  void clear_remaining_ttl();
  ::PROTOBUF_NAMESPACE_ID::int64 remaining_ttl() const;
  void set_remaining_ttl(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_remaining_ttl() const;
  void _internal_set_remaining_ttl(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.LeaseCheckpoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 remaining_ttl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class LeaseCheckpointRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.LeaseCheckpointRequest) */ {
 public:
  LeaseCheckpointRequest();
  virtual ~LeaseCheckpointRequest();

  LeaseCheckpointRequest(const LeaseCheckpointRequest& from);
  LeaseCheckpointRequest(LeaseCheckpointRequest&& from) noexcept
    : LeaseCheckpointRequest() {
    *this = ::std::move(from);
  }

  inline LeaseCheckpointRequest& operator=(const LeaseCheckpointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaseCheckpointRequest& operator=(LeaseCheckpointRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaseCheckpointRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaseCheckpointRequest* internal_default_instance() {
    return reinterpret_cast<const LeaseCheckpointRequest*>(
               &_LeaseCheckpointRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(LeaseCheckpointRequest& a, LeaseCheckpointRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaseCheckpointRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaseCheckpointRequest* New() const final {
    return CreateMaybeMessage<LeaseCheckpointRequest>(nullptr);
  }

  LeaseCheckpointRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaseCheckpointRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaseCheckpointRequest& from);
  void MergeFrom(const LeaseCheckpointRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaseCheckpointRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.LeaseCheckpointRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckpointsFieldNumber = 1,
  };
  // repeated .etcdserverpb.LeaseCheckpoint checkpoints = 1;
  int checkpoints_size() const;
  private:
  int _internal_checkpoints_size() const;
  public:
  void clear_checkpoints();
  ::etcdserverpb::LeaseCheckpoint* mutable_checkpoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::LeaseCheckpoint >*
      mutable_checkpoints();
  private:
  const ::etcdserverpb::LeaseCheckpoint& _internal_checkpoints(int index) const;
  ::etcdserverpb::LeaseCheckpoint* _internal_add_checkpoints();
  public:
  const ::etcdserverpb::LeaseCheckpoint& checkpoints(int index) const;
  ::etcdserverpb::LeaseCheckpoint* add_checkpoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::LeaseCheckpoint >&
      checkpoints() const;

  // @@protoc_insertion_point(class_scope:etcdserverpb.LeaseCheckpointRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::LeaseCheckpoint > checkpoints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class LeaseCheckpointResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.LeaseCheckpointResponse) */ {
 public:
  LeaseCheckpointResponse();
  virtual ~LeaseCheckpointResponse();

  LeaseCheckpointResponse(const LeaseCheckpointResponse& from);
  LeaseCheckpointResponse(LeaseCheckpointResponse&& from) noexcept
    : LeaseCheckpointResponse() {
    *this = ::std::move(from);
  }

  inline LeaseCheckpointResponse& operator=(const LeaseCheckpointResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaseCheckpointResponse& operator=(LeaseCheckpointResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaseCheckpointResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaseCheckpointResponse* internal_default_instance() {
    return reinterpret_cast<const LeaseCheckpointResponse*>(
               &_LeaseCheckpointResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(LeaseCheckpointResponse& a, LeaseCheckpointResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaseCheckpointResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaseCheckpointResponse* New() const final {
    return CreateMaybeMessage<LeaseCheckpointResponse>(nullptr);
  }

  LeaseCheckpointResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaseCheckpointResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaseCheckpointResponse& from);
  void MergeFrom(const LeaseCheckpointResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaseCheckpointResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.LeaseCheckpointResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.LeaseCheckpointResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class LeaseKeepAliveRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.LeaseKeepAliveRequest) */ {
 public:
  LeaseKeepAliveRequest();
  virtual ~LeaseKeepAliveRequest();

  LeaseKeepAliveRequest(const LeaseKeepAliveRequest& from);
  LeaseKeepAliveRequest(LeaseKeepAliveRequest&& from) noexcept
    : LeaseKeepAliveRequest() {
    *this = ::std::move(from);
  }

  inline LeaseKeepAliveRequest& operator=(const LeaseKeepAliveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaseKeepAliveRequest& operator=(LeaseKeepAliveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaseKeepAliveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaseKeepAliveRequest* internal_default_instance() {
    return reinterpret_cast<const LeaseKeepAliveRequest*>(
               &_LeaseKeepAliveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(LeaseKeepAliveRequest& a, LeaseKeepAliveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaseKeepAliveRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaseKeepAliveRequest* New() const final {
    return CreateMaybeMessage<LeaseKeepAliveRequest>(nullptr);
  }

  LeaseKeepAliveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaseKeepAliveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaseKeepAliveRequest& from);
  void MergeFrom(const LeaseKeepAliveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaseKeepAliveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.LeaseKeepAliveRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
  };
  // int64 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.LeaseKeepAliveRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class LeaseKeepAliveResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.LeaseKeepAliveResponse) */ {
 public:
  LeaseKeepAliveResponse();
  virtual ~LeaseKeepAliveResponse();

  LeaseKeepAliveResponse(const LeaseKeepAliveResponse& from);
  LeaseKeepAliveResponse(LeaseKeepAliveResponse&& from) noexcept
    : LeaseKeepAliveResponse() {
    *this = ::std::move(from);
  }

  inline LeaseKeepAliveResponse& operator=(const LeaseKeepAliveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaseKeepAliveResponse& operator=(LeaseKeepAliveResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaseKeepAliveResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaseKeepAliveResponse* internal_default_instance() {
    return reinterpret_cast<const LeaseKeepAliveResponse*>(
               &_LeaseKeepAliveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(LeaseKeepAliveResponse& a, LeaseKeepAliveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaseKeepAliveResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaseKeepAliveResponse* New() const final {
    return CreateMaybeMessage<LeaseKeepAliveResponse>(nullptr);
  }

  LeaseKeepAliveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaseKeepAliveResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaseKeepAliveResponse& from);
  void MergeFrom(const LeaseKeepAliveResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaseKeepAliveResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.LeaseKeepAliveResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kIDFieldNumber = 2,
    kTTLFieldNumber = 3,
  };
  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // int64 ID = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 TTL = 3;
  void clear_ttl();
  ::PROTOBUF_NAMESPACE_ID::int64 ttl() const;
  void set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ttl() const;
  void _internal_set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.LeaseKeepAliveResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::etcdserverpb::ResponseHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 ttl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class LeaseTimeToLiveRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.LeaseTimeToLiveRequest) */ {
 public:
  LeaseTimeToLiveRequest();
  virtual ~LeaseTimeToLiveRequest();

  LeaseTimeToLiveRequest(const LeaseTimeToLiveRequest& from);
  LeaseTimeToLiveRequest(LeaseTimeToLiveRequest&& from) noexcept
    : LeaseTimeToLiveRequest() {
    *this = ::std::move(from);
  }

  inline LeaseTimeToLiveRequest& operator=(const LeaseTimeToLiveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaseTimeToLiveRequest& operator=(LeaseTimeToLiveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaseTimeToLiveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaseTimeToLiveRequest* internal_default_instance() {
    return reinterpret_cast<const LeaseTimeToLiveRequest*>(
               &_LeaseTimeToLiveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(LeaseTimeToLiveRequest& a, LeaseTimeToLiveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaseTimeToLiveRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaseTimeToLiveRequest* New() const final {
    return CreateMaybeMessage<LeaseTimeToLiveRequest>(nullptr);
  }

  LeaseTimeToLiveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaseTimeToLiveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaseTimeToLiveRequest& from);
  void MergeFrom(const LeaseTimeToLiveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaseTimeToLiveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.LeaseTimeToLiveRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
    kKeysFieldNumber = 2,
  };
  // int64 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool keys = 2;
  void clear_keys();
  bool keys() const;
  void set_keys(bool value);
  private:
  bool _internal_keys() const;
  void _internal_set_keys(bool value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.LeaseTimeToLiveRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  bool keys_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class LeaseTimeToLiveResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.LeaseTimeToLiveResponse) */ {
 public:
  LeaseTimeToLiveResponse();
  virtual ~LeaseTimeToLiveResponse();

  LeaseTimeToLiveResponse(const LeaseTimeToLiveResponse& from);
  LeaseTimeToLiveResponse(LeaseTimeToLiveResponse&& from) noexcept
    : LeaseTimeToLiveResponse() {
    *this = ::std::move(from);
  }

  inline LeaseTimeToLiveResponse& operator=(const LeaseTimeToLiveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaseTimeToLiveResponse& operator=(LeaseTimeToLiveResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaseTimeToLiveResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaseTimeToLiveResponse* internal_default_instance() {
    return reinterpret_cast<const LeaseTimeToLiveResponse*>(
               &_LeaseTimeToLiveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(LeaseTimeToLiveResponse& a, LeaseTimeToLiveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaseTimeToLiveResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaseTimeToLiveResponse* New() const final {
    return CreateMaybeMessage<LeaseTimeToLiveResponse>(nullptr);
  }

  LeaseTimeToLiveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaseTimeToLiveResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaseTimeToLiveResponse& from);
  void MergeFrom(const LeaseTimeToLiveResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaseTimeToLiveResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.LeaseTimeToLiveResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 5,
    kHeaderFieldNumber = 1,
    kIDFieldNumber = 2,
    kTTLFieldNumber = 3,
    kGrantedTTLFieldNumber = 4,
  };
  // repeated bytes keys = 5;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const void* value, size_t size);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keys();
  private:
  const std::string& _internal_keys(int index) const;
  std::string* _internal_add_keys();
  public:

  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // int64 ID = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 TTL = 3;
  void clear_ttl();
  ::PROTOBUF_NAMESPACE_ID::int64 ttl() const;
  void set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ttl() const;
  void _internal_set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 grantedTTL = 4;
  void clear_grantedttl();
  ::PROTOBUF_NAMESPACE_ID::int64 grantedttl() const;
  void set_grantedttl(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_grantedttl() const;
  void _internal_set_grantedttl(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.LeaseTimeToLiveResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keys_;
  ::etcdserverpb::ResponseHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 ttl_;
  ::PROTOBUF_NAMESPACE_ID::int64 grantedttl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class LeaseLeasesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.LeaseLeasesRequest) */ {
 public:
  LeaseLeasesRequest();
  virtual ~LeaseLeasesRequest();

  LeaseLeasesRequest(const LeaseLeasesRequest& from);
  LeaseLeasesRequest(LeaseLeasesRequest&& from) noexcept
    : LeaseLeasesRequest() {
    *this = ::std::move(from);
  }

  inline LeaseLeasesRequest& operator=(const LeaseLeasesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaseLeasesRequest& operator=(LeaseLeasesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaseLeasesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaseLeasesRequest* internal_default_instance() {
    return reinterpret_cast<const LeaseLeasesRequest*>(
               &_LeaseLeasesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(LeaseLeasesRequest& a, LeaseLeasesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaseLeasesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaseLeasesRequest* New() const final {
    return CreateMaybeMessage<LeaseLeasesRequest>(nullptr);
  }

  LeaseLeasesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaseLeasesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaseLeasesRequest& from);
  void MergeFrom(const LeaseLeasesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaseLeasesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.LeaseLeasesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:etcdserverpb.LeaseLeasesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class LeaseStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.LeaseStatus) */ {
 public:
  LeaseStatus();
  virtual ~LeaseStatus();

  LeaseStatus(const LeaseStatus& from);
  LeaseStatus(LeaseStatus&& from) noexcept
    : LeaseStatus() {
    *this = ::std::move(from);
  }

  inline LeaseStatus& operator=(const LeaseStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaseStatus& operator=(LeaseStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaseStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaseStatus* internal_default_instance() {
    return reinterpret_cast<const LeaseStatus*>(
               &_LeaseStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(LeaseStatus& a, LeaseStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaseStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaseStatus* New() const final {
    return CreateMaybeMessage<LeaseStatus>(nullptr);
  }

  LeaseStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaseStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaseStatus& from);
  void MergeFrom(const LeaseStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaseStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.LeaseStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
  };
  // int64 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.LeaseStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class LeaseLeasesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.LeaseLeasesResponse) */ {
 public:
  LeaseLeasesResponse();
  virtual ~LeaseLeasesResponse();

  LeaseLeasesResponse(const LeaseLeasesResponse& from);
  LeaseLeasesResponse(LeaseLeasesResponse&& from) noexcept
    : LeaseLeasesResponse() {
    *this = ::std::move(from);
  }

  inline LeaseLeasesResponse& operator=(const LeaseLeasesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaseLeasesResponse& operator=(LeaseLeasesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaseLeasesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaseLeasesResponse* internal_default_instance() {
    return reinterpret_cast<const LeaseLeasesResponse*>(
               &_LeaseLeasesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(LeaseLeasesResponse& a, LeaseLeasesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaseLeasesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaseLeasesResponse* New() const final {
    return CreateMaybeMessage<LeaseLeasesResponse>(nullptr);
  }

  LeaseLeasesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaseLeasesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaseLeasesResponse& from);
  void MergeFrom(const LeaseLeasesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaseLeasesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.LeaseLeasesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeasesFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .etcdserverpb.LeaseStatus leases = 2;
  int leases_size() const;
  private:
  int _internal_leases_size() const;
  public:
  void clear_leases();
  ::etcdserverpb::LeaseStatus* mutable_leases(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::LeaseStatus >*
      mutable_leases();
  private:
  const ::etcdserverpb::LeaseStatus& _internal_leases(int index) const;
  ::etcdserverpb::LeaseStatus* _internal_add_leases();
  public:
  const ::etcdserverpb::LeaseStatus& leases(int index) const;
  ::etcdserverpb::LeaseStatus* add_leases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::LeaseStatus >&
      leases() const;

  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.LeaseLeasesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::LeaseStatus > leases_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class Member :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.Member) */ {
 public:
  Member();
  virtual ~Member();

  Member(const Member& from);
  Member(Member&& from) noexcept
    : Member() {
    *this = ::std::move(from);
  }

  inline Member& operator=(const Member& from) {
    CopyFrom(from);
    return *this;
  }
  inline Member& operator=(Member&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Member& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Member* internal_default_instance() {
    return reinterpret_cast<const Member*>(
               &_Member_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(Member& a, Member& b) {
    a.Swap(&b);
  }
  inline void Swap(Member* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Member* New() const final {
    return CreateMaybeMessage<Member>(nullptr);
  }

  Member* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Member>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Member& from);
  void MergeFrom(const Member& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Member* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.Member";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerURLsFieldNumber = 3,
    kClientURLsFieldNumber = 4,
    kNameFieldNumber = 2,
    kIDFieldNumber = 1,
    kIsLearnerFieldNumber = 5,
  };
  // repeated string peerURLs = 3;
  int peerurls_size() const;
  private:
  int _internal_peerurls_size() const;
  public:
  void clear_peerurls();
  const std::string& peerurls(int index) const;
  std::string* mutable_peerurls(int index);
  void set_peerurls(int index, const std::string& value);
  void set_peerurls(int index, std::string&& value);
  void set_peerurls(int index, const char* value);
  void set_peerurls(int index, const char* value, size_t size);
  std::string* add_peerurls();
  void add_peerurls(const std::string& value);
  void add_peerurls(std::string&& value);
  void add_peerurls(const char* value);
  void add_peerurls(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& peerurls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_peerurls();
  private:
  const std::string& _internal_peerurls(int index) const;
  std::string* _internal_add_peerurls();
  public:

  // repeated string clientURLs = 4;
  int clienturls_size() const;
  private:
  int _internal_clienturls_size() const;
  public:
  void clear_clienturls();
  const std::string& clienturls(int index) const;
  std::string* mutable_clienturls(int index);
  void set_clienturls(int index, const std::string& value);
  void set_clienturls(int index, std::string&& value);
  void set_clienturls(int index, const char* value);
  void set_clienturls(int index, const char* value, size_t size);
  std::string* add_clienturls();
  void add_clienturls(const std::string& value);
  void add_clienturls(std::string&& value);
  void add_clienturls(const char* value);
  void add_clienturls(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& clienturls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_clienturls();
  private:
  const std::string& _internal_clienturls(int index) const;
  std::string* _internal_add_clienturls();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool isLearner = 5;
  void clear_islearner();
  bool islearner() const;
  void set_islearner(bool value);
  private:
  bool _internal_islearner() const;
  void _internal_set_islearner(bool value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.Member)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> peerurls_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> clienturls_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  bool islearner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class MemberAddRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.MemberAddRequest) */ {
 public:
  MemberAddRequest();
  virtual ~MemberAddRequest();

  MemberAddRequest(const MemberAddRequest& from);
  MemberAddRequest(MemberAddRequest&& from) noexcept
    : MemberAddRequest() {
    *this = ::std::move(from);
  }

  inline MemberAddRequest& operator=(const MemberAddRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberAddRequest& operator=(MemberAddRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberAddRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberAddRequest* internal_default_instance() {
    return reinterpret_cast<const MemberAddRequest*>(
               &_MemberAddRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(MemberAddRequest& a, MemberAddRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberAddRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberAddRequest* New() const final {
    return CreateMaybeMessage<MemberAddRequest>(nullptr);
  }

  MemberAddRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberAddRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberAddRequest& from);
  void MergeFrom(const MemberAddRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberAddRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.MemberAddRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerURLsFieldNumber = 1,
    kIsLearnerFieldNumber = 2,
  };
  // repeated string peerURLs = 1;
  int peerurls_size() const;
  private:
  int _internal_peerurls_size() const;
  public:
  void clear_peerurls();
  const std::string& peerurls(int index) const;
  std::string* mutable_peerurls(int index);
  void set_peerurls(int index, const std::string& value);
  void set_peerurls(int index, std::string&& value);
  void set_peerurls(int index, const char* value);
  void set_peerurls(int index, const char* value, size_t size);
  std::string* add_peerurls();
  void add_peerurls(const std::string& value);
  void add_peerurls(std::string&& value);
  void add_peerurls(const char* value);
  void add_peerurls(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& peerurls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_peerurls();
  private:
  const std::string& _internal_peerurls(int index) const;
  std::string* _internal_add_peerurls();
  public:

  // bool isLearner = 2;
  void clear_islearner();
  bool islearner() const;
  void set_islearner(bool value);
  private:
  bool _internal_islearner() const;
  void _internal_set_islearner(bool value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.MemberAddRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> peerurls_;
  bool islearner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class MemberAddResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.MemberAddResponse) */ {
 public:
  MemberAddResponse();
  virtual ~MemberAddResponse();

  MemberAddResponse(const MemberAddResponse& from);
  MemberAddResponse(MemberAddResponse&& from) noexcept
    : MemberAddResponse() {
    *this = ::std::move(from);
  }

  inline MemberAddResponse& operator=(const MemberAddResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberAddResponse& operator=(MemberAddResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberAddResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberAddResponse* internal_default_instance() {
    return reinterpret_cast<const MemberAddResponse*>(
               &_MemberAddResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(MemberAddResponse& a, MemberAddResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberAddResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberAddResponse* New() const final {
    return CreateMaybeMessage<MemberAddResponse>(nullptr);
  }

  MemberAddResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberAddResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberAddResponse& from);
  void MergeFrom(const MemberAddResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberAddResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.MemberAddResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kMemberFieldNumber = 2,
  };
  // repeated .etcdserverpb.Member members = 3;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::etcdserverpb::Member* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Member >*
      mutable_members();
  private:
  const ::etcdserverpb::Member& _internal_members(int index) const;
  ::etcdserverpb::Member* _internal_add_members();
  public:
  const ::etcdserverpb::Member& members(int index) const;
  ::etcdserverpb::Member* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Member >&
      members() const;

  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // .etcdserverpb.Member member = 2;
  bool has_member() const;
  private:
  bool _internal_has_member() const;
  public:
  void clear_member();
  const ::etcdserverpb::Member& member() const;
  ::etcdserverpb::Member* release_member();
  ::etcdserverpb::Member* mutable_member();
  void set_allocated_member(::etcdserverpb::Member* member);
  private:
  const ::etcdserverpb::Member& _internal_member() const;
  ::etcdserverpb::Member* _internal_mutable_member();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.MemberAddResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Member > members_;
  ::etcdserverpb::ResponseHeader* header_;
  ::etcdserverpb::Member* member_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class MemberRemoveRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.MemberRemoveRequest) */ {
 public:
  MemberRemoveRequest();
  virtual ~MemberRemoveRequest();

  MemberRemoveRequest(const MemberRemoveRequest& from);
  MemberRemoveRequest(MemberRemoveRequest&& from) noexcept
    : MemberRemoveRequest() {
    *this = ::std::move(from);
  }

  inline MemberRemoveRequest& operator=(const MemberRemoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberRemoveRequest& operator=(MemberRemoveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberRemoveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberRemoveRequest* internal_default_instance() {
    return reinterpret_cast<const MemberRemoveRequest*>(
               &_MemberRemoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(MemberRemoveRequest& a, MemberRemoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberRemoveRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberRemoveRequest* New() const final {
    return CreateMaybeMessage<MemberRemoveRequest>(nullptr);
  }

  MemberRemoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberRemoveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberRemoveRequest& from);
  void MergeFrom(const MemberRemoveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberRemoveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.MemberRemoveRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
  };
  // uint64 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.MemberRemoveRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class MemberRemoveResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.MemberRemoveResponse) */ {
 public:
  MemberRemoveResponse();
  virtual ~MemberRemoveResponse();

  MemberRemoveResponse(const MemberRemoveResponse& from);
  MemberRemoveResponse(MemberRemoveResponse&& from) noexcept
    : MemberRemoveResponse() {
    *this = ::std::move(from);
  }

  inline MemberRemoveResponse& operator=(const MemberRemoveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberRemoveResponse& operator=(MemberRemoveResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberRemoveResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberRemoveResponse* internal_default_instance() {
    return reinterpret_cast<const MemberRemoveResponse*>(
               &_MemberRemoveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(MemberRemoveResponse& a, MemberRemoveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberRemoveResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberRemoveResponse* New() const final {
    return CreateMaybeMessage<MemberRemoveResponse>(nullptr);
  }

  MemberRemoveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberRemoveResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberRemoveResponse& from);
  void MergeFrom(const MemberRemoveResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberRemoveResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.MemberRemoveResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .etcdserverpb.Member members = 2;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::etcdserverpb::Member* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Member >*
      mutable_members();
  private:
  const ::etcdserverpb::Member& _internal_members(int index) const;
  ::etcdserverpb::Member* _internal_add_members();
  public:
  const ::etcdserverpb::Member& members(int index) const;
  ::etcdserverpb::Member* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Member >&
      members() const;

  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.MemberRemoveResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Member > members_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class MemberUpdateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.MemberUpdateRequest) */ {
 public:
  MemberUpdateRequest();
  virtual ~MemberUpdateRequest();

  MemberUpdateRequest(const MemberUpdateRequest& from);
  MemberUpdateRequest(MemberUpdateRequest&& from) noexcept
    : MemberUpdateRequest() {
    *this = ::std::move(from);
  }

  inline MemberUpdateRequest& operator=(const MemberUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberUpdateRequest& operator=(MemberUpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const MemberUpdateRequest*>(
               &_MemberUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(MemberUpdateRequest& a, MemberUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberUpdateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberUpdateRequest* New() const final {
    return CreateMaybeMessage<MemberUpdateRequest>(nullptr);
  }

  MemberUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberUpdateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberUpdateRequest& from);
  void MergeFrom(const MemberUpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberUpdateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.MemberUpdateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerURLsFieldNumber = 2,
    kIDFieldNumber = 1,
  };
  // repeated string peerURLs = 2;
  int peerurls_size() const;
  private:
  int _internal_peerurls_size() const;
  public:
  void clear_peerurls();
  const std::string& peerurls(int index) const;
  std::string* mutable_peerurls(int index);
  void set_peerurls(int index, const std::string& value);
  void set_peerurls(int index, std::string&& value);
  void set_peerurls(int index, const char* value);
  void set_peerurls(int index, const char* value, size_t size);
  std::string* add_peerurls();
  void add_peerurls(const std::string& value);
  void add_peerurls(std::string&& value);
  void add_peerurls(const char* value);
  void add_peerurls(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& peerurls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_peerurls();
  private:
  const std::string& _internal_peerurls(int index) const;
  std::string* _internal_add_peerurls();
  public:

  // uint64 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.MemberUpdateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> peerurls_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class MemberUpdateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.MemberUpdateResponse) */ {
 public:
  MemberUpdateResponse();
  virtual ~MemberUpdateResponse();

  MemberUpdateResponse(const MemberUpdateResponse& from);
  MemberUpdateResponse(MemberUpdateResponse&& from) noexcept
    : MemberUpdateResponse() {
    *this = ::std::move(from);
  }

  inline MemberUpdateResponse& operator=(const MemberUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberUpdateResponse& operator=(MemberUpdateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberUpdateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const MemberUpdateResponse*>(
               &_MemberUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(MemberUpdateResponse& a, MemberUpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberUpdateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberUpdateResponse* New() const final {
    return CreateMaybeMessage<MemberUpdateResponse>(nullptr);
  }

  MemberUpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberUpdateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberUpdateResponse& from);
  void MergeFrom(const MemberUpdateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberUpdateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.MemberUpdateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .etcdserverpb.Member members = 2;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::etcdserverpb::Member* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Member >*
      mutable_members();
  private:
  const ::etcdserverpb::Member& _internal_members(int index) const;
  ::etcdserverpb::Member* _internal_add_members();
  public:
  const ::etcdserverpb::Member& members(int index) const;
  ::etcdserverpb::Member* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Member >&
      members() const;

  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.MemberUpdateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Member > members_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class MemberListRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.MemberListRequest) */ {
 public:
  MemberListRequest();
  virtual ~MemberListRequest();

  MemberListRequest(const MemberListRequest& from);
  MemberListRequest(MemberListRequest&& from) noexcept
    : MemberListRequest() {
    *this = ::std::move(from);
  }

  inline MemberListRequest& operator=(const MemberListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberListRequest& operator=(MemberListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberListRequest* internal_default_instance() {
    return reinterpret_cast<const MemberListRequest*>(
               &_MemberListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(MemberListRequest& a, MemberListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberListRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberListRequest* New() const final {
    return CreateMaybeMessage<MemberListRequest>(nullptr);
  }

  MemberListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberListRequest& from);
  void MergeFrom(const MemberListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.MemberListRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:etcdserverpb.MemberListRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class MemberListResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.MemberListResponse) */ {
 public:
  MemberListResponse();
  virtual ~MemberListResponse();

  MemberListResponse(const MemberListResponse& from);
  MemberListResponse(MemberListResponse&& from) noexcept
    : MemberListResponse() {
    *this = ::std::move(from);
  }

  inline MemberListResponse& operator=(const MemberListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberListResponse& operator=(MemberListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberListResponse* internal_default_instance() {
    return reinterpret_cast<const MemberListResponse*>(
               &_MemberListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(MemberListResponse& a, MemberListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberListResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberListResponse* New() const final {
    return CreateMaybeMessage<MemberListResponse>(nullptr);
  }

  MemberListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberListResponse& from);
  void MergeFrom(const MemberListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.MemberListResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .etcdserverpb.Member members = 2;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::etcdserverpb::Member* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Member >*
      mutable_members();
  private:
  const ::etcdserverpb::Member& _internal_members(int index) const;
  ::etcdserverpb::Member* _internal_add_members();
  public:
  const ::etcdserverpb::Member& members(int index) const;
  ::etcdserverpb::Member* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Member >&
      members() const;

  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.MemberListResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Member > members_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class MemberPromoteRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.MemberPromoteRequest) */ {
 public:
  MemberPromoteRequest();
  virtual ~MemberPromoteRequest();

  MemberPromoteRequest(const MemberPromoteRequest& from);
  MemberPromoteRequest(MemberPromoteRequest&& from) noexcept
    : MemberPromoteRequest() {
    *this = ::std::move(from);
  }

  inline MemberPromoteRequest& operator=(const MemberPromoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberPromoteRequest& operator=(MemberPromoteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberPromoteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberPromoteRequest* internal_default_instance() {
    return reinterpret_cast<const MemberPromoteRequest*>(
               &_MemberPromoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(MemberPromoteRequest& a, MemberPromoteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberPromoteRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberPromoteRequest* New() const final {
    return CreateMaybeMessage<MemberPromoteRequest>(nullptr);
  }

  MemberPromoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberPromoteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberPromoteRequest& from);
  void MergeFrom(const MemberPromoteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberPromoteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.MemberPromoteRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
  };
  // uint64 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.MemberPromoteRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class MemberPromoteResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.MemberPromoteResponse) */ {
 public:
  MemberPromoteResponse();
  virtual ~MemberPromoteResponse();

  MemberPromoteResponse(const MemberPromoteResponse& from);
  MemberPromoteResponse(MemberPromoteResponse&& from) noexcept
    : MemberPromoteResponse() {
    *this = ::std::move(from);
  }

  inline MemberPromoteResponse& operator=(const MemberPromoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberPromoteResponse& operator=(MemberPromoteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberPromoteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberPromoteResponse* internal_default_instance() {
    return reinterpret_cast<const MemberPromoteResponse*>(
               &_MemberPromoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(MemberPromoteResponse& a, MemberPromoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberPromoteResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberPromoteResponse* New() const final {
    return CreateMaybeMessage<MemberPromoteResponse>(nullptr);
  }

  MemberPromoteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberPromoteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberPromoteResponse& from);
  void MergeFrom(const MemberPromoteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberPromoteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.MemberPromoteResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .etcdserverpb.Member members = 2;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::etcdserverpb::Member* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Member >*
      mutable_members();
  private:
  const ::etcdserverpb::Member& _internal_members(int index) const;
  ::etcdserverpb::Member* _internal_add_members();
  public:
  const ::etcdserverpb::Member& members(int index) const;
  ::etcdserverpb::Member* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Member >&
      members() const;

  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.MemberPromoteResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Member > members_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class DefragmentRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.DefragmentRequest) */ {
 public:
  DefragmentRequest();
  virtual ~DefragmentRequest();

  DefragmentRequest(const DefragmentRequest& from);
  DefragmentRequest(DefragmentRequest&& from) noexcept
    : DefragmentRequest() {
    *this = ::std::move(from);
  }

  inline DefragmentRequest& operator=(const DefragmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DefragmentRequest& operator=(DefragmentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DefragmentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DefragmentRequest* internal_default_instance() {
    return reinterpret_cast<const DefragmentRequest*>(
               &_DefragmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(DefragmentRequest& a, DefragmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DefragmentRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DefragmentRequest* New() const final {
    return CreateMaybeMessage<DefragmentRequest>(nullptr);
  }

  DefragmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DefragmentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DefragmentRequest& from);
  void MergeFrom(const DefragmentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DefragmentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.DefragmentRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:etcdserverpb.DefragmentRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class DefragmentResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.DefragmentResponse) */ {
 public:
  DefragmentResponse();
  virtual ~DefragmentResponse();

  DefragmentResponse(const DefragmentResponse& from);
  DefragmentResponse(DefragmentResponse&& from) noexcept
    : DefragmentResponse() {
    *this = ::std::move(from);
  }

  inline DefragmentResponse& operator=(const DefragmentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DefragmentResponse& operator=(DefragmentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DefragmentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DefragmentResponse* internal_default_instance() {
    return reinterpret_cast<const DefragmentResponse*>(
               &_DefragmentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(DefragmentResponse& a, DefragmentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DefragmentResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DefragmentResponse* New() const final {
    return CreateMaybeMessage<DefragmentResponse>(nullptr);
  }

  DefragmentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DefragmentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DefragmentResponse& from);
  void MergeFrom(const DefragmentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DefragmentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.DefragmentResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.DefragmentResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class MoveLeaderRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.MoveLeaderRequest) */ {
 public:
  MoveLeaderRequest();
  virtual ~MoveLeaderRequest();

  MoveLeaderRequest(const MoveLeaderRequest& from);
  MoveLeaderRequest(MoveLeaderRequest&& from) noexcept
    : MoveLeaderRequest() {
    *this = ::std::move(from);
  }

  inline MoveLeaderRequest& operator=(const MoveLeaderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveLeaderRequest& operator=(MoveLeaderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveLeaderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveLeaderRequest* internal_default_instance() {
    return reinterpret_cast<const MoveLeaderRequest*>(
               &_MoveLeaderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(MoveLeaderRequest& a, MoveLeaderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveLeaderRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveLeaderRequest* New() const final {
    return CreateMaybeMessage<MoveLeaderRequest>(nullptr);
  }

  MoveLeaderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveLeaderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveLeaderRequest& from);
  void MergeFrom(const MoveLeaderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveLeaderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.MoveLeaderRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetIDFieldNumber = 1,
  };
  // uint64 targetID = 1;
  void clear_targetid();
  ::PROTOBUF_NAMESPACE_ID::uint64 targetid() const;
  void set_targetid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_targetid() const;
  void _internal_set_targetid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.MoveLeaderRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 targetid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class MoveLeaderResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.MoveLeaderResponse) */ {
 public:
  MoveLeaderResponse();
  virtual ~MoveLeaderResponse();

  MoveLeaderResponse(const MoveLeaderResponse& from);
  MoveLeaderResponse(MoveLeaderResponse&& from) noexcept
    : MoveLeaderResponse() {
    *this = ::std::move(from);
  }

  inline MoveLeaderResponse& operator=(const MoveLeaderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveLeaderResponse& operator=(MoveLeaderResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveLeaderResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveLeaderResponse* internal_default_instance() {
    return reinterpret_cast<const MoveLeaderResponse*>(
               &_MoveLeaderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(MoveLeaderResponse& a, MoveLeaderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveLeaderResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveLeaderResponse* New() const final {
    return CreateMaybeMessage<MoveLeaderResponse>(nullptr);
  }

  MoveLeaderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveLeaderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveLeaderResponse& from);
  void MergeFrom(const MoveLeaderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveLeaderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.MoveLeaderResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.MoveLeaderResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AlarmRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AlarmRequest) */ {
 public:
  AlarmRequest();
  virtual ~AlarmRequest();

  AlarmRequest(const AlarmRequest& from);
  AlarmRequest(AlarmRequest&& from) noexcept
    : AlarmRequest() {
    *this = ::std::move(from);
  }

  inline AlarmRequest& operator=(const AlarmRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlarmRequest& operator=(AlarmRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlarmRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlarmRequest* internal_default_instance() {
    return reinterpret_cast<const AlarmRequest*>(
               &_AlarmRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(AlarmRequest& a, AlarmRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AlarmRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlarmRequest* New() const final {
    return CreateMaybeMessage<AlarmRequest>(nullptr);
  }

  AlarmRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlarmRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlarmRequest& from);
  void MergeFrom(const AlarmRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlarmRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AlarmRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AlarmRequest_AlarmAction AlarmAction;
  static constexpr AlarmAction GET =
    AlarmRequest_AlarmAction_GET;
  static constexpr AlarmAction ACTIVATE =
    AlarmRequest_AlarmAction_ACTIVATE;
  static constexpr AlarmAction DEACTIVATE =
    AlarmRequest_AlarmAction_DEACTIVATE;
  static inline bool AlarmAction_IsValid(int value) {
    return AlarmRequest_AlarmAction_IsValid(value);
  }
  static constexpr AlarmAction AlarmAction_MIN =
    AlarmRequest_AlarmAction_AlarmAction_MIN;
  static constexpr AlarmAction AlarmAction_MAX =
    AlarmRequest_AlarmAction_AlarmAction_MAX;
  static constexpr int AlarmAction_ARRAYSIZE =
    AlarmRequest_AlarmAction_AlarmAction_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AlarmAction_descriptor() {
    return AlarmRequest_AlarmAction_descriptor();
  }
  template<typename T>
  static inline const std::string& AlarmAction_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AlarmAction>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AlarmAction_Name.");
    return AlarmRequest_AlarmAction_Name(enum_t_value);
  }
  static inline bool AlarmAction_Parse(const std::string& name,
      AlarmAction* value) {
    return AlarmRequest_AlarmAction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMemberIDFieldNumber = 2,
    kActionFieldNumber = 1,
    kAlarmFieldNumber = 3,
  };
  // uint64 memberID = 2;
  void clear_memberid();
  ::PROTOBUF_NAMESPACE_ID::uint64 memberid() const;
  void set_memberid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_memberid() const;
  void _internal_set_memberid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .etcdserverpb.AlarmRequest.AlarmAction action = 1;
  void clear_action();
  ::etcdserverpb::AlarmRequest_AlarmAction action() const;
  void set_action(::etcdserverpb::AlarmRequest_AlarmAction value);
  private:
  ::etcdserverpb::AlarmRequest_AlarmAction _internal_action() const;
  void _internal_set_action(::etcdserverpb::AlarmRequest_AlarmAction value);
  public:

  // .etcdserverpb.AlarmType alarm = 3;
  void clear_alarm();
  ::etcdserverpb::AlarmType alarm() const;
  void set_alarm(::etcdserverpb::AlarmType value);
  private:
  ::etcdserverpb::AlarmType _internal_alarm() const;
  void _internal_set_alarm(::etcdserverpb::AlarmType value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AlarmRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 memberid_;
  int action_;
  int alarm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AlarmMember :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AlarmMember) */ {
 public:
  AlarmMember();
  virtual ~AlarmMember();

  AlarmMember(const AlarmMember& from);
  AlarmMember(AlarmMember&& from) noexcept
    : AlarmMember() {
    *this = ::std::move(from);
  }

  inline AlarmMember& operator=(const AlarmMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlarmMember& operator=(AlarmMember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlarmMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlarmMember* internal_default_instance() {
    return reinterpret_cast<const AlarmMember*>(
               &_AlarmMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(AlarmMember& a, AlarmMember& b) {
    a.Swap(&b);
  }
  inline void Swap(AlarmMember* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlarmMember* New() const final {
    return CreateMaybeMessage<AlarmMember>(nullptr);
  }

  AlarmMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlarmMember>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlarmMember& from);
  void MergeFrom(const AlarmMember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlarmMember* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AlarmMember";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberIDFieldNumber = 1,
    kAlarmFieldNumber = 2,
  };
  // uint64 memberID = 1;
  void clear_memberid();
  ::PROTOBUF_NAMESPACE_ID::uint64 memberid() const;
  void set_memberid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_memberid() const;
  void _internal_set_memberid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .etcdserverpb.AlarmType alarm = 2;
  void clear_alarm();
  ::etcdserverpb::AlarmType alarm() const;
  void set_alarm(::etcdserverpb::AlarmType value);
  private:
  ::etcdserverpb::AlarmType _internal_alarm() const;
  void _internal_set_alarm(::etcdserverpb::AlarmType value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AlarmMember)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 memberid_;
  int alarm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AlarmResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AlarmResponse) */ {
 public:
  AlarmResponse();
  virtual ~AlarmResponse();

  AlarmResponse(const AlarmResponse& from);
  AlarmResponse(AlarmResponse&& from) noexcept
    : AlarmResponse() {
    *this = ::std::move(from);
  }

  inline AlarmResponse& operator=(const AlarmResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlarmResponse& operator=(AlarmResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlarmResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlarmResponse* internal_default_instance() {
    return reinterpret_cast<const AlarmResponse*>(
               &_AlarmResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(AlarmResponse& a, AlarmResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AlarmResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlarmResponse* New() const final {
    return CreateMaybeMessage<AlarmResponse>(nullptr);
  }

  AlarmResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlarmResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlarmResponse& from);
  void MergeFrom(const AlarmResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlarmResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AlarmResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlarmsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .etcdserverpb.AlarmMember alarms = 2;
  int alarms_size() const;
  private:
  int _internal_alarms_size() const;
  public:
  void clear_alarms();
  ::etcdserverpb::AlarmMember* mutable_alarms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::AlarmMember >*
      mutable_alarms();
  private:
  const ::etcdserverpb::AlarmMember& _internal_alarms(int index) const;
  ::etcdserverpb::AlarmMember* _internal_add_alarms();
  public:
  const ::etcdserverpb::AlarmMember& alarms(int index) const;
  ::etcdserverpb::AlarmMember* add_alarms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::AlarmMember >&
      alarms() const;

  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AlarmResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::AlarmMember > alarms_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class StatusRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.StatusRequest) */ {
 public:
  StatusRequest();
  virtual ~StatusRequest();

  StatusRequest(const StatusRequest& from);
  StatusRequest(StatusRequest&& from) noexcept
    : StatusRequest() {
    *this = ::std::move(from);
  }

  inline StatusRequest& operator=(const StatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusRequest& operator=(StatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusRequest* internal_default_instance() {
    return reinterpret_cast<const StatusRequest*>(
               &_StatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(StatusRequest& a, StatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusRequest* New() const final {
    return CreateMaybeMessage<StatusRequest>(nullptr);
  }

  StatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusRequest& from);
  void MergeFrom(const StatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.StatusRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:etcdserverpb.StatusRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class StatusResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.StatusResponse) */ {
 public:
  StatusResponse();
  virtual ~StatusResponse();

  StatusResponse(const StatusResponse& from);
  StatusResponse(StatusResponse&& from) noexcept
    : StatusResponse() {
    *this = ::std::move(from);
  }

  inline StatusResponse& operator=(const StatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusResponse& operator=(StatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusResponse* internal_default_instance() {
    return reinterpret_cast<const StatusResponse*>(
               &_StatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(StatusResponse& a, StatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusResponse* New() const final {
    return CreateMaybeMessage<StatusResponse>(nullptr);
  }

  StatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusResponse& from);
  void MergeFrom(const StatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.StatusResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorsFieldNumber = 8,
    kVersionFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kDbSizeFieldNumber = 3,
    kLeaderFieldNumber = 4,
    kRaftIndexFieldNumber = 5,
    kRaftTermFieldNumber = 6,
    kRaftAppliedIndexFieldNumber = 7,
    kDbSizeInUseFieldNumber = 9,
    kIsLearnerFieldNumber = 10,
  };
  // repeated string errors = 8;
  int errors_size() const;
  private:
  int _internal_errors_size() const;
  public:
  void clear_errors();
  const std::string& errors(int index) const;
  std::string* mutable_errors(int index);
  void set_errors(int index, const std::string& value);
  void set_errors(int index, std::string&& value);
  void set_errors(int index, const char* value);
  void set_errors(int index, const char* value, size_t size);
  std::string* add_errors();
  void add_errors(const std::string& value);
  void add_errors(std::string&& value);
  void add_errors(const char* value);
  void add_errors(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& errors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_errors();
  private:
  const std::string& _internal_errors(int index) const;
  std::string* _internal_add_errors();
  public:

  // string version = 2;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // int64 dbSize = 3;
  void clear_dbsize();
  ::PROTOBUF_NAMESPACE_ID::int64 dbsize() const;
  void set_dbsize(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dbsize() const;
  void _internal_set_dbsize(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 leader = 4;
  void clear_leader();
  ::PROTOBUF_NAMESPACE_ID::uint64 leader() const;
  void set_leader(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_leader() const;
  void _internal_set_leader(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 raftIndex = 5;
  void clear_raftindex();
  ::PROTOBUF_NAMESPACE_ID::uint64 raftindex() const;
  void set_raftindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_raftindex() const;
  void _internal_set_raftindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 raftTerm = 6;
  void clear_raftterm();
  ::PROTOBUF_NAMESPACE_ID::uint64 raftterm() const;
  void set_raftterm(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_raftterm() const;
  void _internal_set_raftterm(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 raftAppliedIndex = 7;
  void clear_raftappliedindex();
  ::PROTOBUF_NAMESPACE_ID::uint64 raftappliedindex() const;
  void set_raftappliedindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_raftappliedindex() const;
  void _internal_set_raftappliedindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 dbSizeInUse = 9;
  void clear_dbsizeinuse();
  ::PROTOBUF_NAMESPACE_ID::int64 dbsizeinuse() const;
  void set_dbsizeinuse(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dbsizeinuse() const;
  void _internal_set_dbsizeinuse(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool isLearner = 10;
  void clear_islearner();
  bool islearner() const;
  void set_islearner(bool value);
  private:
  bool _internal_islearner() const;
  void _internal_set_islearner(bool value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.StatusResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> errors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::etcdserverpb::ResponseHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::int64 dbsize_;
  ::PROTOBUF_NAMESPACE_ID::uint64 leader_;
  ::PROTOBUF_NAMESPACE_ID::uint64 raftindex_;
  ::PROTOBUF_NAMESPACE_ID::uint64 raftterm_;
  ::PROTOBUF_NAMESPACE_ID::uint64 raftappliedindex_;
  ::PROTOBUF_NAMESPACE_ID::int64 dbsizeinuse_;
  bool islearner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthEnableRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthEnableRequest) */ {
 public:
  AuthEnableRequest();
  virtual ~AuthEnableRequest();

  AuthEnableRequest(const AuthEnableRequest& from);
  AuthEnableRequest(AuthEnableRequest&& from) noexcept
    : AuthEnableRequest() {
    *this = ::std::move(from);
  }

  inline AuthEnableRequest& operator=(const AuthEnableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthEnableRequest& operator=(AuthEnableRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthEnableRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthEnableRequest* internal_default_instance() {
    return reinterpret_cast<const AuthEnableRequest*>(
               &_AuthEnableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(AuthEnableRequest& a, AuthEnableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthEnableRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthEnableRequest* New() const final {
    return CreateMaybeMessage<AuthEnableRequest>(nullptr);
  }

  AuthEnableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthEnableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthEnableRequest& from);
  void MergeFrom(const AuthEnableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthEnableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthEnableRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthEnableRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthDisableRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthDisableRequest) */ {
 public:
  AuthDisableRequest();
  virtual ~AuthDisableRequest();

  AuthDisableRequest(const AuthDisableRequest& from);
  AuthDisableRequest(AuthDisableRequest&& from) noexcept
    : AuthDisableRequest() {
    *this = ::std::move(from);
  }

  inline AuthDisableRequest& operator=(const AuthDisableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthDisableRequest& operator=(AuthDisableRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthDisableRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthDisableRequest* internal_default_instance() {
    return reinterpret_cast<const AuthDisableRequest*>(
               &_AuthDisableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(AuthDisableRequest& a, AuthDisableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthDisableRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthDisableRequest* New() const final {
    return CreateMaybeMessage<AuthDisableRequest>(nullptr);
  }

  AuthDisableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthDisableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthDisableRequest& from);
  void MergeFrom(const AuthDisableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthDisableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthDisableRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthDisableRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthenticateRequest) */ {
 public:
  AuthenticateRequest();
  virtual ~AuthenticateRequest();

  AuthenticateRequest(const AuthenticateRequest& from);
  AuthenticateRequest(AuthenticateRequest&& from) noexcept
    : AuthenticateRequest() {
    *this = ::std::move(from);
  }

  inline AuthenticateRequest& operator=(const AuthenticateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateRequest& operator=(AuthenticateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticateRequest* internal_default_instance() {
    return reinterpret_cast<const AuthenticateRequest*>(
               &_AuthenticateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(AuthenticateRequest& a, AuthenticateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateRequest* New() const final {
    return CreateMaybeMessage<AuthenticateRequest>(nullptr);
  }

  AuthenticateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateRequest& from);
  void MergeFrom(const AuthenticateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthenticateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthenticateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthUserAddRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthUserAddRequest) */ {
 public:
  AuthUserAddRequest();
  virtual ~AuthUserAddRequest();

  AuthUserAddRequest(const AuthUserAddRequest& from);
  AuthUserAddRequest(AuthUserAddRequest&& from) noexcept
    : AuthUserAddRequest() {
    *this = ::std::move(from);
  }

  inline AuthUserAddRequest& operator=(const AuthUserAddRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthUserAddRequest& operator=(AuthUserAddRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthUserAddRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthUserAddRequest* internal_default_instance() {
    return reinterpret_cast<const AuthUserAddRequest*>(
               &_AuthUserAddRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(AuthUserAddRequest& a, AuthUserAddRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthUserAddRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthUserAddRequest* New() const final {
    return CreateMaybeMessage<AuthUserAddRequest>(nullptr);
  }

  AuthUserAddRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthUserAddRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthUserAddRequest& from);
  void MergeFrom(const AuthUserAddRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthUserAddRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthUserAddRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kOptionsFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // .authpb.UserAddOptions options = 3;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::authpb::UserAddOptions& options() const;
  ::authpb::UserAddOptions* release_options();
  ::authpb::UserAddOptions* mutable_options();
  void set_allocated_options(::authpb::UserAddOptions* options);
  private:
  const ::authpb::UserAddOptions& _internal_options() const;
  ::authpb::UserAddOptions* _internal_mutable_options();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthUserAddRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::authpb::UserAddOptions* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthUserGetRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthUserGetRequest) */ {
 public:
  AuthUserGetRequest();
  virtual ~AuthUserGetRequest();

  AuthUserGetRequest(const AuthUserGetRequest& from);
  AuthUserGetRequest(AuthUserGetRequest&& from) noexcept
    : AuthUserGetRequest() {
    *this = ::std::move(from);
  }

  inline AuthUserGetRequest& operator=(const AuthUserGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthUserGetRequest& operator=(AuthUserGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthUserGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthUserGetRequest* internal_default_instance() {
    return reinterpret_cast<const AuthUserGetRequest*>(
               &_AuthUserGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(AuthUserGetRequest& a, AuthUserGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthUserGetRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthUserGetRequest* New() const final {
    return CreateMaybeMessage<AuthUserGetRequest>(nullptr);
  }

  AuthUserGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthUserGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthUserGetRequest& from);
  void MergeFrom(const AuthUserGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthUserGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthUserGetRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthUserGetRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthUserDeleteRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthUserDeleteRequest) */ {
 public:
  AuthUserDeleteRequest();
  virtual ~AuthUserDeleteRequest();

  AuthUserDeleteRequest(const AuthUserDeleteRequest& from);
  AuthUserDeleteRequest(AuthUserDeleteRequest&& from) noexcept
    : AuthUserDeleteRequest() {
    *this = ::std::move(from);
  }

  inline AuthUserDeleteRequest& operator=(const AuthUserDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthUserDeleteRequest& operator=(AuthUserDeleteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthUserDeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthUserDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const AuthUserDeleteRequest*>(
               &_AuthUserDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(AuthUserDeleteRequest& a, AuthUserDeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthUserDeleteRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthUserDeleteRequest* New() const final {
    return CreateMaybeMessage<AuthUserDeleteRequest>(nullptr);
  }

  AuthUserDeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthUserDeleteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthUserDeleteRequest& from);
  void MergeFrom(const AuthUserDeleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthUserDeleteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthUserDeleteRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthUserDeleteRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthUserChangePasswordRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthUserChangePasswordRequest) */ {
 public:
  AuthUserChangePasswordRequest();
  virtual ~AuthUserChangePasswordRequest();

  AuthUserChangePasswordRequest(const AuthUserChangePasswordRequest& from);
  AuthUserChangePasswordRequest(AuthUserChangePasswordRequest&& from) noexcept
    : AuthUserChangePasswordRequest() {
    *this = ::std::move(from);
  }

  inline AuthUserChangePasswordRequest& operator=(const AuthUserChangePasswordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthUserChangePasswordRequest& operator=(AuthUserChangePasswordRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthUserChangePasswordRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthUserChangePasswordRequest* internal_default_instance() {
    return reinterpret_cast<const AuthUserChangePasswordRequest*>(
               &_AuthUserChangePasswordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(AuthUserChangePasswordRequest& a, AuthUserChangePasswordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthUserChangePasswordRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthUserChangePasswordRequest* New() const final {
    return CreateMaybeMessage<AuthUserChangePasswordRequest>(nullptr);
  }

  AuthUserChangePasswordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthUserChangePasswordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthUserChangePasswordRequest& from);
  void MergeFrom(const AuthUserChangePasswordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthUserChangePasswordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthUserChangePasswordRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthUserChangePasswordRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthUserGrantRoleRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthUserGrantRoleRequest) */ {
 public:
  AuthUserGrantRoleRequest();
  virtual ~AuthUserGrantRoleRequest();

  AuthUserGrantRoleRequest(const AuthUserGrantRoleRequest& from);
  AuthUserGrantRoleRequest(AuthUserGrantRoleRequest&& from) noexcept
    : AuthUserGrantRoleRequest() {
    *this = ::std::move(from);
  }

  inline AuthUserGrantRoleRequest& operator=(const AuthUserGrantRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthUserGrantRoleRequest& operator=(AuthUserGrantRoleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthUserGrantRoleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthUserGrantRoleRequest* internal_default_instance() {
    return reinterpret_cast<const AuthUserGrantRoleRequest*>(
               &_AuthUserGrantRoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(AuthUserGrantRoleRequest& a, AuthUserGrantRoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthUserGrantRoleRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthUserGrantRoleRequest* New() const final {
    return CreateMaybeMessage<AuthUserGrantRoleRequest>(nullptr);
  }

  AuthUserGrantRoleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthUserGrantRoleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthUserGrantRoleRequest& from);
  void MergeFrom(const AuthUserGrantRoleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthUserGrantRoleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthUserGrantRoleRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kRoleFieldNumber = 2,
  };
  // string user = 1;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string role = 2;
  void clear_role();
  const std::string& role() const;
  void set_role(const std::string& value);
  void set_role(std::string&& value);
  void set_role(const char* value);
  void set_role(const char* value, size_t size);
  std::string* mutable_role();
  std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthUserGrantRoleRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthUserRevokeRoleRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthUserRevokeRoleRequest) */ {
 public:
  AuthUserRevokeRoleRequest();
  virtual ~AuthUserRevokeRoleRequest();

  AuthUserRevokeRoleRequest(const AuthUserRevokeRoleRequest& from);
  AuthUserRevokeRoleRequest(AuthUserRevokeRoleRequest&& from) noexcept
    : AuthUserRevokeRoleRequest() {
    *this = ::std::move(from);
  }

  inline AuthUserRevokeRoleRequest& operator=(const AuthUserRevokeRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthUserRevokeRoleRequest& operator=(AuthUserRevokeRoleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthUserRevokeRoleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthUserRevokeRoleRequest* internal_default_instance() {
    return reinterpret_cast<const AuthUserRevokeRoleRequest*>(
               &_AuthUserRevokeRoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(AuthUserRevokeRoleRequest& a, AuthUserRevokeRoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthUserRevokeRoleRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthUserRevokeRoleRequest* New() const final {
    return CreateMaybeMessage<AuthUserRevokeRoleRequest>(nullptr);
  }

  AuthUserRevokeRoleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthUserRevokeRoleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthUserRevokeRoleRequest& from);
  void MergeFrom(const AuthUserRevokeRoleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthUserRevokeRoleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthUserRevokeRoleRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kRoleFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string role = 2;
  void clear_role();
  const std::string& role() const;
  void set_role(const std::string& value);
  void set_role(std::string&& value);
  void set_role(const char* value);
  void set_role(const char* value, size_t size);
  std::string* mutable_role();
  std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthUserRevokeRoleRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthRoleAddRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthRoleAddRequest) */ {
 public:
  AuthRoleAddRequest();
  virtual ~AuthRoleAddRequest();

  AuthRoleAddRequest(const AuthRoleAddRequest& from);
  AuthRoleAddRequest(AuthRoleAddRequest&& from) noexcept
    : AuthRoleAddRequest() {
    *this = ::std::move(from);
  }

  inline AuthRoleAddRequest& operator=(const AuthRoleAddRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthRoleAddRequest& operator=(AuthRoleAddRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthRoleAddRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthRoleAddRequest* internal_default_instance() {
    return reinterpret_cast<const AuthRoleAddRequest*>(
               &_AuthRoleAddRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(AuthRoleAddRequest& a, AuthRoleAddRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthRoleAddRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthRoleAddRequest* New() const final {
    return CreateMaybeMessage<AuthRoleAddRequest>(nullptr);
  }

  AuthRoleAddRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthRoleAddRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthRoleAddRequest& from);
  void MergeFrom(const AuthRoleAddRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthRoleAddRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthRoleAddRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthRoleAddRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthRoleGetRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthRoleGetRequest) */ {
 public:
  AuthRoleGetRequest();
  virtual ~AuthRoleGetRequest();

  AuthRoleGetRequest(const AuthRoleGetRequest& from);
  AuthRoleGetRequest(AuthRoleGetRequest&& from) noexcept
    : AuthRoleGetRequest() {
    *this = ::std::move(from);
  }

  inline AuthRoleGetRequest& operator=(const AuthRoleGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthRoleGetRequest& operator=(AuthRoleGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthRoleGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthRoleGetRequest* internal_default_instance() {
    return reinterpret_cast<const AuthRoleGetRequest*>(
               &_AuthRoleGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(AuthRoleGetRequest& a, AuthRoleGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthRoleGetRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthRoleGetRequest* New() const final {
    return CreateMaybeMessage<AuthRoleGetRequest>(nullptr);
  }

  AuthRoleGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthRoleGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthRoleGetRequest& from);
  void MergeFrom(const AuthRoleGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthRoleGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthRoleGetRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
  };
  // string role = 1;
  void clear_role();
  const std::string& role() const;
  void set_role(const std::string& value);
  void set_role(std::string&& value);
  void set_role(const char* value);
  void set_role(const char* value, size_t size);
  std::string* mutable_role();
  std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthRoleGetRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthUserListRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthUserListRequest) */ {
 public:
  AuthUserListRequest();
  virtual ~AuthUserListRequest();

  AuthUserListRequest(const AuthUserListRequest& from);
  AuthUserListRequest(AuthUserListRequest&& from) noexcept
    : AuthUserListRequest() {
    *this = ::std::move(from);
  }

  inline AuthUserListRequest& operator=(const AuthUserListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthUserListRequest& operator=(AuthUserListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthUserListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthUserListRequest* internal_default_instance() {
    return reinterpret_cast<const AuthUserListRequest*>(
               &_AuthUserListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(AuthUserListRequest& a, AuthUserListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthUserListRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthUserListRequest* New() const final {
    return CreateMaybeMessage<AuthUserListRequest>(nullptr);
  }

  AuthUserListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthUserListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthUserListRequest& from);
  void MergeFrom(const AuthUserListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthUserListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthUserListRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthUserListRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthRoleListRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthRoleListRequest) */ {
 public:
  AuthRoleListRequest();
  virtual ~AuthRoleListRequest();

  AuthRoleListRequest(const AuthRoleListRequest& from);
  AuthRoleListRequest(AuthRoleListRequest&& from) noexcept
    : AuthRoleListRequest() {
    *this = ::std::move(from);
  }

  inline AuthRoleListRequest& operator=(const AuthRoleListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthRoleListRequest& operator=(AuthRoleListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthRoleListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthRoleListRequest* internal_default_instance() {
    return reinterpret_cast<const AuthRoleListRequest*>(
               &_AuthRoleListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(AuthRoleListRequest& a, AuthRoleListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthRoleListRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthRoleListRequest* New() const final {
    return CreateMaybeMessage<AuthRoleListRequest>(nullptr);
  }

  AuthRoleListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthRoleListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthRoleListRequest& from);
  void MergeFrom(const AuthRoleListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthRoleListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthRoleListRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthRoleListRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthRoleDeleteRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthRoleDeleteRequest) */ {
 public:
  AuthRoleDeleteRequest();
  virtual ~AuthRoleDeleteRequest();

  AuthRoleDeleteRequest(const AuthRoleDeleteRequest& from);
  AuthRoleDeleteRequest(AuthRoleDeleteRequest&& from) noexcept
    : AuthRoleDeleteRequest() {
    *this = ::std::move(from);
  }

  inline AuthRoleDeleteRequest& operator=(const AuthRoleDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthRoleDeleteRequest& operator=(AuthRoleDeleteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthRoleDeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthRoleDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const AuthRoleDeleteRequest*>(
               &_AuthRoleDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(AuthRoleDeleteRequest& a, AuthRoleDeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthRoleDeleteRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthRoleDeleteRequest* New() const final {
    return CreateMaybeMessage<AuthRoleDeleteRequest>(nullptr);
  }

  AuthRoleDeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthRoleDeleteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthRoleDeleteRequest& from);
  void MergeFrom(const AuthRoleDeleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthRoleDeleteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthRoleDeleteRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
  };
  // string role = 1;
  void clear_role();
  const std::string& role() const;
  void set_role(const std::string& value);
  void set_role(std::string&& value);
  void set_role(const char* value);
  void set_role(const char* value, size_t size);
  std::string* mutable_role();
  std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthRoleDeleteRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthRoleGrantPermissionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthRoleGrantPermissionRequest) */ {
 public:
  AuthRoleGrantPermissionRequest();
  virtual ~AuthRoleGrantPermissionRequest();

  AuthRoleGrantPermissionRequest(const AuthRoleGrantPermissionRequest& from);
  AuthRoleGrantPermissionRequest(AuthRoleGrantPermissionRequest&& from) noexcept
    : AuthRoleGrantPermissionRequest() {
    *this = ::std::move(from);
  }

  inline AuthRoleGrantPermissionRequest& operator=(const AuthRoleGrantPermissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthRoleGrantPermissionRequest& operator=(AuthRoleGrantPermissionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthRoleGrantPermissionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthRoleGrantPermissionRequest* internal_default_instance() {
    return reinterpret_cast<const AuthRoleGrantPermissionRequest*>(
               &_AuthRoleGrantPermissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(AuthRoleGrantPermissionRequest& a, AuthRoleGrantPermissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthRoleGrantPermissionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthRoleGrantPermissionRequest* New() const final {
    return CreateMaybeMessage<AuthRoleGrantPermissionRequest>(nullptr);
  }

  AuthRoleGrantPermissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthRoleGrantPermissionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthRoleGrantPermissionRequest& from);
  void MergeFrom(const AuthRoleGrantPermissionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthRoleGrantPermissionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthRoleGrantPermissionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPermFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .authpb.Permission perm = 2;
  bool has_perm() const;
  private:
  bool _internal_has_perm() const;
  public:
  void clear_perm();
  const ::authpb::Permission& perm() const;
  ::authpb::Permission* release_perm();
  ::authpb::Permission* mutable_perm();
  void set_allocated_perm(::authpb::Permission* perm);
  private:
  const ::authpb::Permission& _internal_perm() const;
  ::authpb::Permission* _internal_mutable_perm();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthRoleGrantPermissionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::authpb::Permission* perm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthRoleRevokePermissionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthRoleRevokePermissionRequest) */ {
 public:
  AuthRoleRevokePermissionRequest();
  virtual ~AuthRoleRevokePermissionRequest();

  AuthRoleRevokePermissionRequest(const AuthRoleRevokePermissionRequest& from);
  AuthRoleRevokePermissionRequest(AuthRoleRevokePermissionRequest&& from) noexcept
    : AuthRoleRevokePermissionRequest() {
    *this = ::std::move(from);
  }

  inline AuthRoleRevokePermissionRequest& operator=(const AuthRoleRevokePermissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthRoleRevokePermissionRequest& operator=(AuthRoleRevokePermissionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthRoleRevokePermissionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthRoleRevokePermissionRequest* internal_default_instance() {
    return reinterpret_cast<const AuthRoleRevokePermissionRequest*>(
               &_AuthRoleRevokePermissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(AuthRoleRevokePermissionRequest& a, AuthRoleRevokePermissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthRoleRevokePermissionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthRoleRevokePermissionRequest* New() const final {
    return CreateMaybeMessage<AuthRoleRevokePermissionRequest>(nullptr);
  }

  AuthRoleRevokePermissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthRoleRevokePermissionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthRoleRevokePermissionRequest& from);
  void MergeFrom(const AuthRoleRevokePermissionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthRoleRevokePermissionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthRoleRevokePermissionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
    kKeyFieldNumber = 2,
    kRangeEndFieldNumber = 3,
  };
  // string role = 1;
  void clear_role();
  const std::string& role() const;
  void set_role(const std::string& value);
  void set_role(std::string&& value);
  void set_role(const char* value);
  void set_role(const char* value, size_t size);
  std::string* mutable_role();
  std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes range_end = 3;
  void clear_range_end();
  const std::string& range_end() const;
  void set_range_end(const std::string& value);
  void set_range_end(std::string&& value);
  void set_range_end(const char* value);
  void set_range_end(const void* value, size_t size);
  std::string* mutable_range_end();
  std::string* release_range_end();
  void set_allocated_range_end(std::string* range_end);
  private:
  const std::string& _internal_range_end() const;
  void _internal_set_range_end(const std::string& value);
  std::string* _internal_mutable_range_end();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthRoleRevokePermissionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr range_end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthEnableResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthEnableResponse) */ {
 public:
  AuthEnableResponse();
  virtual ~AuthEnableResponse();

  AuthEnableResponse(const AuthEnableResponse& from);
  AuthEnableResponse(AuthEnableResponse&& from) noexcept
    : AuthEnableResponse() {
    *this = ::std::move(from);
  }

  inline AuthEnableResponse& operator=(const AuthEnableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthEnableResponse& operator=(AuthEnableResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthEnableResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthEnableResponse* internal_default_instance() {
    return reinterpret_cast<const AuthEnableResponse*>(
               &_AuthEnableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(AuthEnableResponse& a, AuthEnableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthEnableResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthEnableResponse* New() const final {
    return CreateMaybeMessage<AuthEnableResponse>(nullptr);
  }

  AuthEnableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthEnableResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthEnableResponse& from);
  void MergeFrom(const AuthEnableResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthEnableResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthEnableResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthEnableResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthDisableResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthDisableResponse) */ {
 public:
  AuthDisableResponse();
  virtual ~AuthDisableResponse();

  AuthDisableResponse(const AuthDisableResponse& from);
  AuthDisableResponse(AuthDisableResponse&& from) noexcept
    : AuthDisableResponse() {
    *this = ::std::move(from);
  }

  inline AuthDisableResponse& operator=(const AuthDisableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthDisableResponse& operator=(AuthDisableResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthDisableResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthDisableResponse* internal_default_instance() {
    return reinterpret_cast<const AuthDisableResponse*>(
               &_AuthDisableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(AuthDisableResponse& a, AuthDisableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthDisableResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthDisableResponse* New() const final {
    return CreateMaybeMessage<AuthDisableResponse>(nullptr);
  }

  AuthDisableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthDisableResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthDisableResponse& from);
  void MergeFrom(const AuthDisableResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthDisableResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthDisableResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthDisableResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthenticateResponse) */ {
 public:
  AuthenticateResponse();
  virtual ~AuthenticateResponse();

  AuthenticateResponse(const AuthenticateResponse& from);
  AuthenticateResponse(AuthenticateResponse&& from) noexcept
    : AuthenticateResponse() {
    *this = ::std::move(from);
  }

  inline AuthenticateResponse& operator=(const AuthenticateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateResponse& operator=(AuthenticateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticateResponse* internal_default_instance() {
    return reinterpret_cast<const AuthenticateResponse*>(
               &_AuthenticateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(AuthenticateResponse& a, AuthenticateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateResponse* New() const final {
    return CreateMaybeMessage<AuthenticateResponse>(nullptr);
  }

  AuthenticateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateResponse& from);
  void MergeFrom(const AuthenticateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthenticateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthenticateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthUserAddResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthUserAddResponse) */ {
 public:
  AuthUserAddResponse();
  virtual ~AuthUserAddResponse();

  AuthUserAddResponse(const AuthUserAddResponse& from);
  AuthUserAddResponse(AuthUserAddResponse&& from) noexcept
    : AuthUserAddResponse() {
    *this = ::std::move(from);
  }

  inline AuthUserAddResponse& operator=(const AuthUserAddResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthUserAddResponse& operator=(AuthUserAddResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthUserAddResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthUserAddResponse* internal_default_instance() {
    return reinterpret_cast<const AuthUserAddResponse*>(
               &_AuthUserAddResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(AuthUserAddResponse& a, AuthUserAddResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthUserAddResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthUserAddResponse* New() const final {
    return CreateMaybeMessage<AuthUserAddResponse>(nullptr);
  }

  AuthUserAddResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthUserAddResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthUserAddResponse& from);
  void MergeFrom(const AuthUserAddResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthUserAddResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthUserAddResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthUserAddResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthUserGetResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthUserGetResponse) */ {
 public:
  AuthUserGetResponse();
  virtual ~AuthUserGetResponse();

  AuthUserGetResponse(const AuthUserGetResponse& from);
  AuthUserGetResponse(AuthUserGetResponse&& from) noexcept
    : AuthUserGetResponse() {
    *this = ::std::move(from);
  }

  inline AuthUserGetResponse& operator=(const AuthUserGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthUserGetResponse& operator=(AuthUserGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthUserGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthUserGetResponse* internal_default_instance() {
    return reinterpret_cast<const AuthUserGetResponse*>(
               &_AuthUserGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(AuthUserGetResponse& a, AuthUserGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthUserGetResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthUserGetResponse* New() const final {
    return CreateMaybeMessage<AuthUserGetResponse>(nullptr);
  }

  AuthUserGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthUserGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthUserGetResponse& from);
  void MergeFrom(const AuthUserGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthUserGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthUserGetResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated string roles = 2;
  int roles_size() const;
  private:
  int _internal_roles_size() const;
  public:
  void clear_roles();
  const std::string& roles(int index) const;
  std::string* mutable_roles(int index);
  void set_roles(int index, const std::string& value);
  void set_roles(int index, std::string&& value);
  void set_roles(int index, const char* value);
  void set_roles(int index, const char* value, size_t size);
  std::string* add_roles();
  void add_roles(const std::string& value);
  void add_roles(std::string&& value);
  void add_roles(const char* value);
  void add_roles(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& roles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_roles();
  private:
  const std::string& _internal_roles(int index) const;
  std::string* _internal_add_roles();
  public:

  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthUserGetResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> roles_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthUserDeleteResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthUserDeleteResponse) */ {
 public:
  AuthUserDeleteResponse();
  virtual ~AuthUserDeleteResponse();

  AuthUserDeleteResponse(const AuthUserDeleteResponse& from);
  AuthUserDeleteResponse(AuthUserDeleteResponse&& from) noexcept
    : AuthUserDeleteResponse() {
    *this = ::std::move(from);
  }

  inline AuthUserDeleteResponse& operator=(const AuthUserDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthUserDeleteResponse& operator=(AuthUserDeleteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthUserDeleteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthUserDeleteResponse* internal_default_instance() {
    return reinterpret_cast<const AuthUserDeleteResponse*>(
               &_AuthUserDeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(AuthUserDeleteResponse& a, AuthUserDeleteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthUserDeleteResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthUserDeleteResponse* New() const final {
    return CreateMaybeMessage<AuthUserDeleteResponse>(nullptr);
  }

  AuthUserDeleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthUserDeleteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthUserDeleteResponse& from);
  void MergeFrom(const AuthUserDeleteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthUserDeleteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthUserDeleteResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthUserDeleteResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthUserChangePasswordResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthUserChangePasswordResponse) */ {
 public:
  AuthUserChangePasswordResponse();
  virtual ~AuthUserChangePasswordResponse();

  AuthUserChangePasswordResponse(const AuthUserChangePasswordResponse& from);
  AuthUserChangePasswordResponse(AuthUserChangePasswordResponse&& from) noexcept
    : AuthUserChangePasswordResponse() {
    *this = ::std::move(from);
  }

  inline AuthUserChangePasswordResponse& operator=(const AuthUserChangePasswordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthUserChangePasswordResponse& operator=(AuthUserChangePasswordResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthUserChangePasswordResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthUserChangePasswordResponse* internal_default_instance() {
    return reinterpret_cast<const AuthUserChangePasswordResponse*>(
               &_AuthUserChangePasswordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(AuthUserChangePasswordResponse& a, AuthUserChangePasswordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthUserChangePasswordResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthUserChangePasswordResponse* New() const final {
    return CreateMaybeMessage<AuthUserChangePasswordResponse>(nullptr);
  }

  AuthUserChangePasswordResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthUserChangePasswordResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthUserChangePasswordResponse& from);
  void MergeFrom(const AuthUserChangePasswordResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthUserChangePasswordResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthUserChangePasswordResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthUserChangePasswordResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthUserGrantRoleResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthUserGrantRoleResponse) */ {
 public:
  AuthUserGrantRoleResponse();
  virtual ~AuthUserGrantRoleResponse();

  AuthUserGrantRoleResponse(const AuthUserGrantRoleResponse& from);
  AuthUserGrantRoleResponse(AuthUserGrantRoleResponse&& from) noexcept
    : AuthUserGrantRoleResponse() {
    *this = ::std::move(from);
  }

  inline AuthUserGrantRoleResponse& operator=(const AuthUserGrantRoleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthUserGrantRoleResponse& operator=(AuthUserGrantRoleResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthUserGrantRoleResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthUserGrantRoleResponse* internal_default_instance() {
    return reinterpret_cast<const AuthUserGrantRoleResponse*>(
               &_AuthUserGrantRoleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(AuthUserGrantRoleResponse& a, AuthUserGrantRoleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthUserGrantRoleResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthUserGrantRoleResponse* New() const final {
    return CreateMaybeMessage<AuthUserGrantRoleResponse>(nullptr);
  }

  AuthUserGrantRoleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthUserGrantRoleResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthUserGrantRoleResponse& from);
  void MergeFrom(const AuthUserGrantRoleResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthUserGrantRoleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthUserGrantRoleResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthUserGrantRoleResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthUserRevokeRoleResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthUserRevokeRoleResponse) */ {
 public:
  AuthUserRevokeRoleResponse();
  virtual ~AuthUserRevokeRoleResponse();

  AuthUserRevokeRoleResponse(const AuthUserRevokeRoleResponse& from);
  AuthUserRevokeRoleResponse(AuthUserRevokeRoleResponse&& from) noexcept
    : AuthUserRevokeRoleResponse() {
    *this = ::std::move(from);
  }

  inline AuthUserRevokeRoleResponse& operator=(const AuthUserRevokeRoleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthUserRevokeRoleResponse& operator=(AuthUserRevokeRoleResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthUserRevokeRoleResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthUserRevokeRoleResponse* internal_default_instance() {
    return reinterpret_cast<const AuthUserRevokeRoleResponse*>(
               &_AuthUserRevokeRoleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(AuthUserRevokeRoleResponse& a, AuthUserRevokeRoleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthUserRevokeRoleResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthUserRevokeRoleResponse* New() const final {
    return CreateMaybeMessage<AuthUserRevokeRoleResponse>(nullptr);
  }

  AuthUserRevokeRoleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthUserRevokeRoleResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthUserRevokeRoleResponse& from);
  void MergeFrom(const AuthUserRevokeRoleResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthUserRevokeRoleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthUserRevokeRoleResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthUserRevokeRoleResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthRoleAddResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthRoleAddResponse) */ {
 public:
  AuthRoleAddResponse();
  virtual ~AuthRoleAddResponse();

  AuthRoleAddResponse(const AuthRoleAddResponse& from);
  AuthRoleAddResponse(AuthRoleAddResponse&& from) noexcept
    : AuthRoleAddResponse() {
    *this = ::std::move(from);
  }

  inline AuthRoleAddResponse& operator=(const AuthRoleAddResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthRoleAddResponse& operator=(AuthRoleAddResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthRoleAddResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthRoleAddResponse* internal_default_instance() {
    return reinterpret_cast<const AuthRoleAddResponse*>(
               &_AuthRoleAddResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(AuthRoleAddResponse& a, AuthRoleAddResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthRoleAddResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthRoleAddResponse* New() const final {
    return CreateMaybeMessage<AuthRoleAddResponse>(nullptr);
  }

  AuthRoleAddResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthRoleAddResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthRoleAddResponse& from);
  void MergeFrom(const AuthRoleAddResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthRoleAddResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthRoleAddResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthRoleAddResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthRoleGetResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthRoleGetResponse) */ {
 public:
  AuthRoleGetResponse();
  virtual ~AuthRoleGetResponse();

  AuthRoleGetResponse(const AuthRoleGetResponse& from);
  AuthRoleGetResponse(AuthRoleGetResponse&& from) noexcept
    : AuthRoleGetResponse() {
    *this = ::std::move(from);
  }

  inline AuthRoleGetResponse& operator=(const AuthRoleGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthRoleGetResponse& operator=(AuthRoleGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthRoleGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthRoleGetResponse* internal_default_instance() {
    return reinterpret_cast<const AuthRoleGetResponse*>(
               &_AuthRoleGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(AuthRoleGetResponse& a, AuthRoleGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthRoleGetResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthRoleGetResponse* New() const final {
    return CreateMaybeMessage<AuthRoleGetResponse>(nullptr);
  }

  AuthRoleGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthRoleGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthRoleGetResponse& from);
  void MergeFrom(const AuthRoleGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthRoleGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthRoleGetResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .authpb.Permission perm = 2;
  int perm_size() const;
  private:
  int _internal_perm_size() const;
  public:
  void clear_perm();
  ::authpb::Permission* mutable_perm(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::authpb::Permission >*
      mutable_perm();
  private:
  const ::authpb::Permission& _internal_perm(int index) const;
  ::authpb::Permission* _internal_add_perm();
  public:
  const ::authpb::Permission& perm(int index) const;
  ::authpb::Permission* add_perm();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::authpb::Permission >&
      perm() const;

  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthRoleGetResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::authpb::Permission > perm_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthRoleListResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthRoleListResponse) */ {
 public:
  AuthRoleListResponse();
  virtual ~AuthRoleListResponse();

  AuthRoleListResponse(const AuthRoleListResponse& from);
  AuthRoleListResponse(AuthRoleListResponse&& from) noexcept
    : AuthRoleListResponse() {
    *this = ::std::move(from);
  }

  inline AuthRoleListResponse& operator=(const AuthRoleListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthRoleListResponse& operator=(AuthRoleListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthRoleListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthRoleListResponse* internal_default_instance() {
    return reinterpret_cast<const AuthRoleListResponse*>(
               &_AuthRoleListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(AuthRoleListResponse& a, AuthRoleListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthRoleListResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthRoleListResponse* New() const final {
    return CreateMaybeMessage<AuthRoleListResponse>(nullptr);
  }

  AuthRoleListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthRoleListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthRoleListResponse& from);
  void MergeFrom(const AuthRoleListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthRoleListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthRoleListResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated string roles = 2;
  int roles_size() const;
  private:
  int _internal_roles_size() const;
  public:
  void clear_roles();
  const std::string& roles(int index) const;
  std::string* mutable_roles(int index);
  void set_roles(int index, const std::string& value);
  void set_roles(int index, std::string&& value);
  void set_roles(int index, const char* value);
  void set_roles(int index, const char* value, size_t size);
  std::string* add_roles();
  void add_roles(const std::string& value);
  void add_roles(std::string&& value);
  void add_roles(const char* value);
  void add_roles(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& roles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_roles();
  private:
  const std::string& _internal_roles(int index) const;
  std::string* _internal_add_roles();
  public:

  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthRoleListResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> roles_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthUserListResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthUserListResponse) */ {
 public:
  AuthUserListResponse();
  virtual ~AuthUserListResponse();

  AuthUserListResponse(const AuthUserListResponse& from);
  AuthUserListResponse(AuthUserListResponse&& from) noexcept
    : AuthUserListResponse() {
    *this = ::std::move(from);
  }

  inline AuthUserListResponse& operator=(const AuthUserListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthUserListResponse& operator=(AuthUserListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthUserListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthUserListResponse* internal_default_instance() {
    return reinterpret_cast<const AuthUserListResponse*>(
               &_AuthUserListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(AuthUserListResponse& a, AuthUserListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthUserListResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthUserListResponse* New() const final {
    return CreateMaybeMessage<AuthUserListResponse>(nullptr);
  }

  AuthUserListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthUserListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthUserListResponse& from);
  void MergeFrom(const AuthUserListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthUserListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthUserListResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated string users = 2;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  const std::string& users(int index) const;
  std::string* mutable_users(int index);
  void set_users(int index, const std::string& value);
  void set_users(int index, std::string&& value);
  void set_users(int index, const char* value);
  void set_users(int index, const char* value, size_t size);
  std::string* add_users();
  void add_users(const std::string& value);
  void add_users(std::string&& value);
  void add_users(const char* value);
  void add_users(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& users() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_users();
  private:
  const std::string& _internal_users(int index) const;
  std::string* _internal_add_users();
  public:

  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthUserListResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> users_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthRoleDeleteResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthRoleDeleteResponse) */ {
 public:
  AuthRoleDeleteResponse();
  virtual ~AuthRoleDeleteResponse();

  AuthRoleDeleteResponse(const AuthRoleDeleteResponse& from);
  AuthRoleDeleteResponse(AuthRoleDeleteResponse&& from) noexcept
    : AuthRoleDeleteResponse() {
    *this = ::std::move(from);
  }

  inline AuthRoleDeleteResponse& operator=(const AuthRoleDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthRoleDeleteResponse& operator=(AuthRoleDeleteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthRoleDeleteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthRoleDeleteResponse* internal_default_instance() {
    return reinterpret_cast<const AuthRoleDeleteResponse*>(
               &_AuthRoleDeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(AuthRoleDeleteResponse& a, AuthRoleDeleteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthRoleDeleteResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthRoleDeleteResponse* New() const final {
    return CreateMaybeMessage<AuthRoleDeleteResponse>(nullptr);
  }

  AuthRoleDeleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthRoleDeleteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthRoleDeleteResponse& from);
  void MergeFrom(const AuthRoleDeleteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthRoleDeleteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthRoleDeleteResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthRoleDeleteResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthRoleGrantPermissionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthRoleGrantPermissionResponse) */ {
 public:
  AuthRoleGrantPermissionResponse();
  virtual ~AuthRoleGrantPermissionResponse();

  AuthRoleGrantPermissionResponse(const AuthRoleGrantPermissionResponse& from);
  AuthRoleGrantPermissionResponse(AuthRoleGrantPermissionResponse&& from) noexcept
    : AuthRoleGrantPermissionResponse() {
    *this = ::std::move(from);
  }

  inline AuthRoleGrantPermissionResponse& operator=(const AuthRoleGrantPermissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthRoleGrantPermissionResponse& operator=(AuthRoleGrantPermissionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthRoleGrantPermissionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthRoleGrantPermissionResponse* internal_default_instance() {
    return reinterpret_cast<const AuthRoleGrantPermissionResponse*>(
               &_AuthRoleGrantPermissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(AuthRoleGrantPermissionResponse& a, AuthRoleGrantPermissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthRoleGrantPermissionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthRoleGrantPermissionResponse* New() const final {
    return CreateMaybeMessage<AuthRoleGrantPermissionResponse>(nullptr);
  }

  AuthRoleGrantPermissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthRoleGrantPermissionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthRoleGrantPermissionResponse& from);
  void MergeFrom(const AuthRoleGrantPermissionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthRoleGrantPermissionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthRoleGrantPermissionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthRoleGrantPermissionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AuthRoleRevokePermissionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.AuthRoleRevokePermissionResponse) */ {
 public:
  AuthRoleRevokePermissionResponse();
  virtual ~AuthRoleRevokePermissionResponse();

  AuthRoleRevokePermissionResponse(const AuthRoleRevokePermissionResponse& from);
  AuthRoleRevokePermissionResponse(AuthRoleRevokePermissionResponse&& from) noexcept
    : AuthRoleRevokePermissionResponse() {
    *this = ::std::move(from);
  }

  inline AuthRoleRevokePermissionResponse& operator=(const AuthRoleRevokePermissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthRoleRevokePermissionResponse& operator=(AuthRoleRevokePermissionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthRoleRevokePermissionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthRoleRevokePermissionResponse* internal_default_instance() {
    return reinterpret_cast<const AuthRoleRevokePermissionResponse*>(
               &_AuthRoleRevokePermissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(AuthRoleRevokePermissionResponse& a, AuthRoleRevokePermissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthRoleRevokePermissionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthRoleRevokePermissionResponse* New() const final {
    return CreateMaybeMessage<AuthRoleRevokePermissionResponse>(nullptr);
  }

  AuthRoleRevokePermissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthRoleRevokePermissionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthRoleRevokePermissionResponse& from);
  void MergeFrom(const AuthRoleRevokePermissionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthRoleRevokePermissionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.AuthRoleRevokePermissionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .etcdserverpb.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::etcdserverpb::ResponseHeader& header() const;
  ::etcdserverpb::ResponseHeader* release_header();
  ::etcdserverpb::ResponseHeader* mutable_header();
  void set_allocated_header(::etcdserverpb::ResponseHeader* header);
  private:
  const ::etcdserverpb::ResponseHeader& _internal_header() const;
  ::etcdserverpb::ResponseHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.AuthRoleRevokePermissionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::etcdserverpb::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResponseHeader

// uint64 cluster_id = 1;
inline void ResponseHeader::clear_cluster_id() {
  cluster_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResponseHeader::_internal_cluster_id() const {
  return cluster_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResponseHeader::cluster_id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.ResponseHeader.cluster_id)
  return _internal_cluster_id();
}
inline void ResponseHeader::_internal_set_cluster_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cluster_id_ = value;
}
inline void ResponseHeader::set_cluster_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cluster_id(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.ResponseHeader.cluster_id)
}

// uint64 member_id = 2;
inline void ResponseHeader::clear_member_id() {
  member_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResponseHeader::_internal_member_id() const {
  return member_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResponseHeader::member_id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.ResponseHeader.member_id)
  return _internal_member_id();
}
inline void ResponseHeader::_internal_set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  member_id_ = value;
}
inline void ResponseHeader::set_member_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_member_id(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.ResponseHeader.member_id)
}

// int64 revision = 3;
inline void ResponseHeader::clear_revision() {
  revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseHeader::_internal_revision() const {
  return revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResponseHeader::revision() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.ResponseHeader.revision)
  return _internal_revision();
}
inline void ResponseHeader::_internal_set_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  revision_ = value;
}
inline void ResponseHeader::set_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.ResponseHeader.revision)
}

// uint64 raft_term = 4;
inline void ResponseHeader::clear_raft_term() {
  raft_term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResponseHeader::_internal_raft_term() const {
  return raft_term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResponseHeader::raft_term() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.ResponseHeader.raft_term)
  return _internal_raft_term();
}
inline void ResponseHeader::_internal_set_raft_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  raft_term_ = value;
}
inline void ResponseHeader::set_raft_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_raft_term(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.ResponseHeader.raft_term)
}

// -------------------------------------------------------------------

// RangeRequest

// bytes key = 1;
inline void RangeRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RangeRequest::key() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeRequest.key)
  return _internal_key();
}
inline void RangeRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.RangeRequest.key)
}
inline std::string* RangeRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.RangeRequest.key)
  return _internal_mutable_key();
}
inline const std::string& RangeRequest::_internal_key() const {
  return key_.GetNoArena();
}
inline void RangeRequest::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RangeRequest::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.RangeRequest.key)
}
inline void RangeRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.RangeRequest.key)
}
inline void RangeRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.RangeRequest.key)
}
inline std::string* RangeRequest::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RangeRequest::release_key() {
  // @@protoc_insertion_point(field_release:etcdserverpb.RangeRequest.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RangeRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.RangeRequest.key)
}

// bytes range_end = 2;
inline void RangeRequest::clear_range_end() {
  range_end_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RangeRequest::range_end() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeRequest.range_end)
  return _internal_range_end();
}
inline void RangeRequest::set_range_end(const std::string& value) {
  _internal_set_range_end(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.RangeRequest.range_end)
}
inline std::string* RangeRequest::mutable_range_end() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.RangeRequest.range_end)
  return _internal_mutable_range_end();
}
inline const std::string& RangeRequest::_internal_range_end() const {
  return range_end_.GetNoArena();
}
inline void RangeRequest::_internal_set_range_end(const std::string& value) {
  
  range_end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RangeRequest::set_range_end(std::string&& value) {
  
  range_end_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.RangeRequest.range_end)
}
inline void RangeRequest::set_range_end(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  range_end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.RangeRequest.range_end)
}
inline void RangeRequest::set_range_end(const void* value, size_t size) {
  
  range_end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.RangeRequest.range_end)
}
inline std::string* RangeRequest::_internal_mutable_range_end() {
  
  return range_end_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RangeRequest::release_range_end() {
  // @@protoc_insertion_point(field_release:etcdserverpb.RangeRequest.range_end)
  
  return range_end_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RangeRequest::set_allocated_range_end(std::string* range_end) {
  if (range_end != nullptr) {
    
  } else {
    
  }
  range_end_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), range_end);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.RangeRequest.range_end)
}

// int64 limit = 3;
inline void RangeRequest::clear_limit() {
  limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RangeRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RangeRequest::limit() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeRequest.limit)
  return _internal_limit();
}
inline void RangeRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limit_ = value;
}
inline void RangeRequest::set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.RangeRequest.limit)
}

// int64 revision = 4;
inline void RangeRequest::clear_revision() {
  revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RangeRequest::_internal_revision() const {
  return revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RangeRequest::revision() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeRequest.revision)
  return _internal_revision();
}
inline void RangeRequest::_internal_set_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  revision_ = value;
}
inline void RangeRequest::set_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.RangeRequest.revision)
}

// .etcdserverpb.RangeRequest.SortOrder sort_order = 5;
inline void RangeRequest::clear_sort_order() {
  sort_order_ = 0;
}
inline ::etcdserverpb::RangeRequest_SortOrder RangeRequest::_internal_sort_order() const {
  return static_cast< ::etcdserverpb::RangeRequest_SortOrder >(sort_order_);
}
inline ::etcdserverpb::RangeRequest_SortOrder RangeRequest::sort_order() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeRequest.sort_order)
  return _internal_sort_order();
}
inline void RangeRequest::_internal_set_sort_order(::etcdserverpb::RangeRequest_SortOrder value) {
  
  sort_order_ = value;
}
inline void RangeRequest::set_sort_order(::etcdserverpb::RangeRequest_SortOrder value) {
  _internal_set_sort_order(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.RangeRequest.sort_order)
}

// .etcdserverpb.RangeRequest.SortTarget sort_target = 6;
inline void RangeRequest::clear_sort_target() {
  sort_target_ = 0;
}
inline ::etcdserverpb::RangeRequest_SortTarget RangeRequest::_internal_sort_target() const {
  return static_cast< ::etcdserverpb::RangeRequest_SortTarget >(sort_target_);
}
inline ::etcdserverpb::RangeRequest_SortTarget RangeRequest::sort_target() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeRequest.sort_target)
  return _internal_sort_target();
}
inline void RangeRequest::_internal_set_sort_target(::etcdserverpb::RangeRequest_SortTarget value) {
  
  sort_target_ = value;
}
inline void RangeRequest::set_sort_target(::etcdserverpb::RangeRequest_SortTarget value) {
  _internal_set_sort_target(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.RangeRequest.sort_target)
}

// bool serializable = 7;
inline void RangeRequest::clear_serializable() {
  serializable_ = false;
}
inline bool RangeRequest::_internal_serializable() const {
  return serializable_;
}
inline bool RangeRequest::serializable() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeRequest.serializable)
  return _internal_serializable();
}
inline void RangeRequest::_internal_set_serializable(bool value) {
  
  serializable_ = value;
}
inline void RangeRequest::set_serializable(bool value) {
  _internal_set_serializable(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.RangeRequest.serializable)
}

// bool keys_only = 8;
inline void RangeRequest::clear_keys_only() {
  keys_only_ = false;
}
inline bool RangeRequest::_internal_keys_only() const {
  return keys_only_;
}
inline bool RangeRequest::keys_only() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeRequest.keys_only)
  return _internal_keys_only();
}
inline void RangeRequest::_internal_set_keys_only(bool value) {
  
  keys_only_ = value;
}
inline void RangeRequest::set_keys_only(bool value) {
  _internal_set_keys_only(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.RangeRequest.keys_only)
}

// bool count_only = 9;
inline void RangeRequest::clear_count_only() {
  count_only_ = false;
}
inline bool RangeRequest::_internal_count_only() const {
  return count_only_;
}
inline bool RangeRequest::count_only() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeRequest.count_only)
  return _internal_count_only();
}
inline void RangeRequest::_internal_set_count_only(bool value) {
  
  count_only_ = value;
}
inline void RangeRequest::set_count_only(bool value) {
  _internal_set_count_only(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.RangeRequest.count_only)
}

// int64 min_mod_revision = 10;
inline void RangeRequest::clear_min_mod_revision() {
  min_mod_revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RangeRequest::_internal_min_mod_revision() const {
  return min_mod_revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RangeRequest::min_mod_revision() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeRequest.min_mod_revision)
  return _internal_min_mod_revision();
}
inline void RangeRequest::_internal_set_min_mod_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  min_mod_revision_ = value;
}
inline void RangeRequest::set_min_mod_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_min_mod_revision(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.RangeRequest.min_mod_revision)
}

// int64 max_mod_revision = 11;
inline void RangeRequest::clear_max_mod_revision() {
  max_mod_revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RangeRequest::_internal_max_mod_revision() const {
  return max_mod_revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RangeRequest::max_mod_revision() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeRequest.max_mod_revision)
  return _internal_max_mod_revision();
}
inline void RangeRequest::_internal_set_max_mod_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_mod_revision_ = value;
}
inline void RangeRequest::set_max_mod_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_mod_revision(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.RangeRequest.max_mod_revision)
}

// int64 min_create_revision = 12;
inline void RangeRequest::clear_min_create_revision() {
  min_create_revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RangeRequest::_internal_min_create_revision() const {
  return min_create_revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RangeRequest::min_create_revision() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeRequest.min_create_revision)
  return _internal_min_create_revision();
}
inline void RangeRequest::_internal_set_min_create_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  min_create_revision_ = value;
}
inline void RangeRequest::set_min_create_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_min_create_revision(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.RangeRequest.min_create_revision)
}

// int64 max_create_revision = 13;
inline void RangeRequest::clear_max_create_revision() {
  max_create_revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RangeRequest::_internal_max_create_revision() const {
  return max_create_revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RangeRequest::max_create_revision() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeRequest.max_create_revision)
  return _internal_max_create_revision();
}
inline void RangeRequest::_internal_set_max_create_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_create_revision_ = value;
}
inline void RangeRequest::set_max_create_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_create_revision(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.RangeRequest.max_create_revision)
}

// -------------------------------------------------------------------

// RangeResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool RangeResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool RangeResponse::has_header() const {
  return _internal_has_header();
}
inline void RangeResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& RangeResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& RangeResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* RangeResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.RangeResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* RangeResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* RangeResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.RangeResponse.header)
  return _internal_mutable_header();
}
inline void RangeResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.RangeResponse.header)
}

// repeated .mvccpb.KeyValue kvs = 2;
inline int RangeResponse::_internal_kvs_size() const {
  return kvs_.size();
}
inline int RangeResponse::kvs_size() const {
  return _internal_kvs_size();
}
inline ::mvccpb::KeyValue* RangeResponse::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.RangeResponse.kvs)
  return kvs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mvccpb::KeyValue >*
RangeResponse::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.RangeResponse.kvs)
  return &kvs_;
}
inline const ::mvccpb::KeyValue& RangeResponse::_internal_kvs(int index) const {
  return kvs_.Get(index);
}
inline const ::mvccpb::KeyValue& RangeResponse::kvs(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeResponse.kvs)
  return _internal_kvs(index);
}
inline ::mvccpb::KeyValue* RangeResponse::_internal_add_kvs() {
  return kvs_.Add();
}
inline ::mvccpb::KeyValue* RangeResponse::add_kvs() {
  // @@protoc_insertion_point(field_add:etcdserverpb.RangeResponse.kvs)
  return _internal_add_kvs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mvccpb::KeyValue >&
RangeResponse::kvs() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.RangeResponse.kvs)
  return kvs_;
}

// bool more = 3;
inline void RangeResponse::clear_more() {
  more_ = false;
}
inline bool RangeResponse::_internal_more() const {
  return more_;
}
inline bool RangeResponse::more() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeResponse.more)
  return _internal_more();
}
inline void RangeResponse::_internal_set_more(bool value) {
  
  more_ = value;
}
inline void RangeResponse::set_more(bool value) {
  _internal_set_more(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.RangeResponse.more)
}

// int64 count = 4;
inline void RangeResponse::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RangeResponse::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RangeResponse::count() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RangeResponse.count)
  return _internal_count();
}
inline void RangeResponse::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
}
inline void RangeResponse::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.RangeResponse.count)
}

// -------------------------------------------------------------------

// PutRequest

// bytes key = 1;
inline void PutRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PutRequest::key() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.PutRequest.key)
  return _internal_key();
}
inline void PutRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.PutRequest.key)
}
inline std::string* PutRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.PutRequest.key)
  return _internal_mutable_key();
}
inline const std::string& PutRequest::_internal_key() const {
  return key_.GetNoArena();
}
inline void PutRequest::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PutRequest::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.PutRequest.key)
}
inline void PutRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.PutRequest.key)
}
inline void PutRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.PutRequest.key)
}
inline std::string* PutRequest::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PutRequest::release_key() {
  // @@protoc_insertion_point(field_release:etcdserverpb.PutRequest.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.PutRequest.key)
}

// bytes value = 2;
inline void PutRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PutRequest::value() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.PutRequest.value)
  return _internal_value();
}
inline void PutRequest::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.PutRequest.value)
}
inline std::string* PutRequest::mutable_value() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.PutRequest.value)
  return _internal_mutable_value();
}
inline const std::string& PutRequest::_internal_value() const {
  return value_.GetNoArena();
}
inline void PutRequest::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PutRequest::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.PutRequest.value)
}
inline void PutRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.PutRequest.value)
}
inline void PutRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.PutRequest.value)
}
inline std::string* PutRequest::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PutRequest::release_value() {
  // @@protoc_insertion_point(field_release:etcdserverpb.PutRequest.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.PutRequest.value)
}

// int64 lease = 3;
inline void PutRequest::clear_lease() {
  lease_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PutRequest::_internal_lease() const {
  return lease_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PutRequest::lease() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.PutRequest.lease)
  return _internal_lease();
}
inline void PutRequest::_internal_set_lease(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lease_ = value;
}
inline void PutRequest::set_lease(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lease(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.PutRequest.lease)
}

// bool prev_kv = 4;
inline void PutRequest::clear_prev_kv() {
  prev_kv_ = false;
}
inline bool PutRequest::_internal_prev_kv() const {
  return prev_kv_;
}
inline bool PutRequest::prev_kv() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.PutRequest.prev_kv)
  return _internal_prev_kv();
}
inline void PutRequest::_internal_set_prev_kv(bool value) {
  
  prev_kv_ = value;
}
inline void PutRequest::set_prev_kv(bool value) {
  _internal_set_prev_kv(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.PutRequest.prev_kv)
}

// bool ignore_value = 5;
inline void PutRequest::clear_ignore_value() {
  ignore_value_ = false;
}
inline bool PutRequest::_internal_ignore_value() const {
  return ignore_value_;
}
inline bool PutRequest::ignore_value() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.PutRequest.ignore_value)
  return _internal_ignore_value();
}
inline void PutRequest::_internal_set_ignore_value(bool value) {
  
  ignore_value_ = value;
}
inline void PutRequest::set_ignore_value(bool value) {
  _internal_set_ignore_value(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.PutRequest.ignore_value)
}

// bool ignore_lease = 6;
inline void PutRequest::clear_ignore_lease() {
  ignore_lease_ = false;
}
inline bool PutRequest::_internal_ignore_lease() const {
  return ignore_lease_;
}
inline bool PutRequest::ignore_lease() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.PutRequest.ignore_lease)
  return _internal_ignore_lease();
}
inline void PutRequest::_internal_set_ignore_lease(bool value) {
  
  ignore_lease_ = value;
}
inline void PutRequest::set_ignore_lease(bool value) {
  _internal_set_ignore_lease(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.PutRequest.ignore_lease)
}

// -------------------------------------------------------------------

// PutResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool PutResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool PutResponse::has_header() const {
  return _internal_has_header();
}
inline void PutResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& PutResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& PutResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.PutResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* PutResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.PutResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* PutResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* PutResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.PutResponse.header)
  return _internal_mutable_header();
}
inline void PutResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.PutResponse.header)
}

// .mvccpb.KeyValue prev_kv = 2;
inline bool PutResponse::_internal_has_prev_kv() const {
  return this != internal_default_instance() && prev_kv_ != nullptr;
}
inline bool PutResponse::has_prev_kv() const {
  return _internal_has_prev_kv();
}
inline const ::mvccpb::KeyValue& PutResponse::_internal_prev_kv() const {
  const ::mvccpb::KeyValue* p = prev_kv_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mvccpb::KeyValue*>(
      &::mvccpb::_KeyValue_default_instance_);
}
inline const ::mvccpb::KeyValue& PutResponse::prev_kv() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.PutResponse.prev_kv)
  return _internal_prev_kv();
}
inline ::mvccpb::KeyValue* PutResponse::release_prev_kv() {
  // @@protoc_insertion_point(field_release:etcdserverpb.PutResponse.prev_kv)
  
  ::mvccpb::KeyValue* temp = prev_kv_;
  prev_kv_ = nullptr;
  return temp;
}
inline ::mvccpb::KeyValue* PutResponse::_internal_mutable_prev_kv() {
  
  if (prev_kv_ == nullptr) {
    auto* p = CreateMaybeMessage<::mvccpb::KeyValue>(GetArenaNoVirtual());
    prev_kv_ = p;
  }
  return prev_kv_;
}
inline ::mvccpb::KeyValue* PutResponse::mutable_prev_kv() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.PutResponse.prev_kv)
  return _internal_mutable_prev_kv();
}
inline void PutResponse::set_allocated_prev_kv(::mvccpb::KeyValue* prev_kv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(prev_kv_);
  }
  if (prev_kv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      prev_kv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prev_kv, submessage_arena);
    }
    
  } else {
    
  }
  prev_kv_ = prev_kv;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.PutResponse.prev_kv)
}

// -------------------------------------------------------------------

// DeleteRangeRequest

// bytes key = 1;
inline void DeleteRangeRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteRangeRequest::key() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.DeleteRangeRequest.key)
  return _internal_key();
}
inline void DeleteRangeRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.DeleteRangeRequest.key)
}
inline std::string* DeleteRangeRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.DeleteRangeRequest.key)
  return _internal_mutable_key();
}
inline const std::string& DeleteRangeRequest::_internal_key() const {
  return key_.GetNoArena();
}
inline void DeleteRangeRequest::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteRangeRequest::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.DeleteRangeRequest.key)
}
inline void DeleteRangeRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.DeleteRangeRequest.key)
}
inline void DeleteRangeRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.DeleteRangeRequest.key)
}
inline std::string* DeleteRangeRequest::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteRangeRequest::release_key() {
  // @@protoc_insertion_point(field_release:etcdserverpb.DeleteRangeRequest.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRangeRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.DeleteRangeRequest.key)
}

// bytes range_end = 2;
inline void DeleteRangeRequest::clear_range_end() {
  range_end_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteRangeRequest::range_end() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.DeleteRangeRequest.range_end)
  return _internal_range_end();
}
inline void DeleteRangeRequest::set_range_end(const std::string& value) {
  _internal_set_range_end(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.DeleteRangeRequest.range_end)
}
inline std::string* DeleteRangeRequest::mutable_range_end() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.DeleteRangeRequest.range_end)
  return _internal_mutable_range_end();
}
inline const std::string& DeleteRangeRequest::_internal_range_end() const {
  return range_end_.GetNoArena();
}
inline void DeleteRangeRequest::_internal_set_range_end(const std::string& value) {
  
  range_end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteRangeRequest::set_range_end(std::string&& value) {
  
  range_end_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.DeleteRangeRequest.range_end)
}
inline void DeleteRangeRequest::set_range_end(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  range_end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.DeleteRangeRequest.range_end)
}
inline void DeleteRangeRequest::set_range_end(const void* value, size_t size) {
  
  range_end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.DeleteRangeRequest.range_end)
}
inline std::string* DeleteRangeRequest::_internal_mutable_range_end() {
  
  return range_end_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteRangeRequest::release_range_end() {
  // @@protoc_insertion_point(field_release:etcdserverpb.DeleteRangeRequest.range_end)
  
  return range_end_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRangeRequest::set_allocated_range_end(std::string* range_end) {
  if (range_end != nullptr) {
    
  } else {
    
  }
  range_end_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), range_end);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.DeleteRangeRequest.range_end)
}

// bool prev_kv = 3;
inline void DeleteRangeRequest::clear_prev_kv() {
  prev_kv_ = false;
}
inline bool DeleteRangeRequest::_internal_prev_kv() const {
  return prev_kv_;
}
inline bool DeleteRangeRequest::prev_kv() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.DeleteRangeRequest.prev_kv)
  return _internal_prev_kv();
}
inline void DeleteRangeRequest::_internal_set_prev_kv(bool value) {
  
  prev_kv_ = value;
}
inline void DeleteRangeRequest::set_prev_kv(bool value) {
  _internal_set_prev_kv(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.DeleteRangeRequest.prev_kv)
}

// -------------------------------------------------------------------

// DeleteRangeResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool DeleteRangeResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool DeleteRangeResponse::has_header() const {
  return _internal_has_header();
}
inline void DeleteRangeResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& DeleteRangeResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& DeleteRangeResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.DeleteRangeResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* DeleteRangeResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.DeleteRangeResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* DeleteRangeResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* DeleteRangeResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.DeleteRangeResponse.header)
  return _internal_mutable_header();
}
inline void DeleteRangeResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.DeleteRangeResponse.header)
}

// int64 deleted = 2;
inline void DeleteRangeResponse::clear_deleted() {
  deleted_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteRangeResponse::_internal_deleted() const {
  return deleted_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteRangeResponse::deleted() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.DeleteRangeResponse.deleted)
  return _internal_deleted();
}
inline void DeleteRangeResponse::_internal_set_deleted(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  deleted_ = value;
}
inline void DeleteRangeResponse::set_deleted(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_deleted(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.DeleteRangeResponse.deleted)
}

// repeated .mvccpb.KeyValue prev_kvs = 3;
inline int DeleteRangeResponse::_internal_prev_kvs_size() const {
  return prev_kvs_.size();
}
inline int DeleteRangeResponse::prev_kvs_size() const {
  return _internal_prev_kvs_size();
}
inline ::mvccpb::KeyValue* DeleteRangeResponse::mutable_prev_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.DeleteRangeResponse.prev_kvs)
  return prev_kvs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mvccpb::KeyValue >*
DeleteRangeResponse::mutable_prev_kvs() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.DeleteRangeResponse.prev_kvs)
  return &prev_kvs_;
}
inline const ::mvccpb::KeyValue& DeleteRangeResponse::_internal_prev_kvs(int index) const {
  return prev_kvs_.Get(index);
}
inline const ::mvccpb::KeyValue& DeleteRangeResponse::prev_kvs(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.DeleteRangeResponse.prev_kvs)
  return _internal_prev_kvs(index);
}
inline ::mvccpb::KeyValue* DeleteRangeResponse::_internal_add_prev_kvs() {
  return prev_kvs_.Add();
}
inline ::mvccpb::KeyValue* DeleteRangeResponse::add_prev_kvs() {
  // @@protoc_insertion_point(field_add:etcdserverpb.DeleteRangeResponse.prev_kvs)
  return _internal_add_prev_kvs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mvccpb::KeyValue >&
DeleteRangeResponse::prev_kvs() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.DeleteRangeResponse.prev_kvs)
  return prev_kvs_;
}

// -------------------------------------------------------------------

// RequestOp

// .etcdserverpb.RangeRequest request_range = 1;
inline bool RequestOp::_internal_has_request_range() const {
  return request_case() == kRequestRange;
}
inline bool RequestOp::has_request_range() const {
  return _internal_has_request_range();
}
inline void RequestOp::set_has_request_range() {
  _oneof_case_[0] = kRequestRange;
}
inline void RequestOp::clear_request_range() {
  if (_internal_has_request_range()) {
    delete request_.request_range_;
    clear_has_request();
  }
}
inline ::etcdserverpb::RangeRequest* RequestOp::release_request_range() {
  // @@protoc_insertion_point(field_release:etcdserverpb.RequestOp.request_range)
  if (has_request_range()) {
    clear_has_request();
      ::etcdserverpb::RangeRequest* temp = request_.request_range_;
    request_.request_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::etcdserverpb::RangeRequest& RequestOp::_internal_request_range() const {
  return _internal_has_request_range()
      ? *request_.request_range_
      : *reinterpret_cast< ::etcdserverpb::RangeRequest*>(&::etcdserverpb::_RangeRequest_default_instance_);
}
inline const ::etcdserverpb::RangeRequest& RequestOp::request_range() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RequestOp.request_range)
  return _internal_request_range();
}
inline ::etcdserverpb::RangeRequest* RequestOp::_internal_mutable_request_range() {
  if (!_internal_has_request_range()) {
    clear_request();
    set_has_request_range();
    request_.request_range_ = CreateMaybeMessage< ::etcdserverpb::RangeRequest >(
        GetArenaNoVirtual());
  }
  return request_.request_range_;
}
inline ::etcdserverpb::RangeRequest* RequestOp::mutable_request_range() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.RequestOp.request_range)
  return _internal_mutable_request_range();
}

// .etcdserverpb.PutRequest request_put = 2;
inline bool RequestOp::_internal_has_request_put() const {
  return request_case() == kRequestPut;
}
inline bool RequestOp::has_request_put() const {
  return _internal_has_request_put();
}
inline void RequestOp::set_has_request_put() {
  _oneof_case_[0] = kRequestPut;
}
inline void RequestOp::clear_request_put() {
  if (_internal_has_request_put()) {
    delete request_.request_put_;
    clear_has_request();
  }
}
inline ::etcdserverpb::PutRequest* RequestOp::release_request_put() {
  // @@protoc_insertion_point(field_release:etcdserverpb.RequestOp.request_put)
  if (has_request_put()) {
    clear_has_request();
      ::etcdserverpb::PutRequest* temp = request_.request_put_;
    request_.request_put_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::etcdserverpb::PutRequest& RequestOp::_internal_request_put() const {
  return _internal_has_request_put()
      ? *request_.request_put_
      : *reinterpret_cast< ::etcdserverpb::PutRequest*>(&::etcdserverpb::_PutRequest_default_instance_);
}
inline const ::etcdserverpb::PutRequest& RequestOp::request_put() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RequestOp.request_put)
  return _internal_request_put();
}
inline ::etcdserverpb::PutRequest* RequestOp::_internal_mutable_request_put() {
  if (!_internal_has_request_put()) {
    clear_request();
    set_has_request_put();
    request_.request_put_ = CreateMaybeMessage< ::etcdserverpb::PutRequest >(
        GetArenaNoVirtual());
  }
  return request_.request_put_;
}
inline ::etcdserverpb::PutRequest* RequestOp::mutable_request_put() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.RequestOp.request_put)
  return _internal_mutable_request_put();
}

// .etcdserverpb.DeleteRangeRequest request_delete_range = 3;
inline bool RequestOp::_internal_has_request_delete_range() const {
  return request_case() == kRequestDeleteRange;
}
inline bool RequestOp::has_request_delete_range() const {
  return _internal_has_request_delete_range();
}
inline void RequestOp::set_has_request_delete_range() {
  _oneof_case_[0] = kRequestDeleteRange;
}
inline void RequestOp::clear_request_delete_range() {
  if (_internal_has_request_delete_range()) {
    delete request_.request_delete_range_;
    clear_has_request();
  }
}
inline ::etcdserverpb::DeleteRangeRequest* RequestOp::release_request_delete_range() {
  // @@protoc_insertion_point(field_release:etcdserverpb.RequestOp.request_delete_range)
  if (has_request_delete_range()) {
    clear_has_request();
      ::etcdserverpb::DeleteRangeRequest* temp = request_.request_delete_range_;
    request_.request_delete_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::etcdserverpb::DeleteRangeRequest& RequestOp::_internal_request_delete_range() const {
  return _internal_has_request_delete_range()
      ? *request_.request_delete_range_
      : *reinterpret_cast< ::etcdserverpb::DeleteRangeRequest*>(&::etcdserverpb::_DeleteRangeRequest_default_instance_);
}
inline const ::etcdserverpb::DeleteRangeRequest& RequestOp::request_delete_range() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RequestOp.request_delete_range)
  return _internal_request_delete_range();
}
inline ::etcdserverpb::DeleteRangeRequest* RequestOp::_internal_mutable_request_delete_range() {
  if (!_internal_has_request_delete_range()) {
    clear_request();
    set_has_request_delete_range();
    request_.request_delete_range_ = CreateMaybeMessage< ::etcdserverpb::DeleteRangeRequest >(
        GetArenaNoVirtual());
  }
  return request_.request_delete_range_;
}
inline ::etcdserverpb::DeleteRangeRequest* RequestOp::mutable_request_delete_range() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.RequestOp.request_delete_range)
  return _internal_mutable_request_delete_range();
}

// .etcdserverpb.TxnRequest request_txn = 4;
inline bool RequestOp::_internal_has_request_txn() const {
  return request_case() == kRequestTxn;
}
inline bool RequestOp::has_request_txn() const {
  return _internal_has_request_txn();
}
inline void RequestOp::set_has_request_txn() {
  _oneof_case_[0] = kRequestTxn;
}
inline void RequestOp::clear_request_txn() {
  if (_internal_has_request_txn()) {
    delete request_.request_txn_;
    clear_has_request();
  }
}
inline ::etcdserverpb::TxnRequest* RequestOp::release_request_txn() {
  // @@protoc_insertion_point(field_release:etcdserverpb.RequestOp.request_txn)
  if (has_request_txn()) {
    clear_has_request();
      ::etcdserverpb::TxnRequest* temp = request_.request_txn_;
    request_.request_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::etcdserverpb::TxnRequest& RequestOp::_internal_request_txn() const {
  return _internal_has_request_txn()
      ? *request_.request_txn_
      : *reinterpret_cast< ::etcdserverpb::TxnRequest*>(&::etcdserverpb::_TxnRequest_default_instance_);
}
inline const ::etcdserverpb::TxnRequest& RequestOp::request_txn() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.RequestOp.request_txn)
  return _internal_request_txn();
}
inline ::etcdserverpb::TxnRequest* RequestOp::_internal_mutable_request_txn() {
  if (!_internal_has_request_txn()) {
    clear_request();
    set_has_request_txn();
    request_.request_txn_ = CreateMaybeMessage< ::etcdserverpb::TxnRequest >(
        GetArenaNoVirtual());
  }
  return request_.request_txn_;
}
inline ::etcdserverpb::TxnRequest* RequestOp::mutable_request_txn() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.RequestOp.request_txn)
  return _internal_mutable_request_txn();
}

inline bool RequestOp::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void RequestOp::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline RequestOp::RequestCase RequestOp::request_case() const {
  return RequestOp::RequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResponseOp

// .etcdserverpb.RangeResponse response_range = 1;
inline bool ResponseOp::_internal_has_response_range() const {
  return response_case() == kResponseRange;
}
inline bool ResponseOp::has_response_range() const {
  return _internal_has_response_range();
}
inline void ResponseOp::set_has_response_range() {
  _oneof_case_[0] = kResponseRange;
}
inline void ResponseOp::clear_response_range() {
  if (_internal_has_response_range()) {
    delete response_.response_range_;
    clear_has_response();
  }
}
inline ::etcdserverpb::RangeResponse* ResponseOp::release_response_range() {
  // @@protoc_insertion_point(field_release:etcdserverpb.ResponseOp.response_range)
  if (has_response_range()) {
    clear_has_response();
      ::etcdserverpb::RangeResponse* temp = response_.response_range_;
    response_.response_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::etcdserverpb::RangeResponse& ResponseOp::_internal_response_range() const {
  return _internal_has_response_range()
      ? *response_.response_range_
      : *reinterpret_cast< ::etcdserverpb::RangeResponse*>(&::etcdserverpb::_RangeResponse_default_instance_);
}
inline const ::etcdserverpb::RangeResponse& ResponseOp::response_range() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.ResponseOp.response_range)
  return _internal_response_range();
}
inline ::etcdserverpb::RangeResponse* ResponseOp::_internal_mutable_response_range() {
  if (!_internal_has_response_range()) {
    clear_response();
    set_has_response_range();
    response_.response_range_ = CreateMaybeMessage< ::etcdserverpb::RangeResponse >(
        GetArenaNoVirtual());
  }
  return response_.response_range_;
}
inline ::etcdserverpb::RangeResponse* ResponseOp::mutable_response_range() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.ResponseOp.response_range)
  return _internal_mutable_response_range();
}

// .etcdserverpb.PutResponse response_put = 2;
inline bool ResponseOp::_internal_has_response_put() const {
  return response_case() == kResponsePut;
}
inline bool ResponseOp::has_response_put() const {
  return _internal_has_response_put();
}
inline void ResponseOp::set_has_response_put() {
  _oneof_case_[0] = kResponsePut;
}
inline void ResponseOp::clear_response_put() {
  if (_internal_has_response_put()) {
    delete response_.response_put_;
    clear_has_response();
  }
}
inline ::etcdserverpb::PutResponse* ResponseOp::release_response_put() {
  // @@protoc_insertion_point(field_release:etcdserverpb.ResponseOp.response_put)
  if (has_response_put()) {
    clear_has_response();
      ::etcdserverpb::PutResponse* temp = response_.response_put_;
    response_.response_put_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::etcdserverpb::PutResponse& ResponseOp::_internal_response_put() const {
  return _internal_has_response_put()
      ? *response_.response_put_
      : *reinterpret_cast< ::etcdserverpb::PutResponse*>(&::etcdserverpb::_PutResponse_default_instance_);
}
inline const ::etcdserverpb::PutResponse& ResponseOp::response_put() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.ResponseOp.response_put)
  return _internal_response_put();
}
inline ::etcdserverpb::PutResponse* ResponseOp::_internal_mutable_response_put() {
  if (!_internal_has_response_put()) {
    clear_response();
    set_has_response_put();
    response_.response_put_ = CreateMaybeMessage< ::etcdserverpb::PutResponse >(
        GetArenaNoVirtual());
  }
  return response_.response_put_;
}
inline ::etcdserverpb::PutResponse* ResponseOp::mutable_response_put() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.ResponseOp.response_put)
  return _internal_mutable_response_put();
}

// .etcdserverpb.DeleteRangeResponse response_delete_range = 3;
inline bool ResponseOp::_internal_has_response_delete_range() const {
  return response_case() == kResponseDeleteRange;
}
inline bool ResponseOp::has_response_delete_range() const {
  return _internal_has_response_delete_range();
}
inline void ResponseOp::set_has_response_delete_range() {
  _oneof_case_[0] = kResponseDeleteRange;
}
inline void ResponseOp::clear_response_delete_range() {
  if (_internal_has_response_delete_range()) {
    delete response_.response_delete_range_;
    clear_has_response();
  }
}
inline ::etcdserverpb::DeleteRangeResponse* ResponseOp::release_response_delete_range() {
  // @@protoc_insertion_point(field_release:etcdserverpb.ResponseOp.response_delete_range)
  if (has_response_delete_range()) {
    clear_has_response();
      ::etcdserverpb::DeleteRangeResponse* temp = response_.response_delete_range_;
    response_.response_delete_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::etcdserverpb::DeleteRangeResponse& ResponseOp::_internal_response_delete_range() const {
  return _internal_has_response_delete_range()
      ? *response_.response_delete_range_
      : *reinterpret_cast< ::etcdserverpb::DeleteRangeResponse*>(&::etcdserverpb::_DeleteRangeResponse_default_instance_);
}
inline const ::etcdserverpb::DeleteRangeResponse& ResponseOp::response_delete_range() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.ResponseOp.response_delete_range)
  return _internal_response_delete_range();
}
inline ::etcdserverpb::DeleteRangeResponse* ResponseOp::_internal_mutable_response_delete_range() {
  if (!_internal_has_response_delete_range()) {
    clear_response();
    set_has_response_delete_range();
    response_.response_delete_range_ = CreateMaybeMessage< ::etcdserverpb::DeleteRangeResponse >(
        GetArenaNoVirtual());
  }
  return response_.response_delete_range_;
}
inline ::etcdserverpb::DeleteRangeResponse* ResponseOp::mutable_response_delete_range() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.ResponseOp.response_delete_range)
  return _internal_mutable_response_delete_range();
}

// .etcdserverpb.TxnResponse response_txn = 4;
inline bool ResponseOp::_internal_has_response_txn() const {
  return response_case() == kResponseTxn;
}
inline bool ResponseOp::has_response_txn() const {
  return _internal_has_response_txn();
}
inline void ResponseOp::set_has_response_txn() {
  _oneof_case_[0] = kResponseTxn;
}
inline void ResponseOp::clear_response_txn() {
  if (_internal_has_response_txn()) {
    delete response_.response_txn_;
    clear_has_response();
  }
}
inline ::etcdserverpb::TxnResponse* ResponseOp::release_response_txn() {
  // @@protoc_insertion_point(field_release:etcdserverpb.ResponseOp.response_txn)
  if (has_response_txn()) {
    clear_has_response();
      ::etcdserverpb::TxnResponse* temp = response_.response_txn_;
    response_.response_txn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::etcdserverpb::TxnResponse& ResponseOp::_internal_response_txn() const {
  return _internal_has_response_txn()
      ? *response_.response_txn_
      : *reinterpret_cast< ::etcdserverpb::TxnResponse*>(&::etcdserverpb::_TxnResponse_default_instance_);
}
inline const ::etcdserverpb::TxnResponse& ResponseOp::response_txn() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.ResponseOp.response_txn)
  return _internal_response_txn();
}
inline ::etcdserverpb::TxnResponse* ResponseOp::_internal_mutable_response_txn() {
  if (!_internal_has_response_txn()) {
    clear_response();
    set_has_response_txn();
    response_.response_txn_ = CreateMaybeMessage< ::etcdserverpb::TxnResponse >(
        GetArenaNoVirtual());
  }
  return response_.response_txn_;
}
inline ::etcdserverpb::TxnResponse* ResponseOp::mutable_response_txn() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.ResponseOp.response_txn)
  return _internal_mutable_response_txn();
}

inline bool ResponseOp::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void ResponseOp::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
inline ResponseOp::ResponseCase ResponseOp::response_case() const {
  return ResponseOp::ResponseCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Compare

// .etcdserverpb.Compare.CompareResult result = 1;
inline void Compare::clear_result() {
  result_ = 0;
}
inline ::etcdserverpb::Compare_CompareResult Compare::_internal_result() const {
  return static_cast< ::etcdserverpb::Compare_CompareResult >(result_);
}
inline ::etcdserverpb::Compare_CompareResult Compare::result() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Compare.result)
  return _internal_result();
}
inline void Compare::_internal_set_result(::etcdserverpb::Compare_CompareResult value) {
  
  result_ = value;
}
inline void Compare::set_result(::etcdserverpb::Compare_CompareResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Compare.result)
}

// .etcdserverpb.Compare.CompareTarget target = 2;
inline void Compare::clear_target() {
  target_ = 0;
}
inline ::etcdserverpb::Compare_CompareTarget Compare::_internal_target() const {
  return static_cast< ::etcdserverpb::Compare_CompareTarget >(target_);
}
inline ::etcdserverpb::Compare_CompareTarget Compare::target() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Compare.target)
  return _internal_target();
}
inline void Compare::_internal_set_target(::etcdserverpb::Compare_CompareTarget value) {
  
  target_ = value;
}
inline void Compare::set_target(::etcdserverpb::Compare_CompareTarget value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Compare.target)
}

// bytes key = 3;
inline void Compare::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Compare::key() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Compare.key)
  return _internal_key();
}
inline void Compare::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Compare.key)
}
inline std::string* Compare::mutable_key() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.Compare.key)
  return _internal_mutable_key();
}
inline const std::string& Compare::_internal_key() const {
  return key_.GetNoArena();
}
inline void Compare::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Compare::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.Compare.key)
}
inline void Compare::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.Compare.key)
}
inline void Compare::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.Compare.key)
}
inline std::string* Compare::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Compare::release_key() {
  // @@protoc_insertion_point(field_release:etcdserverpb.Compare.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Compare::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.Compare.key)
}

// int64 version = 4;
inline bool Compare::_internal_has_version() const {
  return target_union_case() == kVersion;
}
inline void Compare::set_has_version() {
  _oneof_case_[0] = kVersion;
}
inline void Compare::clear_version() {
  if (_internal_has_version()) {
    target_union_.version_ = PROTOBUF_LONGLONG(0);
    clear_has_target_union();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Compare::_internal_version() const {
  if (_internal_has_version()) {
    return target_union_.version_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Compare::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_version()) {
    clear_target_union();
    set_has_version();
  }
  target_union_.version_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Compare::version() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Compare.version)
  return _internal_version();
}
inline void Compare::set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Compare.version)
}

// int64 create_revision = 5;
inline bool Compare::_internal_has_create_revision() const {
  return target_union_case() == kCreateRevision;
}
inline void Compare::set_has_create_revision() {
  _oneof_case_[0] = kCreateRevision;
}
inline void Compare::clear_create_revision() {
  if (_internal_has_create_revision()) {
    target_union_.create_revision_ = PROTOBUF_LONGLONG(0);
    clear_has_target_union();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Compare::_internal_create_revision() const {
  if (_internal_has_create_revision()) {
    return target_union_.create_revision_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Compare::_internal_set_create_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_create_revision()) {
    clear_target_union();
    set_has_create_revision();
  }
  target_union_.create_revision_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Compare::create_revision() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Compare.create_revision)
  return _internal_create_revision();
}
inline void Compare::set_create_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_create_revision(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Compare.create_revision)
}

// int64 mod_revision = 6;
inline bool Compare::_internal_has_mod_revision() const {
  return target_union_case() == kModRevision;
}
inline void Compare::set_has_mod_revision() {
  _oneof_case_[0] = kModRevision;
}
inline void Compare::clear_mod_revision() {
  if (_internal_has_mod_revision()) {
    target_union_.mod_revision_ = PROTOBUF_LONGLONG(0);
    clear_has_target_union();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Compare::_internal_mod_revision() const {
  if (_internal_has_mod_revision()) {
    return target_union_.mod_revision_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Compare::_internal_set_mod_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_mod_revision()) {
    clear_target_union();
    set_has_mod_revision();
  }
  target_union_.mod_revision_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Compare::mod_revision() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Compare.mod_revision)
  return _internal_mod_revision();
}
inline void Compare::set_mod_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mod_revision(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Compare.mod_revision)
}

// bytes value = 7;
inline bool Compare::_internal_has_value() const {
  return target_union_case() == kValue;
}
inline void Compare::set_has_value() {
  _oneof_case_[0] = kValue;
}
inline void Compare::clear_value() {
  if (_internal_has_value()) {
    target_union_.value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_target_union();
  }
}
inline const std::string& Compare::value() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Compare.value)
  return _internal_value();
}
inline void Compare::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Compare.value)
}
inline std::string* Compare::mutable_value() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.Compare.value)
  return _internal_mutable_value();
}
inline const std::string& Compare::_internal_value() const {
  if (_internal_has_value()) {
    return target_union_.value_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Compare::_internal_set_value(const std::string& value) {
  if (!_internal_has_value()) {
    clear_target_union();
    set_has_value();
    target_union_.value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  target_union_.value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Compare::set_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.Compare.value)
  if (!_internal_has_value()) {
    clear_target_union();
    set_has_value();
    target_union_.value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  target_union_.value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.Compare.value)
}
inline void Compare::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_value()) {
    clear_target_union();
    set_has_value();
    target_union_.value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  target_union_.value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.Compare.value)
}
inline void Compare::set_value(const void* value, size_t size) {
  if (!_internal_has_value()) {
    clear_target_union();
    set_has_value();
    target_union_.value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  target_union_.value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.Compare.value)
}
inline std::string* Compare::_internal_mutable_value() {
  if (!_internal_has_value()) {
    clear_target_union();
    set_has_value();
    target_union_.value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return target_union_.value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Compare::release_value() {
  // @@protoc_insertion_point(field_release:etcdserverpb.Compare.value)
  if (_internal_has_value()) {
    clear_has_target_union();
    return target_union_.value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Compare::set_allocated_value(std::string* value) {
  if (has_target_union()) {
    clear_target_union();
  }
  if (value != nullptr) {
    set_has_value();
    target_union_.value_.UnsafeSetDefault(value);
  }
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.Compare.value)
}

// int64 lease = 8;
inline bool Compare::_internal_has_lease() const {
  return target_union_case() == kLease;
}
inline void Compare::set_has_lease() {
  _oneof_case_[0] = kLease;
}
inline void Compare::clear_lease() {
  if (_internal_has_lease()) {
    target_union_.lease_ = PROTOBUF_LONGLONG(0);
    clear_has_target_union();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Compare::_internal_lease() const {
  if (_internal_has_lease()) {
    return target_union_.lease_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Compare::_internal_set_lease(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_lease()) {
    clear_target_union();
    set_has_lease();
  }
  target_union_.lease_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Compare::lease() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Compare.lease)
  return _internal_lease();
}
inline void Compare::set_lease(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lease(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Compare.lease)
}

// bytes range_end = 64;
inline void Compare::clear_range_end() {
  range_end_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Compare::range_end() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Compare.range_end)
  return _internal_range_end();
}
inline void Compare::set_range_end(const std::string& value) {
  _internal_set_range_end(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Compare.range_end)
}
inline std::string* Compare::mutable_range_end() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.Compare.range_end)
  return _internal_mutable_range_end();
}
inline const std::string& Compare::_internal_range_end() const {
  return range_end_.GetNoArena();
}
inline void Compare::_internal_set_range_end(const std::string& value) {
  
  range_end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Compare::set_range_end(std::string&& value) {
  
  range_end_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.Compare.range_end)
}
inline void Compare::set_range_end(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  range_end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.Compare.range_end)
}
inline void Compare::set_range_end(const void* value, size_t size) {
  
  range_end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.Compare.range_end)
}
inline std::string* Compare::_internal_mutable_range_end() {
  
  return range_end_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Compare::release_range_end() {
  // @@protoc_insertion_point(field_release:etcdserverpb.Compare.range_end)
  
  return range_end_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Compare::set_allocated_range_end(std::string* range_end) {
  if (range_end != nullptr) {
    
  } else {
    
  }
  range_end_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), range_end);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.Compare.range_end)
}

inline bool Compare::has_target_union() const {
  return target_union_case() != TARGET_UNION_NOT_SET;
}
inline void Compare::clear_has_target_union() {
  _oneof_case_[0] = TARGET_UNION_NOT_SET;
}
inline Compare::TargetUnionCase Compare::target_union_case() const {
  return Compare::TargetUnionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TxnRequest

// repeated .etcdserverpb.Compare compare = 1;
inline int TxnRequest::_internal_compare_size() const {
  return compare_.size();
}
inline int TxnRequest::compare_size() const {
  return _internal_compare_size();
}
inline void TxnRequest::clear_compare() {
  compare_.Clear();
}
inline ::etcdserverpb::Compare* TxnRequest::mutable_compare(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.TxnRequest.compare)
  return compare_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Compare >*
TxnRequest::mutable_compare() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.TxnRequest.compare)
  return &compare_;
}
inline const ::etcdserverpb::Compare& TxnRequest::_internal_compare(int index) const {
  return compare_.Get(index);
}
inline const ::etcdserverpb::Compare& TxnRequest::compare(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.TxnRequest.compare)
  return _internal_compare(index);
}
inline ::etcdserverpb::Compare* TxnRequest::_internal_add_compare() {
  return compare_.Add();
}
inline ::etcdserverpb::Compare* TxnRequest::add_compare() {
  // @@protoc_insertion_point(field_add:etcdserverpb.TxnRequest.compare)
  return _internal_add_compare();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Compare >&
TxnRequest::compare() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.TxnRequest.compare)
  return compare_;
}

// repeated .etcdserverpb.RequestOp success = 2;
inline int TxnRequest::_internal_success_size() const {
  return success_.size();
}
inline int TxnRequest::success_size() const {
  return _internal_success_size();
}
inline void TxnRequest::clear_success() {
  success_.Clear();
}
inline ::etcdserverpb::RequestOp* TxnRequest::mutable_success(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.TxnRequest.success)
  return success_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::RequestOp >*
TxnRequest::mutable_success() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.TxnRequest.success)
  return &success_;
}
inline const ::etcdserverpb::RequestOp& TxnRequest::_internal_success(int index) const {
  return success_.Get(index);
}
inline const ::etcdserverpb::RequestOp& TxnRequest::success(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.TxnRequest.success)
  return _internal_success(index);
}
inline ::etcdserverpb::RequestOp* TxnRequest::_internal_add_success() {
  return success_.Add();
}
inline ::etcdserverpb::RequestOp* TxnRequest::add_success() {
  // @@protoc_insertion_point(field_add:etcdserverpb.TxnRequest.success)
  return _internal_add_success();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::RequestOp >&
TxnRequest::success() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.TxnRequest.success)
  return success_;
}

// repeated .etcdserverpb.RequestOp failure = 3;
inline int TxnRequest::_internal_failure_size() const {
  return failure_.size();
}
inline int TxnRequest::failure_size() const {
  return _internal_failure_size();
}
inline void TxnRequest::clear_failure() {
  failure_.Clear();
}
inline ::etcdserverpb::RequestOp* TxnRequest::mutable_failure(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.TxnRequest.failure)
  return failure_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::RequestOp >*
TxnRequest::mutable_failure() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.TxnRequest.failure)
  return &failure_;
}
inline const ::etcdserverpb::RequestOp& TxnRequest::_internal_failure(int index) const {
  return failure_.Get(index);
}
inline const ::etcdserverpb::RequestOp& TxnRequest::failure(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.TxnRequest.failure)
  return _internal_failure(index);
}
inline ::etcdserverpb::RequestOp* TxnRequest::_internal_add_failure() {
  return failure_.Add();
}
inline ::etcdserverpb::RequestOp* TxnRequest::add_failure() {
  // @@protoc_insertion_point(field_add:etcdserverpb.TxnRequest.failure)
  return _internal_add_failure();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::RequestOp >&
TxnRequest::failure() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.TxnRequest.failure)
  return failure_;
}

// -------------------------------------------------------------------

// TxnResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool TxnResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool TxnResponse::has_header() const {
  return _internal_has_header();
}
inline void TxnResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& TxnResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& TxnResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.TxnResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* TxnResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.TxnResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* TxnResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* TxnResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.TxnResponse.header)
  return _internal_mutable_header();
}
inline void TxnResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.TxnResponse.header)
}

// bool succeeded = 2;
inline void TxnResponse::clear_succeeded() {
  succeeded_ = false;
}
inline bool TxnResponse::_internal_succeeded() const {
  return succeeded_;
}
inline bool TxnResponse::succeeded() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.TxnResponse.succeeded)
  return _internal_succeeded();
}
inline void TxnResponse::_internal_set_succeeded(bool value) {
  
  succeeded_ = value;
}
inline void TxnResponse::set_succeeded(bool value) {
  _internal_set_succeeded(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.TxnResponse.succeeded)
}

// repeated .etcdserverpb.ResponseOp responses = 3;
inline int TxnResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int TxnResponse::responses_size() const {
  return _internal_responses_size();
}
inline void TxnResponse::clear_responses() {
  responses_.Clear();
}
inline ::etcdserverpb::ResponseOp* TxnResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.TxnResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::ResponseOp >*
TxnResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.TxnResponse.responses)
  return &responses_;
}
inline const ::etcdserverpb::ResponseOp& TxnResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::etcdserverpb::ResponseOp& TxnResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.TxnResponse.responses)
  return _internal_responses(index);
}
inline ::etcdserverpb::ResponseOp* TxnResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::etcdserverpb::ResponseOp* TxnResponse::add_responses() {
  // @@protoc_insertion_point(field_add:etcdserverpb.TxnResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::ResponseOp >&
TxnResponse::responses() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.TxnResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// CompactionRequest

// int64 revision = 1;
inline void CompactionRequest::clear_revision() {
  revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CompactionRequest::_internal_revision() const {
  return revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CompactionRequest::revision() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.CompactionRequest.revision)
  return _internal_revision();
}
inline void CompactionRequest::_internal_set_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  revision_ = value;
}
inline void CompactionRequest::set_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.CompactionRequest.revision)
}

// bool physical = 2;
inline void CompactionRequest::clear_physical() {
  physical_ = false;
}
inline bool CompactionRequest::_internal_physical() const {
  return physical_;
}
inline bool CompactionRequest::physical() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.CompactionRequest.physical)
  return _internal_physical();
}
inline void CompactionRequest::_internal_set_physical(bool value) {
  
  physical_ = value;
}
inline void CompactionRequest::set_physical(bool value) {
  _internal_set_physical(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.CompactionRequest.physical)
}

// -------------------------------------------------------------------

// CompactionResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool CompactionResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool CompactionResponse::has_header() const {
  return _internal_has_header();
}
inline void CompactionResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& CompactionResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& CompactionResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.CompactionResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* CompactionResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.CompactionResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* CompactionResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* CompactionResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.CompactionResponse.header)
  return _internal_mutable_header();
}
inline void CompactionResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.CompactionResponse.header)
}

// -------------------------------------------------------------------

// HashRequest

// -------------------------------------------------------------------

// HashKVRequest

// int64 revision = 1;
inline void HashKVRequest::clear_revision() {
  revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HashKVRequest::_internal_revision() const {
  return revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HashKVRequest::revision() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.HashKVRequest.revision)
  return _internal_revision();
}
inline void HashKVRequest::_internal_set_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  revision_ = value;
}
inline void HashKVRequest::set_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.HashKVRequest.revision)
}

// -------------------------------------------------------------------

// HashKVResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool HashKVResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool HashKVResponse::has_header() const {
  return _internal_has_header();
}
inline void HashKVResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& HashKVResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& HashKVResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.HashKVResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* HashKVResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.HashKVResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* HashKVResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* HashKVResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.HashKVResponse.header)
  return _internal_mutable_header();
}
inline void HashKVResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.HashKVResponse.header)
}

// uint32 hash = 2;
inline void HashKVResponse::clear_hash() {
  hash_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HashKVResponse::_internal_hash() const {
  return hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HashKVResponse::hash() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.HashKVResponse.hash)
  return _internal_hash();
}
inline void HashKVResponse::_internal_set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hash_ = value;
}
inline void HashKVResponse::set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.HashKVResponse.hash)
}

// int64 compact_revision = 3;
inline void HashKVResponse::clear_compact_revision() {
  compact_revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HashKVResponse::_internal_compact_revision() const {
  return compact_revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HashKVResponse::compact_revision() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.HashKVResponse.compact_revision)
  return _internal_compact_revision();
}
inline void HashKVResponse::_internal_set_compact_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  compact_revision_ = value;
}
inline void HashKVResponse::set_compact_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_compact_revision(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.HashKVResponse.compact_revision)
}

// -------------------------------------------------------------------

// HashResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool HashResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool HashResponse::has_header() const {
  return _internal_has_header();
}
inline void HashResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& HashResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& HashResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.HashResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* HashResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.HashResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* HashResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* HashResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.HashResponse.header)
  return _internal_mutable_header();
}
inline void HashResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.HashResponse.header)
}

// uint32 hash = 2;
inline void HashResponse::clear_hash() {
  hash_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HashResponse::_internal_hash() const {
  return hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HashResponse::hash() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.HashResponse.hash)
  return _internal_hash();
}
inline void HashResponse::_internal_set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hash_ = value;
}
inline void HashResponse::set_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.HashResponse.hash)
}

// -------------------------------------------------------------------

// SnapshotRequest

// -------------------------------------------------------------------

// SnapshotResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool SnapshotResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool SnapshotResponse::has_header() const {
  return _internal_has_header();
}
inline void SnapshotResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& SnapshotResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& SnapshotResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.SnapshotResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* SnapshotResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.SnapshotResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* SnapshotResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* SnapshotResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.SnapshotResponse.header)
  return _internal_mutable_header();
}
inline void SnapshotResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.SnapshotResponse.header)
}

// uint64 remaining_bytes = 2;
inline void SnapshotResponse::clear_remaining_bytes() {
  remaining_bytes_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotResponse::_internal_remaining_bytes() const {
  return remaining_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotResponse::remaining_bytes() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.SnapshotResponse.remaining_bytes)
  return _internal_remaining_bytes();
}
inline void SnapshotResponse::_internal_set_remaining_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  remaining_bytes_ = value;
}
inline void SnapshotResponse::set_remaining_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_remaining_bytes(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.SnapshotResponse.remaining_bytes)
}

// bytes blob = 3;
inline void SnapshotResponse::clear_blob() {
  blob_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SnapshotResponse::blob() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.SnapshotResponse.blob)
  return _internal_blob();
}
inline void SnapshotResponse::set_blob(const std::string& value) {
  _internal_set_blob(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.SnapshotResponse.blob)
}
inline std::string* SnapshotResponse::mutable_blob() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.SnapshotResponse.blob)
  return _internal_mutable_blob();
}
inline const std::string& SnapshotResponse::_internal_blob() const {
  return blob_.GetNoArena();
}
inline void SnapshotResponse::_internal_set_blob(const std::string& value) {
  
  blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SnapshotResponse::set_blob(std::string&& value) {
  
  blob_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.SnapshotResponse.blob)
}
inline void SnapshotResponse::set_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.SnapshotResponse.blob)
}
inline void SnapshotResponse::set_blob(const void* value, size_t size) {
  
  blob_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.SnapshotResponse.blob)
}
inline std::string* SnapshotResponse::_internal_mutable_blob() {
  
  return blob_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnapshotResponse::release_blob() {
  // @@protoc_insertion_point(field_release:etcdserverpb.SnapshotResponse.blob)
  
  return blob_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotResponse::set_allocated_blob(std::string* blob) {
  if (blob != nullptr) {
    
  } else {
    
  }
  blob_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blob);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.SnapshotResponse.blob)
}

// -------------------------------------------------------------------

// WatchRequest

// .etcdserverpb.WatchCreateRequest create_request = 1;
inline bool WatchRequest::_internal_has_create_request() const {
  return request_union_case() == kCreateRequest;
}
inline bool WatchRequest::has_create_request() const {
  return _internal_has_create_request();
}
inline void WatchRequest::set_has_create_request() {
  _oneof_case_[0] = kCreateRequest;
}
inline void WatchRequest::clear_create_request() {
  if (_internal_has_create_request()) {
    delete request_union_.create_request_;
    clear_has_request_union();
  }
}
inline ::etcdserverpb::WatchCreateRequest* WatchRequest::release_create_request() {
  // @@protoc_insertion_point(field_release:etcdserverpb.WatchRequest.create_request)
  if (has_create_request()) {
    clear_has_request_union();
      ::etcdserverpb::WatchCreateRequest* temp = request_union_.create_request_;
    request_union_.create_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::etcdserverpb::WatchCreateRequest& WatchRequest::_internal_create_request() const {
  return _internal_has_create_request()
      ? *request_union_.create_request_
      : *reinterpret_cast< ::etcdserverpb::WatchCreateRequest*>(&::etcdserverpb::_WatchCreateRequest_default_instance_);
}
inline const ::etcdserverpb::WatchCreateRequest& WatchRequest::create_request() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchRequest.create_request)
  return _internal_create_request();
}
inline ::etcdserverpb::WatchCreateRequest* WatchRequest::_internal_mutable_create_request() {
  if (!_internal_has_create_request()) {
    clear_request_union();
    set_has_create_request();
    request_union_.create_request_ = CreateMaybeMessage< ::etcdserverpb::WatchCreateRequest >(
        GetArenaNoVirtual());
  }
  return request_union_.create_request_;
}
inline ::etcdserverpb::WatchCreateRequest* WatchRequest::mutable_create_request() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.WatchRequest.create_request)
  return _internal_mutable_create_request();
}

// .etcdserverpb.WatchCancelRequest cancel_request = 2;
inline bool WatchRequest::_internal_has_cancel_request() const {
  return request_union_case() == kCancelRequest;
}
inline bool WatchRequest::has_cancel_request() const {
  return _internal_has_cancel_request();
}
inline void WatchRequest::set_has_cancel_request() {
  _oneof_case_[0] = kCancelRequest;
}
inline void WatchRequest::clear_cancel_request() {
  if (_internal_has_cancel_request()) {
    delete request_union_.cancel_request_;
    clear_has_request_union();
  }
}
inline ::etcdserverpb::WatchCancelRequest* WatchRequest::release_cancel_request() {
  // @@protoc_insertion_point(field_release:etcdserverpb.WatchRequest.cancel_request)
  if (has_cancel_request()) {
    clear_has_request_union();
      ::etcdserverpb::WatchCancelRequest* temp = request_union_.cancel_request_;
    request_union_.cancel_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::etcdserverpb::WatchCancelRequest& WatchRequest::_internal_cancel_request() const {
  return _internal_has_cancel_request()
      ? *request_union_.cancel_request_
      : *reinterpret_cast< ::etcdserverpb::WatchCancelRequest*>(&::etcdserverpb::_WatchCancelRequest_default_instance_);
}
inline const ::etcdserverpb::WatchCancelRequest& WatchRequest::cancel_request() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchRequest.cancel_request)
  return _internal_cancel_request();
}
inline ::etcdserverpb::WatchCancelRequest* WatchRequest::_internal_mutable_cancel_request() {
  if (!_internal_has_cancel_request()) {
    clear_request_union();
    set_has_cancel_request();
    request_union_.cancel_request_ = CreateMaybeMessage< ::etcdserverpb::WatchCancelRequest >(
        GetArenaNoVirtual());
  }
  return request_union_.cancel_request_;
}
inline ::etcdserverpb::WatchCancelRequest* WatchRequest::mutable_cancel_request() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.WatchRequest.cancel_request)
  return _internal_mutable_cancel_request();
}

// .etcdserverpb.WatchProgressRequest progress_request = 3;
inline bool WatchRequest::_internal_has_progress_request() const {
  return request_union_case() == kProgressRequest;
}
inline bool WatchRequest::has_progress_request() const {
  return _internal_has_progress_request();
}
inline void WatchRequest::set_has_progress_request() {
  _oneof_case_[0] = kProgressRequest;
}
inline void WatchRequest::clear_progress_request() {
  if (_internal_has_progress_request()) {
    delete request_union_.progress_request_;
    clear_has_request_union();
  }
}
inline ::etcdserverpb::WatchProgressRequest* WatchRequest::release_progress_request() {
  // @@protoc_insertion_point(field_release:etcdserverpb.WatchRequest.progress_request)
  if (has_progress_request()) {
    clear_has_request_union();
      ::etcdserverpb::WatchProgressRequest* temp = request_union_.progress_request_;
    request_union_.progress_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::etcdserverpb::WatchProgressRequest& WatchRequest::_internal_progress_request() const {
  return _internal_has_progress_request()
      ? *request_union_.progress_request_
      : *reinterpret_cast< ::etcdserverpb::WatchProgressRequest*>(&::etcdserverpb::_WatchProgressRequest_default_instance_);
}
inline const ::etcdserverpb::WatchProgressRequest& WatchRequest::progress_request() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchRequest.progress_request)
  return _internal_progress_request();
}
inline ::etcdserverpb::WatchProgressRequest* WatchRequest::_internal_mutable_progress_request() {
  if (!_internal_has_progress_request()) {
    clear_request_union();
    set_has_progress_request();
    request_union_.progress_request_ = CreateMaybeMessage< ::etcdserverpb::WatchProgressRequest >(
        GetArenaNoVirtual());
  }
  return request_union_.progress_request_;
}
inline ::etcdserverpb::WatchProgressRequest* WatchRequest::mutable_progress_request() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.WatchRequest.progress_request)
  return _internal_mutable_progress_request();
}

inline bool WatchRequest::has_request_union() const {
  return request_union_case() != REQUEST_UNION_NOT_SET;
}
inline void WatchRequest::clear_has_request_union() {
  _oneof_case_[0] = REQUEST_UNION_NOT_SET;
}
inline WatchRequest::RequestUnionCase WatchRequest::request_union_case() const {
  return WatchRequest::RequestUnionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// WatchCreateRequest

// bytes key = 1;
inline void WatchCreateRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WatchCreateRequest::key() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchCreateRequest.key)
  return _internal_key();
}
inline void WatchCreateRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchCreateRequest.key)
}
inline std::string* WatchCreateRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.WatchCreateRequest.key)
  return _internal_mutable_key();
}
inline const std::string& WatchCreateRequest::_internal_key() const {
  return key_.GetNoArena();
}
inline void WatchCreateRequest::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WatchCreateRequest::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.WatchCreateRequest.key)
}
inline void WatchCreateRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.WatchCreateRequest.key)
}
inline void WatchCreateRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.WatchCreateRequest.key)
}
inline std::string* WatchCreateRequest::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WatchCreateRequest::release_key() {
  // @@protoc_insertion_point(field_release:etcdserverpb.WatchCreateRequest.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WatchCreateRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.WatchCreateRequest.key)
}

// bytes range_end = 2;
inline void WatchCreateRequest::clear_range_end() {
  range_end_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WatchCreateRequest::range_end() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchCreateRequest.range_end)
  return _internal_range_end();
}
inline void WatchCreateRequest::set_range_end(const std::string& value) {
  _internal_set_range_end(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchCreateRequest.range_end)
}
inline std::string* WatchCreateRequest::mutable_range_end() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.WatchCreateRequest.range_end)
  return _internal_mutable_range_end();
}
inline const std::string& WatchCreateRequest::_internal_range_end() const {
  return range_end_.GetNoArena();
}
inline void WatchCreateRequest::_internal_set_range_end(const std::string& value) {
  
  range_end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WatchCreateRequest::set_range_end(std::string&& value) {
  
  range_end_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.WatchCreateRequest.range_end)
}
inline void WatchCreateRequest::set_range_end(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  range_end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.WatchCreateRequest.range_end)
}
inline void WatchCreateRequest::set_range_end(const void* value, size_t size) {
  
  range_end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.WatchCreateRequest.range_end)
}
inline std::string* WatchCreateRequest::_internal_mutable_range_end() {
  
  return range_end_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WatchCreateRequest::release_range_end() {
  // @@protoc_insertion_point(field_release:etcdserverpb.WatchCreateRequest.range_end)
  
  return range_end_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WatchCreateRequest::set_allocated_range_end(std::string* range_end) {
  if (range_end != nullptr) {
    
  } else {
    
  }
  range_end_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), range_end);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.WatchCreateRequest.range_end)
}

// int64 start_revision = 3;
inline void WatchCreateRequest::clear_start_revision() {
  start_revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WatchCreateRequest::_internal_start_revision() const {
  return start_revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WatchCreateRequest::start_revision() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchCreateRequest.start_revision)
  return _internal_start_revision();
}
inline void WatchCreateRequest::_internal_set_start_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_revision_ = value;
}
inline void WatchCreateRequest::set_start_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start_revision(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchCreateRequest.start_revision)
}

// bool progress_notify = 4;
inline void WatchCreateRequest::clear_progress_notify() {
  progress_notify_ = false;
}
inline bool WatchCreateRequest::_internal_progress_notify() const {
  return progress_notify_;
}
inline bool WatchCreateRequest::progress_notify() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchCreateRequest.progress_notify)
  return _internal_progress_notify();
}
inline void WatchCreateRequest::_internal_set_progress_notify(bool value) {
  
  progress_notify_ = value;
}
inline void WatchCreateRequest::set_progress_notify(bool value) {
  _internal_set_progress_notify(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchCreateRequest.progress_notify)
}

// repeated .etcdserverpb.WatchCreateRequest.FilterType filters = 5;
inline int WatchCreateRequest::_internal_filters_size() const {
  return filters_.size();
}
inline int WatchCreateRequest::filters_size() const {
  return _internal_filters_size();
}
inline void WatchCreateRequest::clear_filters() {
  filters_.Clear();
}
inline ::etcdserverpb::WatchCreateRequest_FilterType WatchCreateRequest::_internal_filters(int index) const {
  return static_cast< ::etcdserverpb::WatchCreateRequest_FilterType >(filters_.Get(index));
}
inline ::etcdserverpb::WatchCreateRequest_FilterType WatchCreateRequest::filters(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchCreateRequest.filters)
  return _internal_filters(index);
}
inline void WatchCreateRequest::set_filters(int index, ::etcdserverpb::WatchCreateRequest_FilterType value) {
  filters_.Set(index, value);
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchCreateRequest.filters)
}
inline void WatchCreateRequest::_internal_add_filters(::etcdserverpb::WatchCreateRequest_FilterType value) {
  filters_.Add(value);
}
inline void WatchCreateRequest::add_filters(::etcdserverpb::WatchCreateRequest_FilterType value) {
  // @@protoc_insertion_point(field_add:etcdserverpb.WatchCreateRequest.filters)
  _internal_add_filters(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
WatchCreateRequest::filters() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.WatchCreateRequest.filters)
  return filters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
WatchCreateRequest::_internal_mutable_filters() {
  return &filters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
WatchCreateRequest::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.WatchCreateRequest.filters)
  return _internal_mutable_filters();
}

// bool prev_kv = 6;
inline void WatchCreateRequest::clear_prev_kv() {
  prev_kv_ = false;
}
inline bool WatchCreateRequest::_internal_prev_kv() const {
  return prev_kv_;
}
inline bool WatchCreateRequest::prev_kv() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchCreateRequest.prev_kv)
  return _internal_prev_kv();
}
inline void WatchCreateRequest::_internal_set_prev_kv(bool value) {
  
  prev_kv_ = value;
}
inline void WatchCreateRequest::set_prev_kv(bool value) {
  _internal_set_prev_kv(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchCreateRequest.prev_kv)
}

// int64 watch_id = 7;
inline void WatchCreateRequest::clear_watch_id() {
  watch_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WatchCreateRequest::_internal_watch_id() const {
  return watch_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WatchCreateRequest::watch_id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchCreateRequest.watch_id)
  return _internal_watch_id();
}
inline void WatchCreateRequest::_internal_set_watch_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  watch_id_ = value;
}
inline void WatchCreateRequest::set_watch_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_watch_id(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchCreateRequest.watch_id)
}

// bool fragment = 8;
inline void WatchCreateRequest::clear_fragment() {
  fragment_ = false;
}
inline bool WatchCreateRequest::_internal_fragment() const {
  return fragment_;
}
inline bool WatchCreateRequest::fragment() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchCreateRequest.fragment)
  return _internal_fragment();
}
inline void WatchCreateRequest::_internal_set_fragment(bool value) {
  
  fragment_ = value;
}
inline void WatchCreateRequest::set_fragment(bool value) {
  _internal_set_fragment(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchCreateRequest.fragment)
}

// -------------------------------------------------------------------

// WatchCancelRequest

// int64 watch_id = 1;
inline void WatchCancelRequest::clear_watch_id() {
  watch_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WatchCancelRequest::_internal_watch_id() const {
  return watch_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WatchCancelRequest::watch_id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchCancelRequest.watch_id)
  return _internal_watch_id();
}
inline void WatchCancelRequest::_internal_set_watch_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  watch_id_ = value;
}
inline void WatchCancelRequest::set_watch_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_watch_id(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchCancelRequest.watch_id)
}

// -------------------------------------------------------------------

// WatchProgressRequest

// -------------------------------------------------------------------

// WatchResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool WatchResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool WatchResponse::has_header() const {
  return _internal_has_header();
}
inline void WatchResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& WatchResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& WatchResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* WatchResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.WatchResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* WatchResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* WatchResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.WatchResponse.header)
  return _internal_mutable_header();
}
inline void WatchResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.WatchResponse.header)
}

// int64 watch_id = 2;
inline void WatchResponse::clear_watch_id() {
  watch_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WatchResponse::_internal_watch_id() const {
  return watch_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WatchResponse::watch_id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchResponse.watch_id)
  return _internal_watch_id();
}
inline void WatchResponse::_internal_set_watch_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  watch_id_ = value;
}
inline void WatchResponse::set_watch_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_watch_id(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchResponse.watch_id)
}

// bool created = 3;
inline void WatchResponse::clear_created() {
  created_ = false;
}
inline bool WatchResponse::_internal_created() const {
  return created_;
}
inline bool WatchResponse::created() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchResponse.created)
  return _internal_created();
}
inline void WatchResponse::_internal_set_created(bool value) {
  
  created_ = value;
}
inline void WatchResponse::set_created(bool value) {
  _internal_set_created(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchResponse.created)
}

// bool canceled = 4;
inline void WatchResponse::clear_canceled() {
  canceled_ = false;
}
inline bool WatchResponse::_internal_canceled() const {
  return canceled_;
}
inline bool WatchResponse::canceled() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchResponse.canceled)
  return _internal_canceled();
}
inline void WatchResponse::_internal_set_canceled(bool value) {
  
  canceled_ = value;
}
inline void WatchResponse::set_canceled(bool value) {
  _internal_set_canceled(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchResponse.canceled)
}

// int64 compact_revision = 5;
inline void WatchResponse::clear_compact_revision() {
  compact_revision_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WatchResponse::_internal_compact_revision() const {
  return compact_revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WatchResponse::compact_revision() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchResponse.compact_revision)
  return _internal_compact_revision();
}
inline void WatchResponse::_internal_set_compact_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  compact_revision_ = value;
}
inline void WatchResponse::set_compact_revision(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_compact_revision(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchResponse.compact_revision)
}

// string cancel_reason = 6;
inline void WatchResponse::clear_cancel_reason() {
  cancel_reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WatchResponse::cancel_reason() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchResponse.cancel_reason)
  return _internal_cancel_reason();
}
inline void WatchResponse::set_cancel_reason(const std::string& value) {
  _internal_set_cancel_reason(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchResponse.cancel_reason)
}
inline std::string* WatchResponse::mutable_cancel_reason() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.WatchResponse.cancel_reason)
  return _internal_mutable_cancel_reason();
}
inline const std::string& WatchResponse::_internal_cancel_reason() const {
  return cancel_reason_.GetNoArena();
}
inline void WatchResponse::_internal_set_cancel_reason(const std::string& value) {
  
  cancel_reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WatchResponse::set_cancel_reason(std::string&& value) {
  
  cancel_reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.WatchResponse.cancel_reason)
}
inline void WatchResponse::set_cancel_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cancel_reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.WatchResponse.cancel_reason)
}
inline void WatchResponse::set_cancel_reason(const char* value, size_t size) {
  
  cancel_reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.WatchResponse.cancel_reason)
}
inline std::string* WatchResponse::_internal_mutable_cancel_reason() {
  
  return cancel_reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WatchResponse::release_cancel_reason() {
  // @@protoc_insertion_point(field_release:etcdserverpb.WatchResponse.cancel_reason)
  
  return cancel_reason_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WatchResponse::set_allocated_cancel_reason(std::string* cancel_reason) {
  if (cancel_reason != nullptr) {
    
  } else {
    
  }
  cancel_reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cancel_reason);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.WatchResponse.cancel_reason)
}

// bool fragment = 7;
inline void WatchResponse::clear_fragment() {
  fragment_ = false;
}
inline bool WatchResponse::_internal_fragment() const {
  return fragment_;
}
inline bool WatchResponse::fragment() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchResponse.fragment)
  return _internal_fragment();
}
inline void WatchResponse::_internal_set_fragment(bool value) {
  
  fragment_ = value;
}
inline void WatchResponse::set_fragment(bool value) {
  _internal_set_fragment(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.WatchResponse.fragment)
}

// repeated .mvccpb.Event events = 11;
inline int WatchResponse::_internal_events_size() const {
  return events_.size();
}
inline int WatchResponse::events_size() const {
  return _internal_events_size();
}
inline ::mvccpb::Event* WatchResponse::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.WatchResponse.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mvccpb::Event >*
WatchResponse::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.WatchResponse.events)
  return &events_;
}
inline const ::mvccpb::Event& WatchResponse::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::mvccpb::Event& WatchResponse::events(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.WatchResponse.events)
  return _internal_events(index);
}
inline ::mvccpb::Event* WatchResponse::_internal_add_events() {
  return events_.Add();
}
inline ::mvccpb::Event* WatchResponse::add_events() {
  // @@protoc_insertion_point(field_add:etcdserverpb.WatchResponse.events)
  return _internal_add_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mvccpb::Event >&
WatchResponse::events() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.WatchResponse.events)
  return events_;
}

// -------------------------------------------------------------------

// LeaseGrantRequest

// int64 TTL = 1;
inline void LeaseGrantRequest::clear_ttl() {
  ttl_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseGrantRequest::_internal_ttl() const {
  return ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseGrantRequest::ttl() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseGrantRequest.TTL)
  return _internal_ttl();
}
inline void LeaseGrantRequest::_internal_set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ttl_ = value;
}
inline void LeaseGrantRequest::set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseGrantRequest.TTL)
}

// int64 ID = 2;
inline void LeaseGrantRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseGrantRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseGrantRequest::id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseGrantRequest.ID)
  return _internal_id();
}
inline void LeaseGrantRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void LeaseGrantRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseGrantRequest.ID)
}

// -------------------------------------------------------------------

// LeaseGrantResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool LeaseGrantResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool LeaseGrantResponse::has_header() const {
  return _internal_has_header();
}
inline void LeaseGrantResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& LeaseGrantResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& LeaseGrantResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseGrantResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* LeaseGrantResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.LeaseGrantResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* LeaseGrantResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* LeaseGrantResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.LeaseGrantResponse.header)
  return _internal_mutable_header();
}
inline void LeaseGrantResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.LeaseGrantResponse.header)
}

// int64 ID = 2;
inline void LeaseGrantResponse::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseGrantResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseGrantResponse::id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseGrantResponse.ID)
  return _internal_id();
}
inline void LeaseGrantResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void LeaseGrantResponse::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseGrantResponse.ID)
}

// int64 TTL = 3;
inline void LeaseGrantResponse::clear_ttl() {
  ttl_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseGrantResponse::_internal_ttl() const {
  return ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseGrantResponse::ttl() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseGrantResponse.TTL)
  return _internal_ttl();
}
inline void LeaseGrantResponse::_internal_set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ttl_ = value;
}
inline void LeaseGrantResponse::set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseGrantResponse.TTL)
}

// string error = 4;
inline void LeaseGrantResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LeaseGrantResponse::error() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseGrantResponse.error)
  return _internal_error();
}
inline void LeaseGrantResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseGrantResponse.error)
}
inline std::string* LeaseGrantResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.LeaseGrantResponse.error)
  return _internal_mutable_error();
}
inline const std::string& LeaseGrantResponse::_internal_error() const {
  return error_.GetNoArena();
}
inline void LeaseGrantResponse::_internal_set_error(const std::string& value) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LeaseGrantResponse::set_error(std::string&& value) {
  
  error_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.LeaseGrantResponse.error)
}
inline void LeaseGrantResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.LeaseGrantResponse.error)
}
inline void LeaseGrantResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.LeaseGrantResponse.error)
}
inline std::string* LeaseGrantResponse::_internal_mutable_error() {
  
  return error_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LeaseGrantResponse::release_error() {
  // @@protoc_insertion_point(field_release:etcdserverpb.LeaseGrantResponse.error)
  
  return error_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LeaseGrantResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.LeaseGrantResponse.error)
}

// -------------------------------------------------------------------

// LeaseRevokeRequest

// int64 ID = 1;
inline void LeaseRevokeRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseRevokeRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseRevokeRequest::id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseRevokeRequest.ID)
  return _internal_id();
}
inline void LeaseRevokeRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void LeaseRevokeRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseRevokeRequest.ID)
}

// -------------------------------------------------------------------

// LeaseRevokeResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool LeaseRevokeResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool LeaseRevokeResponse::has_header() const {
  return _internal_has_header();
}
inline void LeaseRevokeResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& LeaseRevokeResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& LeaseRevokeResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseRevokeResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* LeaseRevokeResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.LeaseRevokeResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* LeaseRevokeResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* LeaseRevokeResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.LeaseRevokeResponse.header)
  return _internal_mutable_header();
}
inline void LeaseRevokeResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.LeaseRevokeResponse.header)
}

// -------------------------------------------------------------------

// LeaseCheckpoint

// int64 ID = 1;
inline void LeaseCheckpoint::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseCheckpoint::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseCheckpoint::id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseCheckpoint.ID)
  return _internal_id();
}
inline void LeaseCheckpoint::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void LeaseCheckpoint::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseCheckpoint.ID)
}

// int64 remaining_TTL = 2;
inline void LeaseCheckpoint::clear_remaining_ttl() {
  remaining_ttl_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseCheckpoint::_internal_remaining_ttl() const {
  return remaining_ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseCheckpoint::remaining_ttl() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseCheckpoint.remaining_TTL)
  return _internal_remaining_ttl();
}
inline void LeaseCheckpoint::_internal_set_remaining_ttl(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  remaining_ttl_ = value;
}
inline void LeaseCheckpoint::set_remaining_ttl(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_remaining_ttl(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseCheckpoint.remaining_TTL)
}

// -------------------------------------------------------------------

// LeaseCheckpointRequest

// repeated .etcdserverpb.LeaseCheckpoint checkpoints = 1;
inline int LeaseCheckpointRequest::_internal_checkpoints_size() const {
  return checkpoints_.size();
}
inline int LeaseCheckpointRequest::checkpoints_size() const {
  return _internal_checkpoints_size();
}
inline void LeaseCheckpointRequest::clear_checkpoints() {
  checkpoints_.Clear();
}
inline ::etcdserverpb::LeaseCheckpoint* LeaseCheckpointRequest::mutable_checkpoints(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.LeaseCheckpointRequest.checkpoints)
  return checkpoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::LeaseCheckpoint >*
LeaseCheckpointRequest::mutable_checkpoints() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.LeaseCheckpointRequest.checkpoints)
  return &checkpoints_;
}
inline const ::etcdserverpb::LeaseCheckpoint& LeaseCheckpointRequest::_internal_checkpoints(int index) const {
  return checkpoints_.Get(index);
}
inline const ::etcdserverpb::LeaseCheckpoint& LeaseCheckpointRequest::checkpoints(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseCheckpointRequest.checkpoints)
  return _internal_checkpoints(index);
}
inline ::etcdserverpb::LeaseCheckpoint* LeaseCheckpointRequest::_internal_add_checkpoints() {
  return checkpoints_.Add();
}
inline ::etcdserverpb::LeaseCheckpoint* LeaseCheckpointRequest::add_checkpoints() {
  // @@protoc_insertion_point(field_add:etcdserverpb.LeaseCheckpointRequest.checkpoints)
  return _internal_add_checkpoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::LeaseCheckpoint >&
LeaseCheckpointRequest::checkpoints() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.LeaseCheckpointRequest.checkpoints)
  return checkpoints_;
}

// -------------------------------------------------------------------

// LeaseCheckpointResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool LeaseCheckpointResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool LeaseCheckpointResponse::has_header() const {
  return _internal_has_header();
}
inline void LeaseCheckpointResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& LeaseCheckpointResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& LeaseCheckpointResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseCheckpointResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* LeaseCheckpointResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.LeaseCheckpointResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* LeaseCheckpointResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* LeaseCheckpointResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.LeaseCheckpointResponse.header)
  return _internal_mutable_header();
}
inline void LeaseCheckpointResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.LeaseCheckpointResponse.header)
}

// -------------------------------------------------------------------

// LeaseKeepAliveRequest

// int64 ID = 1;
inline void LeaseKeepAliveRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseKeepAliveRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseKeepAliveRequest::id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseKeepAliveRequest.ID)
  return _internal_id();
}
inline void LeaseKeepAliveRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void LeaseKeepAliveRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseKeepAliveRequest.ID)
}

// -------------------------------------------------------------------

// LeaseKeepAliveResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool LeaseKeepAliveResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool LeaseKeepAliveResponse::has_header() const {
  return _internal_has_header();
}
inline void LeaseKeepAliveResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& LeaseKeepAliveResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& LeaseKeepAliveResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseKeepAliveResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* LeaseKeepAliveResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.LeaseKeepAliveResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* LeaseKeepAliveResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* LeaseKeepAliveResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.LeaseKeepAliveResponse.header)
  return _internal_mutable_header();
}
inline void LeaseKeepAliveResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.LeaseKeepAliveResponse.header)
}

// int64 ID = 2;
inline void LeaseKeepAliveResponse::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseKeepAliveResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseKeepAliveResponse::id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseKeepAliveResponse.ID)
  return _internal_id();
}
inline void LeaseKeepAliveResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void LeaseKeepAliveResponse::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseKeepAliveResponse.ID)
}

// int64 TTL = 3;
inline void LeaseKeepAliveResponse::clear_ttl() {
  ttl_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseKeepAliveResponse::_internal_ttl() const {
  return ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseKeepAliveResponse::ttl() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseKeepAliveResponse.TTL)
  return _internal_ttl();
}
inline void LeaseKeepAliveResponse::_internal_set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ttl_ = value;
}
inline void LeaseKeepAliveResponse::set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseKeepAliveResponse.TTL)
}

// -------------------------------------------------------------------

// LeaseTimeToLiveRequest

// int64 ID = 1;
inline void LeaseTimeToLiveRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseTimeToLiveRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseTimeToLiveRequest::id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseTimeToLiveRequest.ID)
  return _internal_id();
}
inline void LeaseTimeToLiveRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void LeaseTimeToLiveRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseTimeToLiveRequest.ID)
}

// bool keys = 2;
inline void LeaseTimeToLiveRequest::clear_keys() {
  keys_ = false;
}
inline bool LeaseTimeToLiveRequest::_internal_keys() const {
  return keys_;
}
inline bool LeaseTimeToLiveRequest::keys() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseTimeToLiveRequest.keys)
  return _internal_keys();
}
inline void LeaseTimeToLiveRequest::_internal_set_keys(bool value) {
  
  keys_ = value;
}
inline void LeaseTimeToLiveRequest::set_keys(bool value) {
  _internal_set_keys(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseTimeToLiveRequest.keys)
}

// -------------------------------------------------------------------

// LeaseTimeToLiveResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool LeaseTimeToLiveResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool LeaseTimeToLiveResponse::has_header() const {
  return _internal_has_header();
}
inline void LeaseTimeToLiveResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& LeaseTimeToLiveResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& LeaseTimeToLiveResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseTimeToLiveResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* LeaseTimeToLiveResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.LeaseTimeToLiveResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* LeaseTimeToLiveResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* LeaseTimeToLiveResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.LeaseTimeToLiveResponse.header)
  return _internal_mutable_header();
}
inline void LeaseTimeToLiveResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.LeaseTimeToLiveResponse.header)
}

// int64 ID = 2;
inline void LeaseTimeToLiveResponse::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseTimeToLiveResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseTimeToLiveResponse::id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseTimeToLiveResponse.ID)
  return _internal_id();
}
inline void LeaseTimeToLiveResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void LeaseTimeToLiveResponse::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseTimeToLiveResponse.ID)
}

// int64 TTL = 3;
inline void LeaseTimeToLiveResponse::clear_ttl() {
  ttl_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseTimeToLiveResponse::_internal_ttl() const {
  return ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseTimeToLiveResponse::ttl() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseTimeToLiveResponse.TTL)
  return _internal_ttl();
}
inline void LeaseTimeToLiveResponse::_internal_set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ttl_ = value;
}
inline void LeaseTimeToLiveResponse::set_ttl(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseTimeToLiveResponse.TTL)
}

// int64 grantedTTL = 4;
inline void LeaseTimeToLiveResponse::clear_grantedttl() {
  grantedttl_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseTimeToLiveResponse::_internal_grantedttl() const {
  return grantedttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseTimeToLiveResponse::grantedttl() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseTimeToLiveResponse.grantedTTL)
  return _internal_grantedttl();
}
inline void LeaseTimeToLiveResponse::_internal_set_grantedttl(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  grantedttl_ = value;
}
inline void LeaseTimeToLiveResponse::set_grantedttl(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_grantedttl(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseTimeToLiveResponse.grantedTTL)
}

// repeated bytes keys = 5;
inline int LeaseTimeToLiveResponse::_internal_keys_size() const {
  return keys_.size();
}
inline int LeaseTimeToLiveResponse::keys_size() const {
  return _internal_keys_size();
}
inline void LeaseTimeToLiveResponse::clear_keys() {
  keys_.Clear();
}
inline std::string* LeaseTimeToLiveResponse::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:etcdserverpb.LeaseTimeToLiveResponse.keys)
  return _internal_add_keys();
}
inline const std::string& LeaseTimeToLiveResponse::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const std::string& LeaseTimeToLiveResponse::keys(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseTimeToLiveResponse.keys)
  return _internal_keys(index);
}
inline std::string* LeaseTimeToLiveResponse::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.LeaseTimeToLiveResponse.keys)
  return keys_.Mutable(index);
}
inline void LeaseTimeToLiveResponse::set_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseTimeToLiveResponse.keys)
  keys_.Mutable(index)->assign(value);
}
inline void LeaseTimeToLiveResponse::set_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseTimeToLiveResponse.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
inline void LeaseTimeToLiveResponse::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:etcdserverpb.LeaseTimeToLiveResponse.keys)
}
inline void LeaseTimeToLiveResponse::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.LeaseTimeToLiveResponse.keys)
}
inline std::string* LeaseTimeToLiveResponse::_internal_add_keys() {
  return keys_.Add();
}
inline void LeaseTimeToLiveResponse::add_keys(const std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:etcdserverpb.LeaseTimeToLiveResponse.keys)
}
inline void LeaseTimeToLiveResponse::add_keys(std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:etcdserverpb.LeaseTimeToLiveResponse.keys)
}
inline void LeaseTimeToLiveResponse::add_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:etcdserverpb.LeaseTimeToLiveResponse.keys)
}
inline void LeaseTimeToLiveResponse::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:etcdserverpb.LeaseTimeToLiveResponse.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LeaseTimeToLiveResponse::keys() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.LeaseTimeToLiveResponse.keys)
  return keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LeaseTimeToLiveResponse::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.LeaseTimeToLiveResponse.keys)
  return &keys_;
}

// -------------------------------------------------------------------

// LeaseLeasesRequest

// -------------------------------------------------------------------

// LeaseStatus

// int64 ID = 1;
inline void LeaseStatus::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseStatus::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaseStatus::id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseStatus.ID)
  return _internal_id();
}
inline void LeaseStatus::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void LeaseStatus::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.LeaseStatus.ID)
}

// -------------------------------------------------------------------

// LeaseLeasesResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool LeaseLeasesResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool LeaseLeasesResponse::has_header() const {
  return _internal_has_header();
}
inline void LeaseLeasesResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& LeaseLeasesResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& LeaseLeasesResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseLeasesResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* LeaseLeasesResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.LeaseLeasesResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* LeaseLeasesResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* LeaseLeasesResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.LeaseLeasesResponse.header)
  return _internal_mutable_header();
}
inline void LeaseLeasesResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.LeaseLeasesResponse.header)
}

// repeated .etcdserverpb.LeaseStatus leases = 2;
inline int LeaseLeasesResponse::_internal_leases_size() const {
  return leases_.size();
}
inline int LeaseLeasesResponse::leases_size() const {
  return _internal_leases_size();
}
inline void LeaseLeasesResponse::clear_leases() {
  leases_.Clear();
}
inline ::etcdserverpb::LeaseStatus* LeaseLeasesResponse::mutable_leases(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.LeaseLeasesResponse.leases)
  return leases_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::LeaseStatus >*
LeaseLeasesResponse::mutable_leases() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.LeaseLeasesResponse.leases)
  return &leases_;
}
inline const ::etcdserverpb::LeaseStatus& LeaseLeasesResponse::_internal_leases(int index) const {
  return leases_.Get(index);
}
inline const ::etcdserverpb::LeaseStatus& LeaseLeasesResponse::leases(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.LeaseLeasesResponse.leases)
  return _internal_leases(index);
}
inline ::etcdserverpb::LeaseStatus* LeaseLeasesResponse::_internal_add_leases() {
  return leases_.Add();
}
inline ::etcdserverpb::LeaseStatus* LeaseLeasesResponse::add_leases() {
  // @@protoc_insertion_point(field_add:etcdserverpb.LeaseLeasesResponse.leases)
  return _internal_add_leases();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::LeaseStatus >&
LeaseLeasesResponse::leases() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.LeaseLeasesResponse.leases)
  return leases_;
}

// -------------------------------------------------------------------

// Member

// uint64 ID = 1;
inline void Member::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Member::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Member::id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Member.ID)
  return _internal_id();
}
inline void Member::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void Member::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Member.ID)
}

// string name = 2;
inline void Member::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Member::name() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Member.name)
  return _internal_name();
}
inline void Member::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Member.name)
}
inline std::string* Member::mutable_name() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.Member.name)
  return _internal_mutable_name();
}
inline const std::string& Member::_internal_name() const {
  return name_.GetNoArena();
}
inline void Member::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Member::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.Member.name)
}
inline void Member::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.Member.name)
}
inline void Member::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.Member.name)
}
inline std::string* Member::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Member::release_name() {
  // @@protoc_insertion_point(field_release:etcdserverpb.Member.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Member::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.Member.name)
}

// repeated string peerURLs = 3;
inline int Member::_internal_peerurls_size() const {
  return peerurls_.size();
}
inline int Member::peerurls_size() const {
  return _internal_peerurls_size();
}
inline void Member::clear_peerurls() {
  peerurls_.Clear();
}
inline std::string* Member::add_peerurls() {
  // @@protoc_insertion_point(field_add_mutable:etcdserverpb.Member.peerURLs)
  return _internal_add_peerurls();
}
inline const std::string& Member::_internal_peerurls(int index) const {
  return peerurls_.Get(index);
}
inline const std::string& Member::peerurls(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Member.peerURLs)
  return _internal_peerurls(index);
}
inline std::string* Member::mutable_peerurls(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.Member.peerURLs)
  return peerurls_.Mutable(index);
}
inline void Member::set_peerurls(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.Member.peerURLs)
  peerurls_.Mutable(index)->assign(value);
}
inline void Member::set_peerurls(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.Member.peerURLs)
  peerurls_.Mutable(index)->assign(std::move(value));
}
inline void Member::set_peerurls(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  peerurls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:etcdserverpb.Member.peerURLs)
}
inline void Member::set_peerurls(int index, const char* value, size_t size) {
  peerurls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.Member.peerURLs)
}
inline std::string* Member::_internal_add_peerurls() {
  return peerurls_.Add();
}
inline void Member::add_peerurls(const std::string& value) {
  peerurls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:etcdserverpb.Member.peerURLs)
}
inline void Member::add_peerurls(std::string&& value) {
  peerurls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:etcdserverpb.Member.peerURLs)
}
inline void Member::add_peerurls(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  peerurls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:etcdserverpb.Member.peerURLs)
}
inline void Member::add_peerurls(const char* value, size_t size) {
  peerurls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:etcdserverpb.Member.peerURLs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Member::peerurls() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.Member.peerURLs)
  return peerurls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Member::mutable_peerurls() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.Member.peerURLs)
  return &peerurls_;
}

// repeated string clientURLs = 4;
inline int Member::_internal_clienturls_size() const {
  return clienturls_.size();
}
inline int Member::clienturls_size() const {
  return _internal_clienturls_size();
}
inline void Member::clear_clienturls() {
  clienturls_.Clear();
}
inline std::string* Member::add_clienturls() {
  // @@protoc_insertion_point(field_add_mutable:etcdserverpb.Member.clientURLs)
  return _internal_add_clienturls();
}
inline const std::string& Member::_internal_clienturls(int index) const {
  return clienturls_.Get(index);
}
inline const std::string& Member::clienturls(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Member.clientURLs)
  return _internal_clienturls(index);
}
inline std::string* Member::mutable_clienturls(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.Member.clientURLs)
  return clienturls_.Mutable(index);
}
inline void Member::set_clienturls(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.Member.clientURLs)
  clienturls_.Mutable(index)->assign(value);
}
inline void Member::set_clienturls(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.Member.clientURLs)
  clienturls_.Mutable(index)->assign(std::move(value));
}
inline void Member::set_clienturls(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  clienturls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:etcdserverpb.Member.clientURLs)
}
inline void Member::set_clienturls(int index, const char* value, size_t size) {
  clienturls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.Member.clientURLs)
}
inline std::string* Member::_internal_add_clienturls() {
  return clienturls_.Add();
}
inline void Member::add_clienturls(const std::string& value) {
  clienturls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:etcdserverpb.Member.clientURLs)
}
inline void Member::add_clienturls(std::string&& value) {
  clienturls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:etcdserverpb.Member.clientURLs)
}
inline void Member::add_clienturls(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  clienturls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:etcdserverpb.Member.clientURLs)
}
inline void Member::add_clienturls(const char* value, size_t size) {
  clienturls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:etcdserverpb.Member.clientURLs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Member::clienturls() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.Member.clientURLs)
  return clienturls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Member::mutable_clienturls() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.Member.clientURLs)
  return &clienturls_;
}

// bool isLearner = 5;
inline void Member::clear_islearner() {
  islearner_ = false;
}
inline bool Member::_internal_islearner() const {
  return islearner_;
}
inline bool Member::islearner() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Member.isLearner)
  return _internal_islearner();
}
inline void Member::_internal_set_islearner(bool value) {
  
  islearner_ = value;
}
inline void Member::set_islearner(bool value) {
  _internal_set_islearner(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Member.isLearner)
}

// -------------------------------------------------------------------

// MemberAddRequest

// repeated string peerURLs = 1;
inline int MemberAddRequest::_internal_peerurls_size() const {
  return peerurls_.size();
}
inline int MemberAddRequest::peerurls_size() const {
  return _internal_peerurls_size();
}
inline void MemberAddRequest::clear_peerurls() {
  peerurls_.Clear();
}
inline std::string* MemberAddRequest::add_peerurls() {
  // @@protoc_insertion_point(field_add_mutable:etcdserverpb.MemberAddRequest.peerURLs)
  return _internal_add_peerurls();
}
inline const std::string& MemberAddRequest::_internal_peerurls(int index) const {
  return peerurls_.Get(index);
}
inline const std::string& MemberAddRequest::peerurls(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MemberAddRequest.peerURLs)
  return _internal_peerurls(index);
}
inline std::string* MemberAddRequest::mutable_peerurls(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.MemberAddRequest.peerURLs)
  return peerurls_.Mutable(index);
}
inline void MemberAddRequest::set_peerurls(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.MemberAddRequest.peerURLs)
  peerurls_.Mutable(index)->assign(value);
}
inline void MemberAddRequest::set_peerurls(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.MemberAddRequest.peerURLs)
  peerurls_.Mutable(index)->assign(std::move(value));
}
inline void MemberAddRequest::set_peerurls(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  peerurls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:etcdserverpb.MemberAddRequest.peerURLs)
}
inline void MemberAddRequest::set_peerurls(int index, const char* value, size_t size) {
  peerurls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.MemberAddRequest.peerURLs)
}
inline std::string* MemberAddRequest::_internal_add_peerurls() {
  return peerurls_.Add();
}
inline void MemberAddRequest::add_peerurls(const std::string& value) {
  peerurls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:etcdserverpb.MemberAddRequest.peerURLs)
}
inline void MemberAddRequest::add_peerurls(std::string&& value) {
  peerurls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:etcdserverpb.MemberAddRequest.peerURLs)
}
inline void MemberAddRequest::add_peerurls(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  peerurls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:etcdserverpb.MemberAddRequest.peerURLs)
}
inline void MemberAddRequest::add_peerurls(const char* value, size_t size) {
  peerurls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:etcdserverpb.MemberAddRequest.peerURLs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MemberAddRequest::peerurls() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.MemberAddRequest.peerURLs)
  return peerurls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MemberAddRequest::mutable_peerurls() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.MemberAddRequest.peerURLs)
  return &peerurls_;
}

// bool isLearner = 2;
inline void MemberAddRequest::clear_islearner() {
  islearner_ = false;
}
inline bool MemberAddRequest::_internal_islearner() const {
  return islearner_;
}
inline bool MemberAddRequest::islearner() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MemberAddRequest.isLearner)
  return _internal_islearner();
}
inline void MemberAddRequest::_internal_set_islearner(bool value) {
  
  islearner_ = value;
}
inline void MemberAddRequest::set_islearner(bool value) {
  _internal_set_islearner(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.MemberAddRequest.isLearner)
}

// -------------------------------------------------------------------

// MemberAddResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool MemberAddResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool MemberAddResponse::has_header() const {
  return _internal_has_header();
}
inline void MemberAddResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& MemberAddResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& MemberAddResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MemberAddResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* MemberAddResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.MemberAddResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* MemberAddResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* MemberAddResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.MemberAddResponse.header)
  return _internal_mutable_header();
}
inline void MemberAddResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.MemberAddResponse.header)
}

// .etcdserverpb.Member member = 2;
inline bool MemberAddResponse::_internal_has_member() const {
  return this != internal_default_instance() && member_ != nullptr;
}
inline bool MemberAddResponse::has_member() const {
  return _internal_has_member();
}
inline void MemberAddResponse::clear_member() {
  if (GetArenaNoVirtual() == nullptr && member_ != nullptr) {
    delete member_;
  }
  member_ = nullptr;
}
inline const ::etcdserverpb::Member& MemberAddResponse::_internal_member() const {
  const ::etcdserverpb::Member* p = member_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::Member*>(
      &::etcdserverpb::_Member_default_instance_);
}
inline const ::etcdserverpb::Member& MemberAddResponse::member() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MemberAddResponse.member)
  return _internal_member();
}
inline ::etcdserverpb::Member* MemberAddResponse::release_member() {
  // @@protoc_insertion_point(field_release:etcdserverpb.MemberAddResponse.member)
  
  ::etcdserverpb::Member* temp = member_;
  member_ = nullptr;
  return temp;
}
inline ::etcdserverpb::Member* MemberAddResponse::_internal_mutable_member() {
  
  if (member_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::Member>(GetArenaNoVirtual());
    member_ = p;
  }
  return member_;
}
inline ::etcdserverpb::Member* MemberAddResponse::mutable_member() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.MemberAddResponse.member)
  return _internal_mutable_member();
}
inline void MemberAddResponse::set_allocated_member(::etcdserverpb::Member* member) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete member_;
  }
  if (member) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      member = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, member, submessage_arena);
    }
    
  } else {
    
  }
  member_ = member;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.MemberAddResponse.member)
}

// repeated .etcdserverpb.Member members = 3;
inline int MemberAddResponse::_internal_members_size() const {
  return members_.size();
}
inline int MemberAddResponse::members_size() const {
  return _internal_members_size();
}
inline void MemberAddResponse::clear_members() {
  members_.Clear();
}
inline ::etcdserverpb::Member* MemberAddResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.MemberAddResponse.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Member >*
MemberAddResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.MemberAddResponse.members)
  return &members_;
}
inline const ::etcdserverpb::Member& MemberAddResponse::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::etcdserverpb::Member& MemberAddResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MemberAddResponse.members)
  return _internal_members(index);
}
inline ::etcdserverpb::Member* MemberAddResponse::_internal_add_members() {
  return members_.Add();
}
inline ::etcdserverpb::Member* MemberAddResponse::add_members() {
  // @@protoc_insertion_point(field_add:etcdserverpb.MemberAddResponse.members)
  return _internal_add_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Member >&
MemberAddResponse::members() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.MemberAddResponse.members)
  return members_;
}

// -------------------------------------------------------------------

// MemberRemoveRequest

// uint64 ID = 1;
inline void MemberRemoveRequest::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemberRemoveRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemberRemoveRequest::id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MemberRemoveRequest.ID)
  return _internal_id();
}
inline void MemberRemoveRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void MemberRemoveRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.MemberRemoveRequest.ID)
}

// -------------------------------------------------------------------

// MemberRemoveResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool MemberRemoveResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool MemberRemoveResponse::has_header() const {
  return _internal_has_header();
}
inline void MemberRemoveResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& MemberRemoveResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& MemberRemoveResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MemberRemoveResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* MemberRemoveResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.MemberRemoveResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* MemberRemoveResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* MemberRemoveResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.MemberRemoveResponse.header)
  return _internal_mutable_header();
}
inline void MemberRemoveResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.MemberRemoveResponse.header)
}

// repeated .etcdserverpb.Member members = 2;
inline int MemberRemoveResponse::_internal_members_size() const {
  return members_.size();
}
inline int MemberRemoveResponse::members_size() const {
  return _internal_members_size();
}
inline void MemberRemoveResponse::clear_members() {
  members_.Clear();
}
inline ::etcdserverpb::Member* MemberRemoveResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.MemberRemoveResponse.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Member >*
MemberRemoveResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.MemberRemoveResponse.members)
  return &members_;
}
inline const ::etcdserverpb::Member& MemberRemoveResponse::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::etcdserverpb::Member& MemberRemoveResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MemberRemoveResponse.members)
  return _internal_members(index);
}
inline ::etcdserverpb::Member* MemberRemoveResponse::_internal_add_members() {
  return members_.Add();
}
inline ::etcdserverpb::Member* MemberRemoveResponse::add_members() {
  // @@protoc_insertion_point(field_add:etcdserverpb.MemberRemoveResponse.members)
  return _internal_add_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Member >&
MemberRemoveResponse::members() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.MemberRemoveResponse.members)
  return members_;
}

// -------------------------------------------------------------------

// MemberUpdateRequest

// uint64 ID = 1;
inline void MemberUpdateRequest::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemberUpdateRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemberUpdateRequest::id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MemberUpdateRequest.ID)
  return _internal_id();
}
inline void MemberUpdateRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void MemberUpdateRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.MemberUpdateRequest.ID)
}

// repeated string peerURLs = 2;
inline int MemberUpdateRequest::_internal_peerurls_size() const {
  return peerurls_.size();
}
inline int MemberUpdateRequest::peerurls_size() const {
  return _internal_peerurls_size();
}
inline void MemberUpdateRequest::clear_peerurls() {
  peerurls_.Clear();
}
inline std::string* MemberUpdateRequest::add_peerurls() {
  // @@protoc_insertion_point(field_add_mutable:etcdserverpb.MemberUpdateRequest.peerURLs)
  return _internal_add_peerurls();
}
inline const std::string& MemberUpdateRequest::_internal_peerurls(int index) const {
  return peerurls_.Get(index);
}
inline const std::string& MemberUpdateRequest::peerurls(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MemberUpdateRequest.peerURLs)
  return _internal_peerurls(index);
}
inline std::string* MemberUpdateRequest::mutable_peerurls(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.MemberUpdateRequest.peerURLs)
  return peerurls_.Mutable(index);
}
inline void MemberUpdateRequest::set_peerurls(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.MemberUpdateRequest.peerURLs)
  peerurls_.Mutable(index)->assign(value);
}
inline void MemberUpdateRequest::set_peerurls(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.MemberUpdateRequest.peerURLs)
  peerurls_.Mutable(index)->assign(std::move(value));
}
inline void MemberUpdateRequest::set_peerurls(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  peerurls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:etcdserverpb.MemberUpdateRequest.peerURLs)
}
inline void MemberUpdateRequest::set_peerurls(int index, const char* value, size_t size) {
  peerurls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.MemberUpdateRequest.peerURLs)
}
inline std::string* MemberUpdateRequest::_internal_add_peerurls() {
  return peerurls_.Add();
}
inline void MemberUpdateRequest::add_peerurls(const std::string& value) {
  peerurls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:etcdserverpb.MemberUpdateRequest.peerURLs)
}
inline void MemberUpdateRequest::add_peerurls(std::string&& value) {
  peerurls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:etcdserverpb.MemberUpdateRequest.peerURLs)
}
inline void MemberUpdateRequest::add_peerurls(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  peerurls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:etcdserverpb.MemberUpdateRequest.peerURLs)
}
inline void MemberUpdateRequest::add_peerurls(const char* value, size_t size) {
  peerurls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:etcdserverpb.MemberUpdateRequest.peerURLs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MemberUpdateRequest::peerurls() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.MemberUpdateRequest.peerURLs)
  return peerurls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MemberUpdateRequest::mutable_peerurls() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.MemberUpdateRequest.peerURLs)
  return &peerurls_;
}

// -------------------------------------------------------------------

// MemberUpdateResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool MemberUpdateResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool MemberUpdateResponse::has_header() const {
  return _internal_has_header();
}
inline void MemberUpdateResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& MemberUpdateResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& MemberUpdateResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MemberUpdateResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* MemberUpdateResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.MemberUpdateResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* MemberUpdateResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* MemberUpdateResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.MemberUpdateResponse.header)
  return _internal_mutable_header();
}
inline void MemberUpdateResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.MemberUpdateResponse.header)
}

// repeated .etcdserverpb.Member members = 2;
inline int MemberUpdateResponse::_internal_members_size() const {
  return members_.size();
}
inline int MemberUpdateResponse::members_size() const {
  return _internal_members_size();
}
inline void MemberUpdateResponse::clear_members() {
  members_.Clear();
}
inline ::etcdserverpb::Member* MemberUpdateResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.MemberUpdateResponse.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Member >*
MemberUpdateResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.MemberUpdateResponse.members)
  return &members_;
}
inline const ::etcdserverpb::Member& MemberUpdateResponse::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::etcdserverpb::Member& MemberUpdateResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MemberUpdateResponse.members)
  return _internal_members(index);
}
inline ::etcdserverpb::Member* MemberUpdateResponse::_internal_add_members() {
  return members_.Add();
}
inline ::etcdserverpb::Member* MemberUpdateResponse::add_members() {
  // @@protoc_insertion_point(field_add:etcdserverpb.MemberUpdateResponse.members)
  return _internal_add_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Member >&
MemberUpdateResponse::members() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.MemberUpdateResponse.members)
  return members_;
}

// -------------------------------------------------------------------

// MemberListRequest

// -------------------------------------------------------------------

// MemberListResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool MemberListResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool MemberListResponse::has_header() const {
  return _internal_has_header();
}
inline void MemberListResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& MemberListResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& MemberListResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MemberListResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* MemberListResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.MemberListResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* MemberListResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* MemberListResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.MemberListResponse.header)
  return _internal_mutable_header();
}
inline void MemberListResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.MemberListResponse.header)
}

// repeated .etcdserverpb.Member members = 2;
inline int MemberListResponse::_internal_members_size() const {
  return members_.size();
}
inline int MemberListResponse::members_size() const {
  return _internal_members_size();
}
inline void MemberListResponse::clear_members() {
  members_.Clear();
}
inline ::etcdserverpb::Member* MemberListResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.MemberListResponse.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Member >*
MemberListResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.MemberListResponse.members)
  return &members_;
}
inline const ::etcdserverpb::Member& MemberListResponse::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::etcdserverpb::Member& MemberListResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MemberListResponse.members)
  return _internal_members(index);
}
inline ::etcdserverpb::Member* MemberListResponse::_internal_add_members() {
  return members_.Add();
}
inline ::etcdserverpb::Member* MemberListResponse::add_members() {
  // @@protoc_insertion_point(field_add:etcdserverpb.MemberListResponse.members)
  return _internal_add_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Member >&
MemberListResponse::members() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.MemberListResponse.members)
  return members_;
}

// -------------------------------------------------------------------

// MemberPromoteRequest

// uint64 ID = 1;
inline void MemberPromoteRequest::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemberPromoteRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemberPromoteRequest::id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MemberPromoteRequest.ID)
  return _internal_id();
}
inline void MemberPromoteRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void MemberPromoteRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.MemberPromoteRequest.ID)
}

// -------------------------------------------------------------------

// MemberPromoteResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool MemberPromoteResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool MemberPromoteResponse::has_header() const {
  return _internal_has_header();
}
inline void MemberPromoteResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& MemberPromoteResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& MemberPromoteResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MemberPromoteResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* MemberPromoteResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.MemberPromoteResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* MemberPromoteResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* MemberPromoteResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.MemberPromoteResponse.header)
  return _internal_mutable_header();
}
inline void MemberPromoteResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.MemberPromoteResponse.header)
}

// repeated .etcdserverpb.Member members = 2;
inline int MemberPromoteResponse::_internal_members_size() const {
  return members_.size();
}
inline int MemberPromoteResponse::members_size() const {
  return _internal_members_size();
}
inline void MemberPromoteResponse::clear_members() {
  members_.Clear();
}
inline ::etcdserverpb::Member* MemberPromoteResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.MemberPromoteResponse.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Member >*
MemberPromoteResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.MemberPromoteResponse.members)
  return &members_;
}
inline const ::etcdserverpb::Member& MemberPromoteResponse::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::etcdserverpb::Member& MemberPromoteResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MemberPromoteResponse.members)
  return _internal_members(index);
}
inline ::etcdserverpb::Member* MemberPromoteResponse::_internal_add_members() {
  return members_.Add();
}
inline ::etcdserverpb::Member* MemberPromoteResponse::add_members() {
  // @@protoc_insertion_point(field_add:etcdserverpb.MemberPromoteResponse.members)
  return _internal_add_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::Member >&
MemberPromoteResponse::members() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.MemberPromoteResponse.members)
  return members_;
}

// -------------------------------------------------------------------

// DefragmentRequest

// -------------------------------------------------------------------

// DefragmentResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool DefragmentResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool DefragmentResponse::has_header() const {
  return _internal_has_header();
}
inline void DefragmentResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& DefragmentResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& DefragmentResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.DefragmentResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* DefragmentResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.DefragmentResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* DefragmentResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* DefragmentResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.DefragmentResponse.header)
  return _internal_mutable_header();
}
inline void DefragmentResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.DefragmentResponse.header)
}

// -------------------------------------------------------------------

// MoveLeaderRequest

// uint64 targetID = 1;
inline void MoveLeaderRequest::clear_targetid() {
  targetid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MoveLeaderRequest::_internal_targetid() const {
  return targetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MoveLeaderRequest::targetid() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MoveLeaderRequest.targetID)
  return _internal_targetid();
}
inline void MoveLeaderRequest::_internal_set_targetid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  targetid_ = value;
}
inline void MoveLeaderRequest::set_targetid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.MoveLeaderRequest.targetID)
}

// -------------------------------------------------------------------

// MoveLeaderResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool MoveLeaderResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool MoveLeaderResponse::has_header() const {
  return _internal_has_header();
}
inline void MoveLeaderResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& MoveLeaderResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& MoveLeaderResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.MoveLeaderResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* MoveLeaderResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.MoveLeaderResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* MoveLeaderResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* MoveLeaderResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.MoveLeaderResponse.header)
  return _internal_mutable_header();
}
inline void MoveLeaderResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.MoveLeaderResponse.header)
}

// -------------------------------------------------------------------

// AlarmRequest

// .etcdserverpb.AlarmRequest.AlarmAction action = 1;
inline void AlarmRequest::clear_action() {
  action_ = 0;
}
inline ::etcdserverpb::AlarmRequest_AlarmAction AlarmRequest::_internal_action() const {
  return static_cast< ::etcdserverpb::AlarmRequest_AlarmAction >(action_);
}
inline ::etcdserverpb::AlarmRequest_AlarmAction AlarmRequest::action() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AlarmRequest.action)
  return _internal_action();
}
inline void AlarmRequest::_internal_set_action(::etcdserverpb::AlarmRequest_AlarmAction value) {
  
  action_ = value;
}
inline void AlarmRequest::set_action(::etcdserverpb::AlarmRequest_AlarmAction value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AlarmRequest.action)
}

// uint64 memberID = 2;
inline void AlarmRequest::clear_memberid() {
  memberid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AlarmRequest::_internal_memberid() const {
  return memberid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AlarmRequest::memberid() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AlarmRequest.memberID)
  return _internal_memberid();
}
inline void AlarmRequest::_internal_set_memberid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  memberid_ = value;
}
inline void AlarmRequest::set_memberid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_memberid(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AlarmRequest.memberID)
}

// .etcdserverpb.AlarmType alarm = 3;
inline void AlarmRequest::clear_alarm() {
  alarm_ = 0;
}
inline ::etcdserverpb::AlarmType AlarmRequest::_internal_alarm() const {
  return static_cast< ::etcdserverpb::AlarmType >(alarm_);
}
inline ::etcdserverpb::AlarmType AlarmRequest::alarm() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AlarmRequest.alarm)
  return _internal_alarm();
}
inline void AlarmRequest::_internal_set_alarm(::etcdserverpb::AlarmType value) {
  
  alarm_ = value;
}
inline void AlarmRequest::set_alarm(::etcdserverpb::AlarmType value) {
  _internal_set_alarm(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AlarmRequest.alarm)
}

// -------------------------------------------------------------------

// AlarmMember

// uint64 memberID = 1;
inline void AlarmMember::clear_memberid() {
  memberid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AlarmMember::_internal_memberid() const {
  return memberid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AlarmMember::memberid() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AlarmMember.memberID)
  return _internal_memberid();
}
inline void AlarmMember::_internal_set_memberid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  memberid_ = value;
}
inline void AlarmMember::set_memberid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_memberid(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AlarmMember.memberID)
}

// .etcdserverpb.AlarmType alarm = 2;
inline void AlarmMember::clear_alarm() {
  alarm_ = 0;
}
inline ::etcdserverpb::AlarmType AlarmMember::_internal_alarm() const {
  return static_cast< ::etcdserverpb::AlarmType >(alarm_);
}
inline ::etcdserverpb::AlarmType AlarmMember::alarm() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AlarmMember.alarm)
  return _internal_alarm();
}
inline void AlarmMember::_internal_set_alarm(::etcdserverpb::AlarmType value) {
  
  alarm_ = value;
}
inline void AlarmMember::set_alarm(::etcdserverpb::AlarmType value) {
  _internal_set_alarm(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AlarmMember.alarm)
}

// -------------------------------------------------------------------

// AlarmResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool AlarmResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool AlarmResponse::has_header() const {
  return _internal_has_header();
}
inline void AlarmResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& AlarmResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& AlarmResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AlarmResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* AlarmResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AlarmResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* AlarmResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* AlarmResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AlarmResponse.header)
  return _internal_mutable_header();
}
inline void AlarmResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AlarmResponse.header)
}

// repeated .etcdserverpb.AlarmMember alarms = 2;
inline int AlarmResponse::_internal_alarms_size() const {
  return alarms_.size();
}
inline int AlarmResponse::alarms_size() const {
  return _internal_alarms_size();
}
inline void AlarmResponse::clear_alarms() {
  alarms_.Clear();
}
inline ::etcdserverpb::AlarmMember* AlarmResponse::mutable_alarms(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AlarmResponse.alarms)
  return alarms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::AlarmMember >*
AlarmResponse::mutable_alarms() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.AlarmResponse.alarms)
  return &alarms_;
}
inline const ::etcdserverpb::AlarmMember& AlarmResponse::_internal_alarms(int index) const {
  return alarms_.Get(index);
}
inline const ::etcdserverpb::AlarmMember& AlarmResponse::alarms(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AlarmResponse.alarms)
  return _internal_alarms(index);
}
inline ::etcdserverpb::AlarmMember* AlarmResponse::_internal_add_alarms() {
  return alarms_.Add();
}
inline ::etcdserverpb::AlarmMember* AlarmResponse::add_alarms() {
  // @@protoc_insertion_point(field_add:etcdserverpb.AlarmResponse.alarms)
  return _internal_add_alarms();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::etcdserverpb::AlarmMember >&
AlarmResponse::alarms() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.AlarmResponse.alarms)
  return alarms_;
}

// -------------------------------------------------------------------

// StatusRequest

// -------------------------------------------------------------------

// StatusResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool StatusResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool StatusResponse::has_header() const {
  return _internal_has_header();
}
inline void StatusResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& StatusResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& StatusResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.StatusResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* StatusResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.StatusResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* StatusResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* StatusResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.StatusResponse.header)
  return _internal_mutable_header();
}
inline void StatusResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.StatusResponse.header)
}

// string version = 2;
inline void StatusResponse::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StatusResponse::version() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.StatusResponse.version)
  return _internal_version();
}
inline void StatusResponse::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.StatusResponse.version)
}
inline std::string* StatusResponse::mutable_version() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.StatusResponse.version)
  return _internal_mutable_version();
}
inline const std::string& StatusResponse::_internal_version() const {
  return version_.GetNoArena();
}
inline void StatusResponse::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StatusResponse::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.StatusResponse.version)
}
inline void StatusResponse::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.StatusResponse.version)
}
inline void StatusResponse::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.StatusResponse.version)
}
inline std::string* StatusResponse::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StatusResponse::release_version() {
  // @@protoc_insertion_point(field_release:etcdserverpb.StatusResponse.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StatusResponse::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.StatusResponse.version)
}

// int64 dbSize = 3;
inline void StatusResponse::clear_dbsize() {
  dbsize_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatusResponse::_internal_dbsize() const {
  return dbsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatusResponse::dbsize() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.StatusResponse.dbSize)
  return _internal_dbsize();
}
inline void StatusResponse::_internal_set_dbsize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  dbsize_ = value;
}
inline void StatusResponse::set_dbsize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_dbsize(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.StatusResponse.dbSize)
}

// uint64 leader = 4;
inline void StatusResponse::clear_leader() {
  leader_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatusResponse::_internal_leader() const {
  return leader_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatusResponse::leader() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.StatusResponse.leader)
  return _internal_leader();
}
inline void StatusResponse::_internal_set_leader(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  leader_ = value;
}
inline void StatusResponse::set_leader(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_leader(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.StatusResponse.leader)
}

// uint64 raftIndex = 5;
inline void StatusResponse::clear_raftindex() {
  raftindex_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatusResponse::_internal_raftindex() const {
  return raftindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatusResponse::raftindex() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.StatusResponse.raftIndex)
  return _internal_raftindex();
}
inline void StatusResponse::_internal_set_raftindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  raftindex_ = value;
}
inline void StatusResponse::set_raftindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_raftindex(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.StatusResponse.raftIndex)
}

// uint64 raftTerm = 6;
inline void StatusResponse::clear_raftterm() {
  raftterm_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatusResponse::_internal_raftterm() const {
  return raftterm_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatusResponse::raftterm() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.StatusResponse.raftTerm)
  return _internal_raftterm();
}
inline void StatusResponse::_internal_set_raftterm(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  raftterm_ = value;
}
inline void StatusResponse::set_raftterm(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_raftterm(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.StatusResponse.raftTerm)
}

// uint64 raftAppliedIndex = 7;
inline void StatusResponse::clear_raftappliedindex() {
  raftappliedindex_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatusResponse::_internal_raftappliedindex() const {
  return raftappliedindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatusResponse::raftappliedindex() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.StatusResponse.raftAppliedIndex)
  return _internal_raftappliedindex();
}
inline void StatusResponse::_internal_set_raftappliedindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  raftappliedindex_ = value;
}
inline void StatusResponse::set_raftappliedindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_raftappliedindex(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.StatusResponse.raftAppliedIndex)
}

// repeated string errors = 8;
inline int StatusResponse::_internal_errors_size() const {
  return errors_.size();
}
inline int StatusResponse::errors_size() const {
  return _internal_errors_size();
}
inline void StatusResponse::clear_errors() {
  errors_.Clear();
}
inline std::string* StatusResponse::add_errors() {
  // @@protoc_insertion_point(field_add_mutable:etcdserverpb.StatusResponse.errors)
  return _internal_add_errors();
}
inline const std::string& StatusResponse::_internal_errors(int index) const {
  return errors_.Get(index);
}
inline const std::string& StatusResponse::errors(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.StatusResponse.errors)
  return _internal_errors(index);
}
inline std::string* StatusResponse::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.StatusResponse.errors)
  return errors_.Mutable(index);
}
inline void StatusResponse::set_errors(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.StatusResponse.errors)
  errors_.Mutable(index)->assign(value);
}
inline void StatusResponse::set_errors(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.StatusResponse.errors)
  errors_.Mutable(index)->assign(std::move(value));
}
inline void StatusResponse::set_errors(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  errors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:etcdserverpb.StatusResponse.errors)
}
inline void StatusResponse::set_errors(int index, const char* value, size_t size) {
  errors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.StatusResponse.errors)
}
inline std::string* StatusResponse::_internal_add_errors() {
  return errors_.Add();
}
inline void StatusResponse::add_errors(const std::string& value) {
  errors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:etcdserverpb.StatusResponse.errors)
}
inline void StatusResponse::add_errors(std::string&& value) {
  errors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:etcdserverpb.StatusResponse.errors)
}
inline void StatusResponse::add_errors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  errors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:etcdserverpb.StatusResponse.errors)
}
inline void StatusResponse::add_errors(const char* value, size_t size) {
  errors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:etcdserverpb.StatusResponse.errors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StatusResponse::errors() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.StatusResponse.errors)
  return errors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StatusResponse::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.StatusResponse.errors)
  return &errors_;
}

// int64 dbSizeInUse = 9;
inline void StatusResponse::clear_dbsizeinuse() {
  dbsizeinuse_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatusResponse::_internal_dbsizeinuse() const {
  return dbsizeinuse_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatusResponse::dbsizeinuse() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.StatusResponse.dbSizeInUse)
  return _internal_dbsizeinuse();
}
inline void StatusResponse::_internal_set_dbsizeinuse(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  dbsizeinuse_ = value;
}
inline void StatusResponse::set_dbsizeinuse(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_dbsizeinuse(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.StatusResponse.dbSizeInUse)
}

// bool isLearner = 10;
inline void StatusResponse::clear_islearner() {
  islearner_ = false;
}
inline bool StatusResponse::_internal_islearner() const {
  return islearner_;
}
inline bool StatusResponse::islearner() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.StatusResponse.isLearner)
  return _internal_islearner();
}
inline void StatusResponse::_internal_set_islearner(bool value) {
  
  islearner_ = value;
}
inline void StatusResponse::set_islearner(bool value) {
  _internal_set_islearner(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.StatusResponse.isLearner)
}

// -------------------------------------------------------------------

// AuthEnableRequest

// -------------------------------------------------------------------

// AuthDisableRequest

// -------------------------------------------------------------------

// AuthenticateRequest

// string name = 1;
inline void AuthenticateRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AuthenticateRequest::name() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthenticateRequest.name)
  return _internal_name();
}
inline void AuthenticateRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthenticateRequest.name)
}
inline std::string* AuthenticateRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthenticateRequest.name)
  return _internal_mutable_name();
}
inline const std::string& AuthenticateRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void AuthenticateRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthenticateRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthenticateRequest.name)
}
inline void AuthenticateRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthenticateRequest.name)
}
inline void AuthenticateRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthenticateRequest.name)
}
inline std::string* AuthenticateRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthenticateRequest::release_name() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthenticateRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthenticateRequest.name)
}

// string password = 2;
inline void AuthenticateRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AuthenticateRequest::password() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthenticateRequest.password)
  return _internal_password();
}
inline void AuthenticateRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthenticateRequest.password)
}
inline std::string* AuthenticateRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthenticateRequest.password)
  return _internal_mutable_password();
}
inline const std::string& AuthenticateRequest::_internal_password() const {
  return password_.GetNoArena();
}
inline void AuthenticateRequest::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthenticateRequest::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthenticateRequest.password)
}
inline void AuthenticateRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthenticateRequest.password)
}
inline void AuthenticateRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthenticateRequest.password)
}
inline std::string* AuthenticateRequest::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthenticateRequest::release_password() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthenticateRequest.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthenticateRequest.password)
}

// -------------------------------------------------------------------

// AuthUserAddRequest

// string name = 1;
inline void AuthUserAddRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AuthUserAddRequest::name() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserAddRequest.name)
  return _internal_name();
}
inline void AuthUserAddRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthUserAddRequest.name)
}
inline std::string* AuthUserAddRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserAddRequest.name)
  return _internal_mutable_name();
}
inline const std::string& AuthUserAddRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void AuthUserAddRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthUserAddRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthUserAddRequest.name)
}
inline void AuthUserAddRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthUserAddRequest.name)
}
inline void AuthUserAddRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthUserAddRequest.name)
}
inline std::string* AuthUserAddRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthUserAddRequest::release_name() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserAddRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthUserAddRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserAddRequest.name)
}

// string password = 2;
inline void AuthUserAddRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AuthUserAddRequest::password() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserAddRequest.password)
  return _internal_password();
}
inline void AuthUserAddRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthUserAddRequest.password)
}
inline std::string* AuthUserAddRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserAddRequest.password)
  return _internal_mutable_password();
}
inline const std::string& AuthUserAddRequest::_internal_password() const {
  return password_.GetNoArena();
}
inline void AuthUserAddRequest::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthUserAddRequest::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthUserAddRequest.password)
}
inline void AuthUserAddRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthUserAddRequest.password)
}
inline void AuthUserAddRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthUserAddRequest.password)
}
inline std::string* AuthUserAddRequest::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthUserAddRequest::release_password() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserAddRequest.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthUserAddRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserAddRequest.password)
}

// .authpb.UserAddOptions options = 3;
inline bool AuthUserAddRequest::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool AuthUserAddRequest::has_options() const {
  return _internal_has_options();
}
inline const ::authpb::UserAddOptions& AuthUserAddRequest::_internal_options() const {
  const ::authpb::UserAddOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::authpb::UserAddOptions*>(
      &::authpb::_UserAddOptions_default_instance_);
}
inline const ::authpb::UserAddOptions& AuthUserAddRequest::options() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserAddRequest.options)
  return _internal_options();
}
inline ::authpb::UserAddOptions* AuthUserAddRequest::release_options() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserAddRequest.options)
  
  ::authpb::UserAddOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::authpb::UserAddOptions* AuthUserAddRequest::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::authpb::UserAddOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::authpb::UserAddOptions* AuthUserAddRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserAddRequest.options)
  return _internal_mutable_options();
}
inline void AuthUserAddRequest::set_allocated_options(::authpb::UserAddOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserAddRequest.options)
}

// -------------------------------------------------------------------

// AuthUserGetRequest

// string name = 1;
inline void AuthUserGetRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AuthUserGetRequest::name() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserGetRequest.name)
  return _internal_name();
}
inline void AuthUserGetRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthUserGetRequest.name)
}
inline std::string* AuthUserGetRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserGetRequest.name)
  return _internal_mutable_name();
}
inline const std::string& AuthUserGetRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void AuthUserGetRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthUserGetRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthUserGetRequest.name)
}
inline void AuthUserGetRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthUserGetRequest.name)
}
inline void AuthUserGetRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthUserGetRequest.name)
}
inline std::string* AuthUserGetRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthUserGetRequest::release_name() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserGetRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthUserGetRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserGetRequest.name)
}

// -------------------------------------------------------------------

// AuthUserDeleteRequest

// string name = 1;
inline void AuthUserDeleteRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AuthUserDeleteRequest::name() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserDeleteRequest.name)
  return _internal_name();
}
inline void AuthUserDeleteRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthUserDeleteRequest.name)
}
inline std::string* AuthUserDeleteRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserDeleteRequest.name)
  return _internal_mutable_name();
}
inline const std::string& AuthUserDeleteRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void AuthUserDeleteRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthUserDeleteRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthUserDeleteRequest.name)
}
inline void AuthUserDeleteRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthUserDeleteRequest.name)
}
inline void AuthUserDeleteRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthUserDeleteRequest.name)
}
inline std::string* AuthUserDeleteRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthUserDeleteRequest::release_name() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserDeleteRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthUserDeleteRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserDeleteRequest.name)
}

// -------------------------------------------------------------------

// AuthUserChangePasswordRequest

// string name = 1;
inline void AuthUserChangePasswordRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AuthUserChangePasswordRequest::name() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserChangePasswordRequest.name)
  return _internal_name();
}
inline void AuthUserChangePasswordRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthUserChangePasswordRequest.name)
}
inline std::string* AuthUserChangePasswordRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserChangePasswordRequest.name)
  return _internal_mutable_name();
}
inline const std::string& AuthUserChangePasswordRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void AuthUserChangePasswordRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthUserChangePasswordRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthUserChangePasswordRequest.name)
}
inline void AuthUserChangePasswordRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthUserChangePasswordRequest.name)
}
inline void AuthUserChangePasswordRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthUserChangePasswordRequest.name)
}
inline std::string* AuthUserChangePasswordRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthUserChangePasswordRequest::release_name() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserChangePasswordRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthUserChangePasswordRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserChangePasswordRequest.name)
}

// string password = 2;
inline void AuthUserChangePasswordRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AuthUserChangePasswordRequest::password() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserChangePasswordRequest.password)
  return _internal_password();
}
inline void AuthUserChangePasswordRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthUserChangePasswordRequest.password)
}
inline std::string* AuthUserChangePasswordRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserChangePasswordRequest.password)
  return _internal_mutable_password();
}
inline const std::string& AuthUserChangePasswordRequest::_internal_password() const {
  return password_.GetNoArena();
}
inline void AuthUserChangePasswordRequest::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthUserChangePasswordRequest::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthUserChangePasswordRequest.password)
}
inline void AuthUserChangePasswordRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthUserChangePasswordRequest.password)
}
inline void AuthUserChangePasswordRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthUserChangePasswordRequest.password)
}
inline std::string* AuthUserChangePasswordRequest::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthUserChangePasswordRequest::release_password() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserChangePasswordRequest.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthUserChangePasswordRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserChangePasswordRequest.password)
}

// -------------------------------------------------------------------

// AuthUserGrantRoleRequest

// string user = 1;
inline void AuthUserGrantRoleRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AuthUserGrantRoleRequest::user() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserGrantRoleRequest.user)
  return _internal_user();
}
inline void AuthUserGrantRoleRequest::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthUserGrantRoleRequest.user)
}
inline std::string* AuthUserGrantRoleRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserGrantRoleRequest.user)
  return _internal_mutable_user();
}
inline const std::string& AuthUserGrantRoleRequest::_internal_user() const {
  return user_.GetNoArena();
}
inline void AuthUserGrantRoleRequest::_internal_set_user(const std::string& value) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthUserGrantRoleRequest::set_user(std::string&& value) {
  
  user_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthUserGrantRoleRequest.user)
}
inline void AuthUserGrantRoleRequest::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthUserGrantRoleRequest.user)
}
inline void AuthUserGrantRoleRequest::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthUserGrantRoleRequest.user)
}
inline std::string* AuthUserGrantRoleRequest::_internal_mutable_user() {
  
  return user_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthUserGrantRoleRequest::release_user() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserGrantRoleRequest.user)
  
  return user_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthUserGrantRoleRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserGrantRoleRequest.user)
}

// string role = 2;
inline void AuthUserGrantRoleRequest::clear_role() {
  role_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AuthUserGrantRoleRequest::role() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserGrantRoleRequest.role)
  return _internal_role();
}
inline void AuthUserGrantRoleRequest::set_role(const std::string& value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthUserGrantRoleRequest.role)
}
inline std::string* AuthUserGrantRoleRequest::mutable_role() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserGrantRoleRequest.role)
  return _internal_mutable_role();
}
inline const std::string& AuthUserGrantRoleRequest::_internal_role() const {
  return role_.GetNoArena();
}
inline void AuthUserGrantRoleRequest::_internal_set_role(const std::string& value) {
  
  role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthUserGrantRoleRequest::set_role(std::string&& value) {
  
  role_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthUserGrantRoleRequest.role)
}
inline void AuthUserGrantRoleRequest::set_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthUserGrantRoleRequest.role)
}
inline void AuthUserGrantRoleRequest::set_role(const char* value, size_t size) {
  
  role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthUserGrantRoleRequest.role)
}
inline std::string* AuthUserGrantRoleRequest::_internal_mutable_role() {
  
  return role_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthUserGrantRoleRequest::release_role() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserGrantRoleRequest.role)
  
  return role_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthUserGrantRoleRequest::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  role_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserGrantRoleRequest.role)
}

// -------------------------------------------------------------------

// AuthUserRevokeRoleRequest

// string name = 1;
inline void AuthUserRevokeRoleRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AuthUserRevokeRoleRequest::name() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserRevokeRoleRequest.name)
  return _internal_name();
}
inline void AuthUserRevokeRoleRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthUserRevokeRoleRequest.name)
}
inline std::string* AuthUserRevokeRoleRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserRevokeRoleRequest.name)
  return _internal_mutable_name();
}
inline const std::string& AuthUserRevokeRoleRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void AuthUserRevokeRoleRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthUserRevokeRoleRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthUserRevokeRoleRequest.name)
}
inline void AuthUserRevokeRoleRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthUserRevokeRoleRequest.name)
}
inline void AuthUserRevokeRoleRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthUserRevokeRoleRequest.name)
}
inline std::string* AuthUserRevokeRoleRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthUserRevokeRoleRequest::release_name() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserRevokeRoleRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthUserRevokeRoleRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserRevokeRoleRequest.name)
}

// string role = 2;
inline void AuthUserRevokeRoleRequest::clear_role() {
  role_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AuthUserRevokeRoleRequest::role() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserRevokeRoleRequest.role)
  return _internal_role();
}
inline void AuthUserRevokeRoleRequest::set_role(const std::string& value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthUserRevokeRoleRequest.role)
}
inline std::string* AuthUserRevokeRoleRequest::mutable_role() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserRevokeRoleRequest.role)
  return _internal_mutable_role();
}
inline const std::string& AuthUserRevokeRoleRequest::_internal_role() const {
  return role_.GetNoArena();
}
inline void AuthUserRevokeRoleRequest::_internal_set_role(const std::string& value) {
  
  role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthUserRevokeRoleRequest::set_role(std::string&& value) {
  
  role_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthUserRevokeRoleRequest.role)
}
inline void AuthUserRevokeRoleRequest::set_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthUserRevokeRoleRequest.role)
}
inline void AuthUserRevokeRoleRequest::set_role(const char* value, size_t size) {
  
  role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthUserRevokeRoleRequest.role)
}
inline std::string* AuthUserRevokeRoleRequest::_internal_mutable_role() {
  
  return role_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthUserRevokeRoleRequest::release_role() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserRevokeRoleRequest.role)
  
  return role_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthUserRevokeRoleRequest::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  role_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserRevokeRoleRequest.role)
}

// -------------------------------------------------------------------

// AuthRoleAddRequest

// string name = 1;
inline void AuthRoleAddRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AuthRoleAddRequest::name() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleAddRequest.name)
  return _internal_name();
}
inline void AuthRoleAddRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthRoleAddRequest.name)
}
inline std::string* AuthRoleAddRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleAddRequest.name)
  return _internal_mutable_name();
}
inline const std::string& AuthRoleAddRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void AuthRoleAddRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthRoleAddRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthRoleAddRequest.name)
}
inline void AuthRoleAddRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthRoleAddRequest.name)
}
inline void AuthRoleAddRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthRoleAddRequest.name)
}
inline std::string* AuthRoleAddRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthRoleAddRequest::release_name() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleAddRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRoleAddRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleAddRequest.name)
}

// -------------------------------------------------------------------

// AuthRoleGetRequest

// string role = 1;
inline void AuthRoleGetRequest::clear_role() {
  role_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AuthRoleGetRequest::role() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleGetRequest.role)
  return _internal_role();
}
inline void AuthRoleGetRequest::set_role(const std::string& value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthRoleGetRequest.role)
}
inline std::string* AuthRoleGetRequest::mutable_role() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleGetRequest.role)
  return _internal_mutable_role();
}
inline const std::string& AuthRoleGetRequest::_internal_role() const {
  return role_.GetNoArena();
}
inline void AuthRoleGetRequest::_internal_set_role(const std::string& value) {
  
  role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthRoleGetRequest::set_role(std::string&& value) {
  
  role_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthRoleGetRequest.role)
}
inline void AuthRoleGetRequest::set_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthRoleGetRequest.role)
}
inline void AuthRoleGetRequest::set_role(const char* value, size_t size) {
  
  role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthRoleGetRequest.role)
}
inline std::string* AuthRoleGetRequest::_internal_mutable_role() {
  
  return role_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthRoleGetRequest::release_role() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleGetRequest.role)
  
  return role_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRoleGetRequest::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  role_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleGetRequest.role)
}

// -------------------------------------------------------------------

// AuthUserListRequest

// -------------------------------------------------------------------

// AuthRoleListRequest

// -------------------------------------------------------------------

// AuthRoleDeleteRequest

// string role = 1;
inline void AuthRoleDeleteRequest::clear_role() {
  role_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AuthRoleDeleteRequest::role() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleDeleteRequest.role)
  return _internal_role();
}
inline void AuthRoleDeleteRequest::set_role(const std::string& value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthRoleDeleteRequest.role)
}
inline std::string* AuthRoleDeleteRequest::mutable_role() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleDeleteRequest.role)
  return _internal_mutable_role();
}
inline const std::string& AuthRoleDeleteRequest::_internal_role() const {
  return role_.GetNoArena();
}
inline void AuthRoleDeleteRequest::_internal_set_role(const std::string& value) {
  
  role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthRoleDeleteRequest::set_role(std::string&& value) {
  
  role_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthRoleDeleteRequest.role)
}
inline void AuthRoleDeleteRequest::set_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthRoleDeleteRequest.role)
}
inline void AuthRoleDeleteRequest::set_role(const char* value, size_t size) {
  
  role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthRoleDeleteRequest.role)
}
inline std::string* AuthRoleDeleteRequest::_internal_mutable_role() {
  
  return role_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthRoleDeleteRequest::release_role() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleDeleteRequest.role)
  
  return role_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRoleDeleteRequest::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  role_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleDeleteRequest.role)
}

// -------------------------------------------------------------------

// AuthRoleGrantPermissionRequest

// string name = 1;
inline void AuthRoleGrantPermissionRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AuthRoleGrantPermissionRequest::name() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleGrantPermissionRequest.name)
  return _internal_name();
}
inline void AuthRoleGrantPermissionRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthRoleGrantPermissionRequest.name)
}
inline std::string* AuthRoleGrantPermissionRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleGrantPermissionRequest.name)
  return _internal_mutable_name();
}
inline const std::string& AuthRoleGrantPermissionRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void AuthRoleGrantPermissionRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthRoleGrantPermissionRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthRoleGrantPermissionRequest.name)
}
inline void AuthRoleGrantPermissionRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthRoleGrantPermissionRequest.name)
}
inline void AuthRoleGrantPermissionRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthRoleGrantPermissionRequest.name)
}
inline std::string* AuthRoleGrantPermissionRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthRoleGrantPermissionRequest::release_name() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleGrantPermissionRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRoleGrantPermissionRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleGrantPermissionRequest.name)
}

// .authpb.Permission perm = 2;
inline bool AuthRoleGrantPermissionRequest::_internal_has_perm() const {
  return this != internal_default_instance() && perm_ != nullptr;
}
inline bool AuthRoleGrantPermissionRequest::has_perm() const {
  return _internal_has_perm();
}
inline const ::authpb::Permission& AuthRoleGrantPermissionRequest::_internal_perm() const {
  const ::authpb::Permission* p = perm_;
  return p != nullptr ? *p : *reinterpret_cast<const ::authpb::Permission*>(
      &::authpb::_Permission_default_instance_);
}
inline const ::authpb::Permission& AuthRoleGrantPermissionRequest::perm() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleGrantPermissionRequest.perm)
  return _internal_perm();
}
inline ::authpb::Permission* AuthRoleGrantPermissionRequest::release_perm() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleGrantPermissionRequest.perm)
  
  ::authpb::Permission* temp = perm_;
  perm_ = nullptr;
  return temp;
}
inline ::authpb::Permission* AuthRoleGrantPermissionRequest::_internal_mutable_perm() {
  
  if (perm_ == nullptr) {
    auto* p = CreateMaybeMessage<::authpb::Permission>(GetArenaNoVirtual());
    perm_ = p;
  }
  return perm_;
}
inline ::authpb::Permission* AuthRoleGrantPermissionRequest::mutable_perm() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleGrantPermissionRequest.perm)
  return _internal_mutable_perm();
}
inline void AuthRoleGrantPermissionRequest::set_allocated_perm(::authpb::Permission* perm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(perm_);
  }
  if (perm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      perm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perm, submessage_arena);
    }
    
  } else {
    
  }
  perm_ = perm;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleGrantPermissionRequest.perm)
}

// -------------------------------------------------------------------

// AuthRoleRevokePermissionRequest

// string role = 1;
inline void AuthRoleRevokePermissionRequest::clear_role() {
  role_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AuthRoleRevokePermissionRequest::role() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleRevokePermissionRequest.role)
  return _internal_role();
}
inline void AuthRoleRevokePermissionRequest::set_role(const std::string& value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthRoleRevokePermissionRequest.role)
}
inline std::string* AuthRoleRevokePermissionRequest::mutable_role() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleRevokePermissionRequest.role)
  return _internal_mutable_role();
}
inline const std::string& AuthRoleRevokePermissionRequest::_internal_role() const {
  return role_.GetNoArena();
}
inline void AuthRoleRevokePermissionRequest::_internal_set_role(const std::string& value) {
  
  role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthRoleRevokePermissionRequest::set_role(std::string&& value) {
  
  role_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthRoleRevokePermissionRequest.role)
}
inline void AuthRoleRevokePermissionRequest::set_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthRoleRevokePermissionRequest.role)
}
inline void AuthRoleRevokePermissionRequest::set_role(const char* value, size_t size) {
  
  role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthRoleRevokePermissionRequest.role)
}
inline std::string* AuthRoleRevokePermissionRequest::_internal_mutable_role() {
  
  return role_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthRoleRevokePermissionRequest::release_role() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleRevokePermissionRequest.role)
  
  return role_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRoleRevokePermissionRequest::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  role_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleRevokePermissionRequest.role)
}

// bytes key = 2;
inline void AuthRoleRevokePermissionRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AuthRoleRevokePermissionRequest::key() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleRevokePermissionRequest.key)
  return _internal_key();
}
inline void AuthRoleRevokePermissionRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthRoleRevokePermissionRequest.key)
}
inline std::string* AuthRoleRevokePermissionRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleRevokePermissionRequest.key)
  return _internal_mutable_key();
}
inline const std::string& AuthRoleRevokePermissionRequest::_internal_key() const {
  return key_.GetNoArena();
}
inline void AuthRoleRevokePermissionRequest::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthRoleRevokePermissionRequest::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthRoleRevokePermissionRequest.key)
}
inline void AuthRoleRevokePermissionRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthRoleRevokePermissionRequest.key)
}
inline void AuthRoleRevokePermissionRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthRoleRevokePermissionRequest.key)
}
inline std::string* AuthRoleRevokePermissionRequest::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthRoleRevokePermissionRequest::release_key() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleRevokePermissionRequest.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRoleRevokePermissionRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleRevokePermissionRequest.key)
}

// bytes range_end = 3;
inline void AuthRoleRevokePermissionRequest::clear_range_end() {
  range_end_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AuthRoleRevokePermissionRequest::range_end() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleRevokePermissionRequest.range_end)
  return _internal_range_end();
}
inline void AuthRoleRevokePermissionRequest::set_range_end(const std::string& value) {
  _internal_set_range_end(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthRoleRevokePermissionRequest.range_end)
}
inline std::string* AuthRoleRevokePermissionRequest::mutable_range_end() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleRevokePermissionRequest.range_end)
  return _internal_mutable_range_end();
}
inline const std::string& AuthRoleRevokePermissionRequest::_internal_range_end() const {
  return range_end_.GetNoArena();
}
inline void AuthRoleRevokePermissionRequest::_internal_set_range_end(const std::string& value) {
  
  range_end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthRoleRevokePermissionRequest::set_range_end(std::string&& value) {
  
  range_end_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthRoleRevokePermissionRequest.range_end)
}
inline void AuthRoleRevokePermissionRequest::set_range_end(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  range_end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthRoleRevokePermissionRequest.range_end)
}
inline void AuthRoleRevokePermissionRequest::set_range_end(const void* value, size_t size) {
  
  range_end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthRoleRevokePermissionRequest.range_end)
}
inline std::string* AuthRoleRevokePermissionRequest::_internal_mutable_range_end() {
  
  return range_end_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthRoleRevokePermissionRequest::release_range_end() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleRevokePermissionRequest.range_end)
  
  return range_end_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthRoleRevokePermissionRequest::set_allocated_range_end(std::string* range_end) {
  if (range_end != nullptr) {
    
  } else {
    
  }
  range_end_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), range_end);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleRevokePermissionRequest.range_end)
}

// -------------------------------------------------------------------

// AuthEnableResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool AuthEnableResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool AuthEnableResponse::has_header() const {
  return _internal_has_header();
}
inline void AuthEnableResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& AuthEnableResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& AuthEnableResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthEnableResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* AuthEnableResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthEnableResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* AuthEnableResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* AuthEnableResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthEnableResponse.header)
  return _internal_mutable_header();
}
inline void AuthEnableResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthEnableResponse.header)
}

// -------------------------------------------------------------------

// AuthDisableResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool AuthDisableResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool AuthDisableResponse::has_header() const {
  return _internal_has_header();
}
inline void AuthDisableResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& AuthDisableResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& AuthDisableResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthDisableResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* AuthDisableResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthDisableResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* AuthDisableResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* AuthDisableResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthDisableResponse.header)
  return _internal_mutable_header();
}
inline void AuthDisableResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthDisableResponse.header)
}

// -------------------------------------------------------------------

// AuthenticateResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool AuthenticateResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool AuthenticateResponse::has_header() const {
  return _internal_has_header();
}
inline void AuthenticateResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& AuthenticateResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& AuthenticateResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthenticateResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* AuthenticateResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthenticateResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* AuthenticateResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* AuthenticateResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthenticateResponse.header)
  return _internal_mutable_header();
}
inline void AuthenticateResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthenticateResponse.header)
}

// string token = 2;
inline void AuthenticateResponse::clear_token() {
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AuthenticateResponse::token() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthenticateResponse.token)
  return _internal_token();
}
inline void AuthenticateResponse::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthenticateResponse.token)
}
inline std::string* AuthenticateResponse::mutable_token() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthenticateResponse.token)
  return _internal_mutable_token();
}
inline const std::string& AuthenticateResponse::_internal_token() const {
  return token_.GetNoArena();
}
inline void AuthenticateResponse::_internal_set_token(const std::string& value) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthenticateResponse::set_token(std::string&& value) {
  
  token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.AuthenticateResponse.token)
}
inline void AuthenticateResponse::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthenticateResponse.token)
}
inline void AuthenticateResponse::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthenticateResponse.token)
}
inline std::string* AuthenticateResponse::_internal_mutable_token() {
  
  return token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthenticateResponse::release_token() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthenticateResponse.token)
  
  return token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthenticateResponse.token)
}

// -------------------------------------------------------------------

// AuthUserAddResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool AuthUserAddResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool AuthUserAddResponse::has_header() const {
  return _internal_has_header();
}
inline void AuthUserAddResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& AuthUserAddResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& AuthUserAddResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserAddResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* AuthUserAddResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserAddResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* AuthUserAddResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* AuthUserAddResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserAddResponse.header)
  return _internal_mutable_header();
}
inline void AuthUserAddResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserAddResponse.header)
}

// -------------------------------------------------------------------

// AuthUserGetResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool AuthUserGetResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool AuthUserGetResponse::has_header() const {
  return _internal_has_header();
}
inline void AuthUserGetResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& AuthUserGetResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& AuthUserGetResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserGetResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* AuthUserGetResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserGetResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* AuthUserGetResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* AuthUserGetResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserGetResponse.header)
  return _internal_mutable_header();
}
inline void AuthUserGetResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserGetResponse.header)
}

// repeated string roles = 2;
inline int AuthUserGetResponse::_internal_roles_size() const {
  return roles_.size();
}
inline int AuthUserGetResponse::roles_size() const {
  return _internal_roles_size();
}
inline void AuthUserGetResponse::clear_roles() {
  roles_.Clear();
}
inline std::string* AuthUserGetResponse::add_roles() {
  // @@protoc_insertion_point(field_add_mutable:etcdserverpb.AuthUserGetResponse.roles)
  return _internal_add_roles();
}
inline const std::string& AuthUserGetResponse::_internal_roles(int index) const {
  return roles_.Get(index);
}
inline const std::string& AuthUserGetResponse::roles(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserGetResponse.roles)
  return _internal_roles(index);
}
inline std::string* AuthUserGetResponse::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserGetResponse.roles)
  return roles_.Mutable(index);
}
inline void AuthUserGetResponse::set_roles(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthUserGetResponse.roles)
  roles_.Mutable(index)->assign(value);
}
inline void AuthUserGetResponse::set_roles(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthUserGetResponse.roles)
  roles_.Mutable(index)->assign(std::move(value));
}
inline void AuthUserGetResponse::set_roles(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  roles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthUserGetResponse.roles)
}
inline void AuthUserGetResponse::set_roles(int index, const char* value, size_t size) {
  roles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthUserGetResponse.roles)
}
inline std::string* AuthUserGetResponse::_internal_add_roles() {
  return roles_.Add();
}
inline void AuthUserGetResponse::add_roles(const std::string& value) {
  roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:etcdserverpb.AuthUserGetResponse.roles)
}
inline void AuthUserGetResponse::add_roles(std::string&& value) {
  roles_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:etcdserverpb.AuthUserGetResponse.roles)
}
inline void AuthUserGetResponse::add_roles(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:etcdserverpb.AuthUserGetResponse.roles)
}
inline void AuthUserGetResponse::add_roles(const char* value, size_t size) {
  roles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:etcdserverpb.AuthUserGetResponse.roles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AuthUserGetResponse::roles() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.AuthUserGetResponse.roles)
  return roles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AuthUserGetResponse::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.AuthUserGetResponse.roles)
  return &roles_;
}

// -------------------------------------------------------------------

// AuthUserDeleteResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool AuthUserDeleteResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool AuthUserDeleteResponse::has_header() const {
  return _internal_has_header();
}
inline void AuthUserDeleteResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& AuthUserDeleteResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& AuthUserDeleteResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserDeleteResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* AuthUserDeleteResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserDeleteResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* AuthUserDeleteResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* AuthUserDeleteResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserDeleteResponse.header)
  return _internal_mutable_header();
}
inline void AuthUserDeleteResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserDeleteResponse.header)
}

// -------------------------------------------------------------------

// AuthUserChangePasswordResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool AuthUserChangePasswordResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool AuthUserChangePasswordResponse::has_header() const {
  return _internal_has_header();
}
inline void AuthUserChangePasswordResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& AuthUserChangePasswordResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& AuthUserChangePasswordResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserChangePasswordResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* AuthUserChangePasswordResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserChangePasswordResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* AuthUserChangePasswordResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* AuthUserChangePasswordResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserChangePasswordResponse.header)
  return _internal_mutable_header();
}
inline void AuthUserChangePasswordResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserChangePasswordResponse.header)
}

// -------------------------------------------------------------------

// AuthUserGrantRoleResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool AuthUserGrantRoleResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool AuthUserGrantRoleResponse::has_header() const {
  return _internal_has_header();
}
inline void AuthUserGrantRoleResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& AuthUserGrantRoleResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& AuthUserGrantRoleResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserGrantRoleResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* AuthUserGrantRoleResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserGrantRoleResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* AuthUserGrantRoleResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* AuthUserGrantRoleResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserGrantRoleResponse.header)
  return _internal_mutable_header();
}
inline void AuthUserGrantRoleResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserGrantRoleResponse.header)
}

// -------------------------------------------------------------------

// AuthUserRevokeRoleResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool AuthUserRevokeRoleResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool AuthUserRevokeRoleResponse::has_header() const {
  return _internal_has_header();
}
inline void AuthUserRevokeRoleResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& AuthUserRevokeRoleResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& AuthUserRevokeRoleResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserRevokeRoleResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* AuthUserRevokeRoleResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserRevokeRoleResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* AuthUserRevokeRoleResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* AuthUserRevokeRoleResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserRevokeRoleResponse.header)
  return _internal_mutable_header();
}
inline void AuthUserRevokeRoleResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserRevokeRoleResponse.header)
}

// -------------------------------------------------------------------

// AuthRoleAddResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool AuthRoleAddResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool AuthRoleAddResponse::has_header() const {
  return _internal_has_header();
}
inline void AuthRoleAddResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& AuthRoleAddResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& AuthRoleAddResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleAddResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* AuthRoleAddResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleAddResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* AuthRoleAddResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* AuthRoleAddResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleAddResponse.header)
  return _internal_mutable_header();
}
inline void AuthRoleAddResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleAddResponse.header)
}

// -------------------------------------------------------------------

// AuthRoleGetResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool AuthRoleGetResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool AuthRoleGetResponse::has_header() const {
  return _internal_has_header();
}
inline void AuthRoleGetResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& AuthRoleGetResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& AuthRoleGetResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleGetResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* AuthRoleGetResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleGetResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* AuthRoleGetResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* AuthRoleGetResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleGetResponse.header)
  return _internal_mutable_header();
}
inline void AuthRoleGetResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleGetResponse.header)
}

// repeated .authpb.Permission perm = 2;
inline int AuthRoleGetResponse::_internal_perm_size() const {
  return perm_.size();
}
inline int AuthRoleGetResponse::perm_size() const {
  return _internal_perm_size();
}
inline ::authpb::Permission* AuthRoleGetResponse::mutable_perm(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleGetResponse.perm)
  return perm_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::authpb::Permission >*
AuthRoleGetResponse::mutable_perm() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.AuthRoleGetResponse.perm)
  return &perm_;
}
inline const ::authpb::Permission& AuthRoleGetResponse::_internal_perm(int index) const {
  return perm_.Get(index);
}
inline const ::authpb::Permission& AuthRoleGetResponse::perm(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleGetResponse.perm)
  return _internal_perm(index);
}
inline ::authpb::Permission* AuthRoleGetResponse::_internal_add_perm() {
  return perm_.Add();
}
inline ::authpb::Permission* AuthRoleGetResponse::add_perm() {
  // @@protoc_insertion_point(field_add:etcdserverpb.AuthRoleGetResponse.perm)
  return _internal_add_perm();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::authpb::Permission >&
AuthRoleGetResponse::perm() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.AuthRoleGetResponse.perm)
  return perm_;
}

// -------------------------------------------------------------------

// AuthRoleListResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool AuthRoleListResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool AuthRoleListResponse::has_header() const {
  return _internal_has_header();
}
inline void AuthRoleListResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& AuthRoleListResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& AuthRoleListResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleListResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* AuthRoleListResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleListResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* AuthRoleListResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* AuthRoleListResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleListResponse.header)
  return _internal_mutable_header();
}
inline void AuthRoleListResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleListResponse.header)
}

// repeated string roles = 2;
inline int AuthRoleListResponse::_internal_roles_size() const {
  return roles_.size();
}
inline int AuthRoleListResponse::roles_size() const {
  return _internal_roles_size();
}
inline void AuthRoleListResponse::clear_roles() {
  roles_.Clear();
}
inline std::string* AuthRoleListResponse::add_roles() {
  // @@protoc_insertion_point(field_add_mutable:etcdserverpb.AuthRoleListResponse.roles)
  return _internal_add_roles();
}
inline const std::string& AuthRoleListResponse::_internal_roles(int index) const {
  return roles_.Get(index);
}
inline const std::string& AuthRoleListResponse::roles(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleListResponse.roles)
  return _internal_roles(index);
}
inline std::string* AuthRoleListResponse::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleListResponse.roles)
  return roles_.Mutable(index);
}
inline void AuthRoleListResponse::set_roles(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthRoleListResponse.roles)
  roles_.Mutable(index)->assign(value);
}
inline void AuthRoleListResponse::set_roles(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthRoleListResponse.roles)
  roles_.Mutable(index)->assign(std::move(value));
}
inline void AuthRoleListResponse::set_roles(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  roles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthRoleListResponse.roles)
}
inline void AuthRoleListResponse::set_roles(int index, const char* value, size_t size) {
  roles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthRoleListResponse.roles)
}
inline std::string* AuthRoleListResponse::_internal_add_roles() {
  return roles_.Add();
}
inline void AuthRoleListResponse::add_roles(const std::string& value) {
  roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:etcdserverpb.AuthRoleListResponse.roles)
}
inline void AuthRoleListResponse::add_roles(std::string&& value) {
  roles_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:etcdserverpb.AuthRoleListResponse.roles)
}
inline void AuthRoleListResponse::add_roles(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:etcdserverpb.AuthRoleListResponse.roles)
}
inline void AuthRoleListResponse::add_roles(const char* value, size_t size) {
  roles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:etcdserverpb.AuthRoleListResponse.roles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AuthRoleListResponse::roles() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.AuthRoleListResponse.roles)
  return roles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AuthRoleListResponse::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.AuthRoleListResponse.roles)
  return &roles_;
}

// -------------------------------------------------------------------

// AuthUserListResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool AuthUserListResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool AuthUserListResponse::has_header() const {
  return _internal_has_header();
}
inline void AuthUserListResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& AuthUserListResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& AuthUserListResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserListResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* AuthUserListResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthUserListResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* AuthUserListResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* AuthUserListResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserListResponse.header)
  return _internal_mutable_header();
}
inline void AuthUserListResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthUserListResponse.header)
}

// repeated string users = 2;
inline int AuthUserListResponse::_internal_users_size() const {
  return users_.size();
}
inline int AuthUserListResponse::users_size() const {
  return _internal_users_size();
}
inline void AuthUserListResponse::clear_users() {
  users_.Clear();
}
inline std::string* AuthUserListResponse::add_users() {
  // @@protoc_insertion_point(field_add_mutable:etcdserverpb.AuthUserListResponse.users)
  return _internal_add_users();
}
inline const std::string& AuthUserListResponse::_internal_users(int index) const {
  return users_.Get(index);
}
inline const std::string& AuthUserListResponse::users(int index) const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthUserListResponse.users)
  return _internal_users(index);
}
inline std::string* AuthUserListResponse::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthUserListResponse.users)
  return users_.Mutable(index);
}
inline void AuthUserListResponse::set_users(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthUserListResponse.users)
  users_.Mutable(index)->assign(value);
}
inline void AuthUserListResponse::set_users(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:etcdserverpb.AuthUserListResponse.users)
  users_.Mutable(index)->assign(std::move(value));
}
inline void AuthUserListResponse::set_users(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  users_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:etcdserverpb.AuthUserListResponse.users)
}
inline void AuthUserListResponse::set_users(int index, const char* value, size_t size) {
  users_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.AuthUserListResponse.users)
}
inline std::string* AuthUserListResponse::_internal_add_users() {
  return users_.Add();
}
inline void AuthUserListResponse::add_users(const std::string& value) {
  users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:etcdserverpb.AuthUserListResponse.users)
}
inline void AuthUserListResponse::add_users(std::string&& value) {
  users_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:etcdserverpb.AuthUserListResponse.users)
}
inline void AuthUserListResponse::add_users(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:etcdserverpb.AuthUserListResponse.users)
}
inline void AuthUserListResponse::add_users(const char* value, size_t size) {
  users_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:etcdserverpb.AuthUserListResponse.users)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AuthUserListResponse::users() const {
  // @@protoc_insertion_point(field_list:etcdserverpb.AuthUserListResponse.users)
  return users_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AuthUserListResponse::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:etcdserverpb.AuthUserListResponse.users)
  return &users_;
}

// -------------------------------------------------------------------

// AuthRoleDeleteResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool AuthRoleDeleteResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool AuthRoleDeleteResponse::has_header() const {
  return _internal_has_header();
}
inline void AuthRoleDeleteResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& AuthRoleDeleteResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& AuthRoleDeleteResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleDeleteResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* AuthRoleDeleteResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleDeleteResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* AuthRoleDeleteResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* AuthRoleDeleteResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleDeleteResponse.header)
  return _internal_mutable_header();
}
inline void AuthRoleDeleteResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleDeleteResponse.header)
}

// -------------------------------------------------------------------

// AuthRoleGrantPermissionResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool AuthRoleGrantPermissionResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool AuthRoleGrantPermissionResponse::has_header() const {
  return _internal_has_header();
}
inline void AuthRoleGrantPermissionResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& AuthRoleGrantPermissionResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& AuthRoleGrantPermissionResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleGrantPermissionResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* AuthRoleGrantPermissionResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleGrantPermissionResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* AuthRoleGrantPermissionResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* AuthRoleGrantPermissionResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleGrantPermissionResponse.header)
  return _internal_mutable_header();
}
inline void AuthRoleGrantPermissionResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleGrantPermissionResponse.header)
}

// -------------------------------------------------------------------

// AuthRoleRevokePermissionResponse

// .etcdserverpb.ResponseHeader header = 1;
inline bool AuthRoleRevokePermissionResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool AuthRoleRevokePermissionResponse::has_header() const {
  return _internal_has_header();
}
inline void AuthRoleRevokePermissionResponse::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::etcdserverpb::ResponseHeader& AuthRoleRevokePermissionResponse::_internal_header() const {
  const ::etcdserverpb::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etcdserverpb::ResponseHeader*>(
      &::etcdserverpb::_ResponseHeader_default_instance_);
}
inline const ::etcdserverpb::ResponseHeader& AuthRoleRevokePermissionResponse::header() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.AuthRoleRevokePermissionResponse.header)
  return _internal_header();
}
inline ::etcdserverpb::ResponseHeader* AuthRoleRevokePermissionResponse::release_header() {
  // @@protoc_insertion_point(field_release:etcdserverpb.AuthRoleRevokePermissionResponse.header)
  
  ::etcdserverpb::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::etcdserverpb::ResponseHeader* AuthRoleRevokePermissionResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::etcdserverpb::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::etcdserverpb::ResponseHeader* AuthRoleRevokePermissionResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.AuthRoleRevokePermissionResponse.header)
  return _internal_mutable_header();
}
inline void AuthRoleRevokePermissionResponse::set_allocated_header(::etcdserverpb::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.AuthRoleRevokePermissionResponse.header)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace etcdserverpb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::etcdserverpb::RangeRequest_SortOrder> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::etcdserverpb::RangeRequest_SortOrder>() {
  return ::etcdserverpb::RangeRequest_SortOrder_descriptor();
}
template <> struct is_proto_enum< ::etcdserverpb::RangeRequest_SortTarget> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::etcdserverpb::RangeRequest_SortTarget>() {
  return ::etcdserverpb::RangeRequest_SortTarget_descriptor();
}
template <> struct is_proto_enum< ::etcdserverpb::Compare_CompareResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::etcdserverpb::Compare_CompareResult>() {
  return ::etcdserverpb::Compare_CompareResult_descriptor();
}
template <> struct is_proto_enum< ::etcdserverpb::Compare_CompareTarget> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::etcdserverpb::Compare_CompareTarget>() {
  return ::etcdserverpb::Compare_CompareTarget_descriptor();
}
template <> struct is_proto_enum< ::etcdserverpb::WatchCreateRequest_FilterType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::etcdserverpb::WatchCreateRequest_FilterType>() {
  return ::etcdserverpb::WatchCreateRequest_FilterType_descriptor();
}
template <> struct is_proto_enum< ::etcdserverpb::AlarmRequest_AlarmAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::etcdserverpb::AlarmRequest_AlarmAction>() {
  return ::etcdserverpb::AlarmRequest_AlarmAction_descriptor();
}
template <> struct is_proto_enum< ::etcdserverpb::AlarmType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::etcdserverpb::AlarmType>() {
  return ::etcdserverpb::AlarmType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
