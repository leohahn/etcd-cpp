// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: etcdserver.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_etcdserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_etcdserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_etcdserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_etcdserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_etcdserver_2eproto;
namespace etcdserverpb {
class Metadata;
class MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace etcdserverpb
PROTOBUF_NAMESPACE_OPEN
template<> ::etcdserverpb::Metadata* Arena::CreateMaybeMessage<::etcdserverpb::Metadata>(Arena*);
template<> ::etcdserverpb::Request* Arena::CreateMaybeMessage<::etcdserverpb::Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace etcdserverpb {

// ===================================================================

class Request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.Request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etcdserver_2eproto);
    return ::descriptor_table_etcdserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodFieldNumber = 2,
    kPathFieldNumber = 3,
    kValFieldNumber = 4,
    kPrevValueFieldNumber = 6,
    kIDFieldNumber = 1,
    kPrevIndexFieldNumber = 7,
    kExpirationFieldNumber = 9,
    kSinceFieldNumber = 11,
    kDirFieldNumber = 5,
    kPrevExistFieldNumber = 8,
    kWaitFieldNumber = 10,
    kRecursiveFieldNumber = 12,
    kSortedFieldNumber = 13,
    kQuorumFieldNumber = 14,
    kStreamFieldNumber = 16,
    kRefreshFieldNumber = 17,
    kTimeFieldNumber = 15,
  };
  // optional string Method = 2;
  bool has_method() const;
  private:
  bool _internal_has_method() const;
  public:
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // optional string Path = 3;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional string Val = 4;
  bool has_val() const;
  private:
  bool _internal_has_val() const;
  public:
  void clear_val();
  const std::string& val() const;
  void set_val(const std::string& value);
  void set_val(std::string&& value);
  void set_val(const char* value);
  void set_val(const char* value, size_t size);
  std::string* mutable_val();
  std::string* release_val();
  void set_allocated_val(std::string* val);
  private:
  const std::string& _internal_val() const;
  void _internal_set_val(const std::string& value);
  std::string* _internal_mutable_val();
  public:

  // optional string PrevValue = 6;
  bool has_prevvalue() const;
  private:
  bool _internal_has_prevvalue() const;
  public:
  void clear_prevvalue();
  const std::string& prevvalue() const;
  void set_prevvalue(const std::string& value);
  void set_prevvalue(std::string&& value);
  void set_prevvalue(const char* value);
  void set_prevvalue(const char* value, size_t size);
  std::string* mutable_prevvalue();
  std::string* release_prevvalue();
  void set_allocated_prevvalue(std::string* prevvalue);
  private:
  const std::string& _internal_prevvalue() const;
  void _internal_set_prevvalue(const std::string& value);
  std::string* _internal_mutable_prevvalue();
  public:

  // optional uint64 ID = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 PrevIndex = 7;
  bool has_previndex() const;
  private:
  bool _internal_has_previndex() const;
  public:
  void clear_previndex();
  ::PROTOBUF_NAMESPACE_ID::uint64 previndex() const;
  void set_previndex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_previndex() const;
  void _internal_set_previndex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int64 Expiration = 9;
  bool has_expiration() const;
  private:
  bool _internal_has_expiration() const;
  public:
  void clear_expiration();
  ::PROTOBUF_NAMESPACE_ID::int64 expiration() const;
  void set_expiration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expiration() const;
  void _internal_set_expiration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional uint64 Since = 11;
  bool has_since() const;
  private:
  bool _internal_has_since() const;
  public:
  void clear_since();
  ::PROTOBUF_NAMESPACE_ID::uint64 since() const;
  void set_since(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_since() const;
  void _internal_set_since(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool Dir = 5;
  bool has_dir() const;
  private:
  bool _internal_has_dir() const;
  public:
  void clear_dir();
  bool dir() const;
  void set_dir(bool value);
  private:
  bool _internal_dir() const;
  void _internal_set_dir(bool value);
  public:

  // optional bool PrevExist = 8;
  bool has_prevexist() const;
  private:
  bool _internal_has_prevexist() const;
  public:
  void clear_prevexist();
  bool prevexist() const;
  void set_prevexist(bool value);
  private:
  bool _internal_prevexist() const;
  void _internal_set_prevexist(bool value);
  public:

  // optional bool Wait = 10;
  bool has_wait() const;
  private:
  bool _internal_has_wait() const;
  public:
  void clear_wait();
  bool wait() const;
  void set_wait(bool value);
  private:
  bool _internal_wait() const;
  void _internal_set_wait(bool value);
  public:

  // optional bool Recursive = 12;
  bool has_recursive() const;
  private:
  bool _internal_has_recursive() const;
  public:
  void clear_recursive();
  bool recursive() const;
  void set_recursive(bool value);
  private:
  bool _internal_recursive() const;
  void _internal_set_recursive(bool value);
  public:

  // optional bool Sorted = 13;
  bool has_sorted() const;
  private:
  bool _internal_has_sorted() const;
  public:
  void clear_sorted();
  bool sorted() const;
  void set_sorted(bool value);
  private:
  bool _internal_sorted() const;
  void _internal_set_sorted(bool value);
  public:

  // optional bool Quorum = 14;
  bool has_quorum() const;
  private:
  bool _internal_has_quorum() const;
  public:
  void clear_quorum();
  bool quorum() const;
  void set_quorum(bool value);
  private:
  bool _internal_quorum() const;
  void _internal_set_quorum(bool value);
  public:

  // optional bool Stream = 16;
  bool has_stream() const;
  private:
  bool _internal_has_stream() const;
  public:
  void clear_stream();
  bool stream() const;
  void set_stream(bool value);
  private:
  bool _internal_stream() const;
  void _internal_set_stream(bool value);
  public:

  // optional bool Refresh = 17;
  bool has_refresh() const;
  private:
  bool _internal_has_refresh() const;
  public:
  void clear_refresh();
  bool refresh() const;
  void set_refresh(bool value);
  private:
  bool _internal_refresh() const;
  void _internal_set_refresh(bool value);
  public:

  // optional int64 Time = 15;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.Request)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prevvalue_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 previndex_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiration_;
  ::PROTOBUF_NAMESPACE_ID::uint64 since_;
  bool dir_;
  bool prevexist_;
  bool wait_;
  bool recursive_;
  bool sorted_;
  bool quorum_;
  bool stream_;
  bool refresh_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  friend struct ::TableStruct_etcdserver_2eproto;
};
// -------------------------------------------------------------------

class Metadata :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etcdserverpb.Metadata) */ {
 public:
  Metadata();
  virtual ~Metadata();

  Metadata(const Metadata& from);
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Metadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Metadata* New() const final {
    return CreateMaybeMessage<Metadata>(nullptr);
  }

  Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Metadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Metadata& from);
  void MergeFrom(const Metadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etcdserverpb.Metadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etcdserver_2eproto);
    return ::descriptor_table_etcdserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIDFieldNumber = 1,
    kClusterIDFieldNumber = 2,
  };
  // optional uint64 NodeID = 1;
  bool has_nodeid() const;
  private:
  bool _internal_has_nodeid() const;
  public:
  void clear_nodeid();
  ::PROTOBUF_NAMESPACE_ID::uint64 nodeid() const;
  void set_nodeid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nodeid() const;
  void _internal_set_nodeid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 ClusterID = 2;
  bool has_clusterid() const;
  private:
  bool _internal_has_clusterid() const;
  public:
  void clear_clusterid();
  ::PROTOBUF_NAMESPACE_ID::uint64 clusterid() const;
  void set_clusterid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_clusterid() const;
  void _internal_set_clusterid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:etcdserverpb.Metadata)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nodeid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 clusterid_;
  friend struct ::TableStruct_etcdserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// optional uint64 ID = 1;
inline bool Request::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Request::has_id() const {
  return _internal_has_id();
}
inline void Request::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Request::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Request::id() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.ID)
  return _internal_id();
}
inline void Request::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void Request::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.ID)
}

// optional string Method = 2;
inline bool Request::_internal_has_method() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request::has_method() const {
  return _internal_has_method();
}
inline void Request::clear_method() {
  method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Request::method() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.Method)
  return _internal_method();
}
inline void Request::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.Method)
}
inline std::string* Request::mutable_method() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.Request.Method)
  return _internal_mutable_method();
}
inline const std::string& Request::_internal_method() const {
  return method_.GetNoArena();
}
inline void Request::_internal_set_method(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Request::set_method(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  method_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.Request.Method)
}
inline void Request::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.Request.Method)
}
inline void Request::set_method(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.Request.Method)
}
inline std::string* Request::_internal_mutable_method() {
  _has_bits_[0] |= 0x00000001u;
  return method_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Request::release_method() {
  // @@protoc_insertion_point(field_release:etcdserverpb.Request.Method)
  if (!has_method()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return method_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  method_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.Request.Method)
}

// optional string Path = 3;
inline bool Request::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request::has_path() const {
  return _internal_has_path();
}
inline void Request::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Request::path() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.Path)
  return _internal_path();
}
inline void Request::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.Path)
}
inline std::string* Request::mutable_path() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.Request.Path)
  return _internal_mutable_path();
}
inline const std::string& Request::_internal_path() const {
  return path_.GetNoArena();
}
inline void Request::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Request::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.Request.Path)
}
inline void Request::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.Request.Path)
}
inline void Request::set_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.Request.Path)
}
inline std::string* Request::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000002u;
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Request::release_path() {
  // @@protoc_insertion_point(field_release:etcdserverpb.Request.Path)
  if (!has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.Request.Path)
}

// optional string Val = 4;
inline bool Request::_internal_has_val() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Request::has_val() const {
  return _internal_has_val();
}
inline void Request::clear_val() {
  val_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Request::val() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.Val)
  return _internal_val();
}
inline void Request::set_val(const std::string& value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.Val)
}
inline std::string* Request::mutable_val() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.Request.Val)
  return _internal_mutable_val();
}
inline const std::string& Request::_internal_val() const {
  return val_.GetNoArena();
}
inline void Request::_internal_set_val(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  val_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Request::set_val(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  val_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.Request.Val)
}
inline void Request::set_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  val_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.Request.Val)
}
inline void Request::set_val(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  val_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.Request.Val)
}
inline std::string* Request::_internal_mutable_val() {
  _has_bits_[0] |= 0x00000004u;
  return val_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Request::release_val() {
  // @@protoc_insertion_point(field_release:etcdserverpb.Request.Val)
  if (!has_val()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return val_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_val(std::string* val) {
  if (val != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  val_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), val);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.Request.Val)
}

// optional bool Dir = 5;
inline bool Request::_internal_has_dir() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Request::has_dir() const {
  return _internal_has_dir();
}
inline void Request::clear_dir() {
  dir_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Request::_internal_dir() const {
  return dir_;
}
inline bool Request::dir() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.Dir)
  return _internal_dir();
}
inline void Request::_internal_set_dir(bool value) {
  _has_bits_[0] |= 0x00000100u;
  dir_ = value;
}
inline void Request::set_dir(bool value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.Dir)
}

// optional string PrevValue = 6;
inline bool Request::_internal_has_prevvalue() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Request::has_prevvalue() const {
  return _internal_has_prevvalue();
}
inline void Request::clear_prevvalue() {
  prevvalue_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Request::prevvalue() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.PrevValue)
  return _internal_prevvalue();
}
inline void Request::set_prevvalue(const std::string& value) {
  _internal_set_prevvalue(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.PrevValue)
}
inline std::string* Request::mutable_prevvalue() {
  // @@protoc_insertion_point(field_mutable:etcdserverpb.Request.PrevValue)
  return _internal_mutable_prevvalue();
}
inline const std::string& Request::_internal_prevvalue() const {
  return prevvalue_.GetNoArena();
}
inline void Request::_internal_set_prevvalue(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  prevvalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Request::set_prevvalue(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  prevvalue_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:etcdserverpb.Request.PrevValue)
}
inline void Request::set_prevvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  prevvalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:etcdserverpb.Request.PrevValue)
}
inline void Request::set_prevvalue(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  prevvalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:etcdserverpb.Request.PrevValue)
}
inline std::string* Request::_internal_mutable_prevvalue() {
  _has_bits_[0] |= 0x00000008u;
  return prevvalue_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Request::release_prevvalue() {
  // @@protoc_insertion_point(field_release:etcdserverpb.Request.PrevValue)
  if (!has_prevvalue()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return prevvalue_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_prevvalue(std::string* prevvalue) {
  if (prevvalue != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  prevvalue_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prevvalue);
  // @@protoc_insertion_point(field_set_allocated:etcdserverpb.Request.PrevValue)
}

// optional uint64 PrevIndex = 7;
inline bool Request::_internal_has_previndex() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Request::has_previndex() const {
  return _internal_has_previndex();
}
inline void Request::clear_previndex() {
  previndex_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Request::_internal_previndex() const {
  return previndex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Request::previndex() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.PrevIndex)
  return _internal_previndex();
}
inline void Request::_internal_set_previndex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  previndex_ = value;
}
inline void Request::set_previndex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_previndex(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.PrevIndex)
}

// optional bool PrevExist = 8;
inline bool Request::_internal_has_prevexist() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Request::has_prevexist() const {
  return _internal_has_prevexist();
}
inline void Request::clear_prevexist() {
  prevexist_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool Request::_internal_prevexist() const {
  return prevexist_;
}
inline bool Request::prevexist() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.PrevExist)
  return _internal_prevexist();
}
inline void Request::_internal_set_prevexist(bool value) {
  _has_bits_[0] |= 0x00000200u;
  prevexist_ = value;
}
inline void Request::set_prevexist(bool value) {
  _internal_set_prevexist(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.PrevExist)
}

// optional int64 Expiration = 9;
inline bool Request::_internal_has_expiration() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Request::has_expiration() const {
  return _internal_has_expiration();
}
inline void Request::clear_expiration() {
  expiration_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Request::_internal_expiration() const {
  return expiration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Request::expiration() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.Expiration)
  return _internal_expiration();
}
inline void Request::_internal_set_expiration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  expiration_ = value;
}
inline void Request::set_expiration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expiration(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.Expiration)
}

// optional bool Wait = 10;
inline bool Request::_internal_has_wait() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Request::has_wait() const {
  return _internal_has_wait();
}
inline void Request::clear_wait() {
  wait_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool Request::_internal_wait() const {
  return wait_;
}
inline bool Request::wait() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.Wait)
  return _internal_wait();
}
inline void Request::_internal_set_wait(bool value) {
  _has_bits_[0] |= 0x00000400u;
  wait_ = value;
}
inline void Request::set_wait(bool value) {
  _internal_set_wait(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.Wait)
}

// optional uint64 Since = 11;
inline bool Request::_internal_has_since() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Request::has_since() const {
  return _internal_has_since();
}
inline void Request::clear_since() {
  since_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Request::_internal_since() const {
  return since_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Request::since() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.Since)
  return _internal_since();
}
inline void Request::_internal_set_since(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  since_ = value;
}
inline void Request::set_since(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_since(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.Since)
}

// optional bool Recursive = 12;
inline bool Request::_internal_has_recursive() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Request::has_recursive() const {
  return _internal_has_recursive();
}
inline void Request::clear_recursive() {
  recursive_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool Request::_internal_recursive() const {
  return recursive_;
}
inline bool Request::recursive() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.Recursive)
  return _internal_recursive();
}
inline void Request::_internal_set_recursive(bool value) {
  _has_bits_[0] |= 0x00000800u;
  recursive_ = value;
}
inline void Request::set_recursive(bool value) {
  _internal_set_recursive(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.Recursive)
}

// optional bool Sorted = 13;
inline bool Request::_internal_has_sorted() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Request::has_sorted() const {
  return _internal_has_sorted();
}
inline void Request::clear_sorted() {
  sorted_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool Request::_internal_sorted() const {
  return sorted_;
}
inline bool Request::sorted() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.Sorted)
  return _internal_sorted();
}
inline void Request::_internal_set_sorted(bool value) {
  _has_bits_[0] |= 0x00001000u;
  sorted_ = value;
}
inline void Request::set_sorted(bool value) {
  _internal_set_sorted(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.Sorted)
}

// optional bool Quorum = 14;
inline bool Request::_internal_has_quorum() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Request::has_quorum() const {
  return _internal_has_quorum();
}
inline void Request::clear_quorum() {
  quorum_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool Request::_internal_quorum() const {
  return quorum_;
}
inline bool Request::quorum() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.Quorum)
  return _internal_quorum();
}
inline void Request::_internal_set_quorum(bool value) {
  _has_bits_[0] |= 0x00002000u;
  quorum_ = value;
}
inline void Request::set_quorum(bool value) {
  _internal_set_quorum(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.Quorum)
}

// optional int64 Time = 15;
inline bool Request::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Request::has_time() const {
  return _internal_has_time();
}
inline void Request::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Request::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Request::time() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.Time)
  return _internal_time();
}
inline void Request::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00010000u;
  time_ = value;
}
inline void Request::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.Time)
}

// optional bool Stream = 16;
inline bool Request::_internal_has_stream() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Request::has_stream() const {
  return _internal_has_stream();
}
inline void Request::clear_stream() {
  stream_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool Request::_internal_stream() const {
  return stream_;
}
inline bool Request::stream() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.Stream)
  return _internal_stream();
}
inline void Request::_internal_set_stream(bool value) {
  _has_bits_[0] |= 0x00004000u;
  stream_ = value;
}
inline void Request::set_stream(bool value) {
  _internal_set_stream(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.Stream)
}

// optional bool Refresh = 17;
inline bool Request::_internal_has_refresh() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Request::has_refresh() const {
  return _internal_has_refresh();
}
inline void Request::clear_refresh() {
  refresh_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool Request::_internal_refresh() const {
  return refresh_;
}
inline bool Request::refresh() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Request.Refresh)
  return _internal_refresh();
}
inline void Request::_internal_set_refresh(bool value) {
  _has_bits_[0] |= 0x00008000u;
  refresh_ = value;
}
inline void Request::set_refresh(bool value) {
  _internal_set_refresh(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Request.Refresh)
}

// -------------------------------------------------------------------

// Metadata

// optional uint64 NodeID = 1;
inline bool Metadata::_internal_has_nodeid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Metadata::has_nodeid() const {
  return _internal_has_nodeid();
}
inline void Metadata::clear_nodeid() {
  nodeid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Metadata::_internal_nodeid() const {
  return nodeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Metadata::nodeid() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Metadata.NodeID)
  return _internal_nodeid();
}
inline void Metadata::_internal_set_nodeid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  nodeid_ = value;
}
inline void Metadata::set_nodeid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nodeid(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Metadata.NodeID)
}

// optional uint64 ClusterID = 2;
inline bool Metadata::_internal_has_clusterid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Metadata::has_clusterid() const {
  return _internal_has_clusterid();
}
inline void Metadata::clear_clusterid() {
  clusterid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Metadata::_internal_clusterid() const {
  return clusterid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Metadata::clusterid() const {
  // @@protoc_insertion_point(field_get:etcdserverpb.Metadata.ClusterID)
  return _internal_clusterid();
}
inline void Metadata::_internal_set_clusterid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  clusterid_ = value;
}
inline void Metadata::set_clusterid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_clusterid(value);
  // @@protoc_insertion_point(field_set:etcdserverpb.Metadata.ClusterID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace etcdserverpb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_etcdserver_2eproto
